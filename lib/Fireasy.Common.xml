<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fireasy.Common</name>
    </assembly>
    <members>
        <member name="T:Fireasy.Common.ActionQueue">
            <summary>
            一个提供委托执行的队列。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ActionQueue.ExceptionHandler">
            <summary>
            获取或设置用于处理异常的委托。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ActionQueue.Push(System.Action,System.Int32)">
            <summary>
            将一个委托添加到队列中。
            </summary>
            <param name="action">要执行的委托。</param>
            <param name="tryTimes">重试次数。</param>
            <returns>执行的标识。</returns>
        </member>
        <member name="M:Fireasy.Common.ActionQueue.ProcessQueue">
            <summary>
            处理队列内的委托。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ActionQueue.ActionEntry.Id">
            <summary>
            获取或设置委托的标识。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ActionQueue.ActionEntry.Action">
            <summary>
            获取或设置要执行的委托。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ActionQueue.ActionEntry.CanTry">
            <summary>
            判断是否可以重试。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Aop.AspectException">
            <summary>
            表示 Aspect 类型的异常。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Aop.AspectException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Aop.AspectException"/> 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
        </member>
        <member name="M:Fireasy.Common.Aop.AspectException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Aop.AspectException"/> 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
            <param name="exception">内部异常对象。</param>
        </member>
        <member name="T:Fireasy.Common.Aop.AspectFactory">
            <summary>
            面向方面的类型工厂。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Aop.AspectFactory.BuildProxy``1(System.Object[])">
            <summary>
            创建一个代理，将定义的拦截器注入到属性或方法内。
            </summary>
            <typeparam name="T">用于创建代理类型的基类型。</typeparam>
            <param name="args">创建对象的一组参数。</param>
            <returns>类型 <typeparamref name="T"/> 的代理。</returns>
        </member>
        <member name="M:Fireasy.Common.Aop.AspectFactory.BuildProxy(System.Type,System.Object[])">
            <summary>
            创建一个代理，将定义的拦截器注入到属性或方法内。
            </summary>
            <param name="objectType">用于创建代理类型的基类型。</param>
            <param name="args">创建对象的一组参数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.AspectFactory.GetProxyType(System.Type)">
            <summary>
            获取新的代理类。
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Aop.IAopImplement">
            <summary>
            标记实现 Aop 的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Aop.IAopSupport">
            <summary>
            定义受 Aop 支持。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Aop.IInterceptor">
            <summary>
            提供对类成员进行拦截的方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Aop.IInterceptor.Initialize(Fireasy.Common.Aop.InterceptContext)">
            <summary>
            使用上下文对象对当前的拦截器进行初始化。
            </summary>
            <param name="context">包含拦截定义的上下文。</param>
        </member>
        <member name="M:Fireasy.Common.Aop.IInterceptor.Intercept(Fireasy.Common.Aop.InterceptCallInfo)">
            <summary>
            将自定义方法注入到当前的拦截点。
            </summary>
            <param name="info">拦截调用信息。</param>
        </member>
        <member name="T:Fireasy.Common.Aop.InterceptAttribute">
            <summary>
            表示一个属性或方法使用指定的拦截器注入一段执行代码。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptAttribute.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Aop.InterceptAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Aop.InterceptAttribute"/> 类的新实例。
            </summary>
            <param name="interceptorType">拦截器的类型。</param>
            <param name="allowThrowException">是否在 try 语句块内抛出异常。</param>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptAttribute.InterceptorType">
            <summary>
            获取或设置拦截器的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptAttribute.AllowThrowException">
            <summary>
            获取或设置是否在 try 语句块内抛出异常。如果为 false，异常将不被抛出，而是使用拦截器进行通知。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Aop.InterceptBuilder">
            <summary>
            代理类型的构造器，向属性或方法内注入拦截器的执行过程。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptBuilder.AOP_PREFIX">
            <summary>
            成员的前缀
            </summary>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.BuildTypeCached(System.Type,Fireasy.Common.Aop.InterceptBuildOption)">
            <summary>
            创建一个代理类型。
            </summary>
            <param name="type">要注入AOP的类型。</param>
            <param name="option"></param>
            <returns>代理类。</returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.BuildType(System.Type,Fireasy.Common.Aop.InterceptBuildOption)">
            <summary>
            创建一个代理类型。
            </summary>
            <param name="type">要注入AOP的类型。</param>
            <param name="option"></param>
            <returns>代理类。</returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.GetInterceptMembers(System.Type,System.Boolean)">
            <summary>
            获取所有使用 <see cref="T:Fireasy.Common.Aop.InterceptAttribute"/> 特性修饰的成员。
            </summary>
            <param name="type"></param>
            <param name="throughout"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.DefineConstructors(Fireasy.Common.Emit.DynamicTypeBuilder,System.Collections.Generic.IList{Fireasy.Common.Aop.InterceptAttribute})">
            <summary>
            定义构造器重载。
            </summary>
            <param name="globalIntercepts"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.DefineInterceptMethod(Fireasy.Common.Emit.DynamicTypeBuilder)">
            <summary>
            在代理类中定义一个调用拦截器的方法。
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.DefineInitializeMethod(Fireasy.Common.Emit.DynamicTypeBuilder,System.String)">
            <summary>
            为每一个拦截的方法定义一个初始化上下文的方法。
            </summary>
            <param name="builder"></param>
            <param name="methodName">所要拦截的方法。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.FindAndInjectMethods(Fireasy.Common.Emit.DynamicTypeBuilder,System.Collections.Generic.IList{System.Reflection.MemberInfo},System.Collections.Generic.IList{Fireasy.Common.Aop.InterceptAttribute},Fireasy.Common.Emit.DynamicMethodBuilder)">
            <summary>
            查找并向方法体内注入代码。
            </summary>
            <param name="builder"></param>
            <param name="members"></param>
            <param name="globalIntercepts"></param>
            <param name="interceptMethod">前面定义的拦截方法体。</param>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.FindAndInjectProperties(Fireasy.Common.Emit.DynamicTypeBuilder,System.Collections.Generic.IList{System.Reflection.MemberInfo},System.Collections.Generic.IList{Fireasy.Common.Aop.InterceptAttribute},Fireasy.Common.Emit.DynamicMethodBuilder)">
            <summary>
            查找并向属性体内注入代码。
            </summary>
            <param name="builder"></param>
            <param name="members"></param>
            <param name="globalIntercepts"></param>
            <param name="interceptMethod">前面定义的拦截方法体。</param>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.InjectMethod(Fireasy.Common.Emit.DynamicTypeBuilder,System.Collections.Generic.IList{Fireasy.Common.Aop.InterceptAttribute},Fireasy.Common.Emit.DynamicMethodBuilder,System.Reflection.MethodInfo)">
            <summary>
            向方法体内注入代码。
            </summary>
            <param name="builder"></param>
            <param name="globalIntercepts"></param>
            <param name="interceptMethod">前面定义的拦截方法体。</param>
            <param name="method">所要注入的方法。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.InjectGetMethod(Fireasy.Common.Emit.DynamicTypeBuilder,Fireasy.Common.Emit.DynamicFieldBuilder,System.Collections.Generic.IList{Fireasy.Common.Aop.InterceptAttribute},Fireasy.Common.Emit.DynamicMethodBuilder,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            向属性的 get 方法中注入代码。
            </summary>
            <param name="builder"></param>
            <param name="field"></param>
            <param name="globalIntercepts"></param>
            <param name="interceptMethod"></param>
            <param name="property"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.InjectSetMethod(Fireasy.Common.Emit.DynamicTypeBuilder,Fireasy.Common.Emit.DynamicFieldBuilder,System.Collections.Generic.IList{Fireasy.Common.Aop.InterceptAttribute},Fireasy.Common.Emit.DynamicMethodBuilder,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            向属性的 set 方法中注入代码。
            </summary>
            <param name="builder"></param>
            <param name="field"></param>
            <param name="globalIntercepts"></param>
            <param name="interceptMethod"></param>
            <param name="property"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.DeclareLocal(Fireasy.Common.Emit.EmitHelper)">
            <summary>
            定义变量。
            </summary>
            <param name="emitter"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.ThrowException(Fireasy.Common.Emit.EmitHelper)">
            <summary>
            抛出异常。
            </summary>
            <param name="emitter"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.InitInterceptors(Fireasy.Common.Emit.EmitHelper,System.Collections.Generic.IEnumerable{Fireasy.Common.Aop.InterceptAttribute})">
            <summary>
            初始化拦截器。
            </summary>
            <param name="emitter"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.CallBaseMethod(Fireasy.Common.Emit.EmitHelper,System.Reflection.MethodInfo)">
            <summary>
            调用父类的方法。
            </summary>
            <param name="emitter"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.CallInterceptors(Fireasy.Common.Emit.EmitHelper,Fireasy.Common.Emit.DynamicMethodBuilder,Fireasy.Common.Aop.InterceptType)">
            <summary>
            调用拦截器。
            </summary>
            <param name="emitter"></param>
            <param name="interceptMethod"></param>
            <param name="interceptType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.CallInitialize(Fireasy.Common.Emit.EmitHelper,Fireasy.Common.Emit.DynamicMethodBuilder)">
            <summary>
            调用初始化拦截器的方法。
            </summary>
            <param name="emitter"></param>
            <param name="initMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.InitLocal(Fireasy.Common.Emit.EmitHelper,System.Reflection.MemberInfo,System.Reflection.MethodInfo)">
            <summary>
            初始化变量。
            </summary>
            <param name="emitter"></param>
            <param name="member"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.SetCurrentTarget(Fireasy.Common.Emit.EmitHelper)">
            <summary>
            设置当前实例。
            </summary>
            <param name="emitter"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.SetException(Fireasy.Common.Emit.EmitHelper)">
            <summary>
            设置异常信息。
            </summary>
            <param name="emitter"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.SetReturnValue(Fireasy.Common.Emit.EmitHelper,System.Type)">
            <summary>
            设置返回值信息。
            </summary>
            <param name="emitter"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.GetReturnValue(Fireasy.Common.Emit.EmitHelper,System.Type,System.Reflection.Emit.Label)">
            <summary>
            设置返回值信息。
            </summary>
            <param name="emitter"></param>
            <param name="returnType"></param>
            <param name="lbRetValNotNull"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.SetArguments(Fireasy.Common.Emit.EmitHelper,System.Reflection.MethodInfo)">
            <summary>
            为 <see cref="T:Fireasy.Common.Aop.InterceptCallInfo"/> 对象设置所注入方法的参数。
            </summary>
            <param name="emitter"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.SetCurrentMember(Fireasy.Common.Emit.EmitHelper,System.Reflection.MemberInfo)">
            <summary>
            为 <see cref="T:Fireasy.Common.Aop.InterceptCallInfo"/> 对象设置 Member 属性。
            </summary>
            <param name="emitter"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Aop.InterceptBuilder.AllowThrowException(System.Collections.Generic.IEnumerable{Fireasy.Common.Aop.InterceptAttribute})">
            <summary>
            检查一组 Attribute 中是否有其中一个允许抛出异常。
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Aop.InterceptBuildOption">
            <summary>
            注入构造的选项。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptBuildOption.TypeNameFormatter">
            <summary>
            获取或设置类名称的格式器。使用 {0} 格式化。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptBuildOption.AssemblyInitializer">
            <summary>
            获取或设置 <see cref="T:Fireasy.Common.Emit.DynamicAssemblyBuilder"/> 的初始化器。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptBuildOption.TypeInitializer">
            <summary>
            获取或设置 <see cref="T:Fireasy.Common.Emit.DynamicTypeBuilder"/> 的初始化器。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptBuildOption.AssemblyBuilder">
            <summary>
            获取或设置指定的 <see cref="T:Fireasy.Common.Emit.DynamicAssemblyBuilder"/> 对象。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Aop.InterceptCallInfo">
            <summary>
            用于通知客户端的拦截信息。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptCallInfo.DefinedType">
            <summary>
            获取或设置定义的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptCallInfo.Member">
            <summary>
            获取或设置当前被拦截的方法或属性。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptCallInfo.Target">
            <summary>
            获取或设置当前被拦截的目标对象。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptCallInfo.InterceptType">
            <summary>
            获取或设置拦截的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptCallInfo.Arguments">
            <summary>
            获取或设置方法的参数数组。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptCallInfo.ReturnValue">
            <summary>
            获取或设置方法的返回值。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptCallInfo.Exception">
            <summary>
            获取或设置触发的异常信息。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptCallInfo.Cancel">
            <summary>
            获取或设置取消 Before 事件之后调用基类的方法。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Aop.InterceptContext">
            <summary>
            拦截器的上下文信息。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptContext.Attribute">
            <summary>
            获取或设置拦截目标所定义的 <see cref="T:Fireasy.Common.Aop.InterceptAttribute"/>。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Aop.InterceptContext.Target">
            <summary>
            获取或设置当前被拦截的目标对象。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Aop.InterceptType">
            <summary>
            拦截器触发的事件类型。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.None">
            <summary>
            无。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.BeforeMethodCall">
            <summary>
            在调用方法之前。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.AfterMethodCall">
            <summary>
            在调用方法之后。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.BeforeGetValue">
            <summary>
            在获取属性之前。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.AfterGetValue">
            <summary>
            在获取属性之后。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.BeforeSetValue">
            <summary>
            在设置属性之前。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.AfterSetValue">
            <summary>
            在设置属性之后。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.Catching">
            <summary>
            异常处理的 catch 块。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Aop.InterceptType.Finally">
            <summary>
            异常处理的 finaly 块。
            </summary>
        </member>
        <member name="T:Fireasy.Common.AssertFlag">
            <summary>
            用于循环中对第一轮进行处理。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.AssertFlag.#ctor">
            <summary>
            使用初始的标志位初始化 <see cref="T:Fireasy.Common.AssertFlag"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.AssertFlag.AssertTrue">
            <summary>
            判断当前的标志位是否已初始的值相等。循环中的第一轮始终返回 true，从第二轮开始，始终返回 false。
            </summary>
            <returns>相等则为 true，否则为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.AssertFlag.Reset">
            <summary>
            重置标志位为初始状态。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Caching.AbsoluteTime">
            <summary>
            使用一个绝对时间作为缓存的过期检测策略，缓存项生命周期是到达该时间时为止。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.AbsoluteTime.#ctor(System.DateTime)">
            <summary>
            使用一个绝对时间初始化 <see cref="T:Fireasy.Common.Caching.AbsoluteTime"/> 类的新实例。
            </summary>
            <param name="absoluteTime">绝对时间。</param>
        </member>
        <member name="M:Fireasy.Common.Caching.AbsoluteTime.#ctor(System.TimeSpan)">
            <summary>
            使用一个时间间隔初始化 <see cref="T:Fireasy.Common.Caching.AbsoluteTime"/> 类的新实例。
            </summary>
            <param name="timeSpan">当前系统时间后的一个时间段。</param>
        </member>
        <member name="P:Fireasy.Common.Caching.AbsoluteTime.ExpirationTime">
            <summary>
            获取到期时间。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.AbsoluteTime.Expiration">
            <summary>
            获取时间间隔。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.AbsoluteTime.HasExpired">
            <summary>
            检查缓存项是否达到过期时间。
            </summary>
            <returns>过期为 true，有效为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.AbsoluteTime.GetExpirationTime">
            <summary>
            获取到期时间。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Caching.CacheException">
            <summary>
            缓存操作中发生的异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.CacheException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Caching.CacheException"/> 类的新实例。
            </summary>
            <param name="message">自定义异常信息。</param>
            <param name="innerException">内部异常。</param>
        </member>
        <member name="T:Fireasy.Common.Caching.CacheItem">
            <summary>
            放入缓存中的数据的扩展结构。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.CacheItem.Key">
            <summary>
            获取项的键名。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.CacheItem.Gen">
            <summary>
            获取项的代数。当被客户端访问时，代数递增。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.CacheItem.Value">
            <summary>
            获取数据的值。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.CacheItem.NotifyRemoved">
            <summary>
            获取或设置数据从缓存中移除时的回调方法。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.CacheItem.Expiration">
            <summary>
            获取对象过期检测对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.CacheItem.#ctor(System.String,System.Object,Fireasy.Common.Caching.ICacheItemExpiration,Fireasy.Common.Caching.CacheItemRemovedCallback)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Caching.CacheItem"/> 类的新实例。
            </summary>
            <param name="key">键名。</param>
            <param name="value">要缓存的数据的值。</param>
            <param name="expiration">数据存放的有效时间。</param>
            <param name="notifyRemoved">缓存移除通知。</param>
        </member>
        <member name="M:Fireasy.Common.Caching.CacheItem.HasExpired">
            <summary>
            检查是否到期。
            </summary>
            <returns>已经超过到期时间，则为 true，否则为 false。</returns>
        </member>
        <member name="T:Fireasy.Common.Caching.CacheItemRemovedCallback">
            <summary>
            当对象从缓存中移除时，该回调方法用于通知应用程序。
            </summary>
            <param name="key">被移除的缓存键。</param>
            <param name="value">被移除的缓存对象。</param>
        </member>
        <member name="T:Fireasy.Common.Caching.CacheManagerFactory">
            <summary>
            缓存管理器的工厂。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.CacheManagerFactory.CreateManager(System.String)">
            <summary>
            根据应用程序配置，创建缓存管理器。
            </summary>
            <param name="configName">应用程序配置项的名称。</param>
            <returns><paramref name="configName"/>缺省时，如果应用程序未配置，则为 <see cref="T:Fireasy.Common.Caching.MemoryCacheManager"/>，否则为配置项对应的 <see cref="T:Fireasy.Common.Caching.ICacheManager"/> 实例。</returns>
        </member>
        <member name="T:Fireasy.Common.Caching.CacheOptimizer">
            <summary>
            提供对缓存的优化。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Caching.CacheOptimizer.MAX_GEN_LIMIT">
            <summary>
            最大代限制。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.CacheOptimizer.#ctor(System.Action)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Caching.CacheOptimizer"/> 类的新实例。
            </summary>
            <param name="checkExpired">检查缓存过期的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Caching.CacheOptimizer.Update(Fireasy.Common.Caching.CacheItem,System.Boolean)">
            <summary>
            缓存项递增代数。若指定 <paramref name="checkExpired"/> 则会在递增之前进行过期检查。
            </summary>
            <param name="item">缓存项。</param>
            <param name="checkExpired">是否查检过期。</param>
            <returns>如果过期，则返回 null。</returns>
        </member>
        <member name="T:Fireasy.Common.Caching.CacheServerException">
            <summary>
            缓存服务器相关的异常。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.CacheServerException.#ctor(System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Caching.CacheServerException"/> 类的新实例。
            </summary>
            <param name="exception">具体的异常信息。</param>
        </member>
        <member name="T:Fireasy.Common.Caching.Configuration.CachingConfigurationSection">
            <summary>
            提供对缓存管理器的配置管理。对应的配置节为 fireasy/cachings。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.Configuration.CachingConfigurationSection.Initialize(System.Xml.XmlNode)">
            <summary>
            使用配置节点对当前配置进行初始化。
            </summary>
            <param name="section">对应的配置节点。</param>
        </member>
        <member name="T:Fireasy.Common.Caching.Configuration.CachingConfigurationSectionHandler">
            <summary>
            提供对缓存管理配置节的处理。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Caching.Configuration.CachingConfigurationSetting">
            <summary>
            缓存管理配置信息。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.Configuration.CachingConfigurationSetting.Name">
            <summary>
            获取或设置配置的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.Configuration.CachingConfigurationSetting.CacheType">
            <summary>
            获取或设置缓存管理器的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Caching.FileDependency">
            <summary>
            使用一个外部文件作为缓存的过期检测策略，缓存项生命周期在文件发生修改后终止。无法继承此类。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Caching.FileDependency.lastModifiedTime">
            <summary>
            记录文件最后修改的时间。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.FileDependency.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Caching.FileDependency"/> 类的新实例。
            </summary>
            <param name="filePath">作为缓存依赖的文件路径。</param>
        </member>
        <member name="P:Fireasy.Common.Caching.FileDependency.FilePath">
            <summary>
            获取或设置文件路径。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.FileDependency.HasExpired">
            <summary>
            检查缓存项是否达到过期时间。
            </summary>
            <returns>过期为 true，有效为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.FileDependency.GetExpirationTime">
            <summary>
            获取到期时间。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Caching.ICacheItemExpiration">
            <summary>
            提供缓存项过期检测的方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheItemExpiration.HasExpired">
            <summary>
            返回缓存项是否过期。
            </summary>
            <returns>过期为 true，否则为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheItemExpiration.GetExpirationTime">
            <summary>
            获取到期时间。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Caching.ICacheManager">
            <summary>
            缓存管理的提供接口。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.Add``1(System.String,``0,System.Nullable{System.TimeSpan},Fireasy.Common.Caching.CacheItemRemovedCallback)">
            <summary>
            将对象插入到缓存管理器中。
            </summary>
            <typeparam name="T">缓存对象的类型。</typeparam>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="value">要插入到缓存的对象。</param>
            <param name="expire">对象存放于缓存中的有效时间，到期后将从缓存中移除。如果此值为 null，则默认有效时间为 30 分钟。</param>
            <param name="removeCallback">当对象从缓存中移除时，使用该回调方法通知应用程序。</param>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.Add``1(System.String,``0,Fireasy.Common.Caching.ICacheItemExpiration,Fireasy.Common.Caching.CacheItemRemovedCallback)">
            <summary>
            将对象插入到缓存管理器中。
            </summary>
            <typeparam name="T">缓存对象的类型。</typeparam>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="value">要插入到缓存的对象。</param>
            <param name="expiration">判断对象过期的对象。</param>
            <param name="removeCallback">当对象从缓存中移除时，使用该回调方法通知应用程序。</param>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.Contains(System.String)">
            <summary>
            确定缓存中是否包含指定的缓存键的对象。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <returns>如果缓存中包含指定缓存键的对象，则为 true，否则为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.Get(System.String)">
            <summary>
            获取缓存中指定缓存键的对象。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <returns>检索到的缓存对象，未找到时为 null。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.Get``1(System.String)">
            <summary>
            获取缓存中指定缓存键的对象。
            </summary>
            <typeparam name="T">缓存对象的类型。</typeparam>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <returns>检索到的缓存对象，未找到时为 null。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.GetExpirationTime(System.String)">
            <summary>
            获取缓存的有效时间。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.TryGet``1(System.String,System.Func{``0},System.Func{Fireasy.Common.Caching.ICacheItemExpiration})">
            <summary>
            尝试获取指定缓存键的对象，如果没有则使用工厂函数添加对象到缓存中。
            </summary>
            <typeparam name="T">缓存对象的类型。</typeparam>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="factory">用于添加缓存对象的工厂函数。</param>
            <param name="expiration">判断对象过期的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.TryGet(System.Type,System.String,System.Func{System.Object},System.Func{Fireasy.Common.Caching.ICacheItemExpiration})">
            <summary>
            尝试获取指定缓存键的对象，如果没有则使用工厂函数添加对象到缓存中。
            </summary>
            <param name="dataType">数据类型。</param>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="factory">用于添加缓存对象的工厂函数。</param>
            <param name="expiration">判断对象过期的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.TryGet``1(System.String,``0@)">
            <summary>
            尝试获取指定缓存键的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.Remove(System.String)">
            <summary>
            从缓存中移除指定缓存键的对象。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.GetKeys">
            <summary>
            获取所有的 key。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.ICacheManager.Clear">
            <summary>
            清除所有缓存。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Caching.IDistributedCacheManager">
            <summary>
            分布式缓存管理器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.IDistributedCacheManager.TryIncrement(System.String,System.Func{System.Int64},System.Int32,System.Func{Fireasy.Common.Caching.ICacheItemExpiration})">
            <summary>
            尝试获取增量。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="factory">用于初始化数据的工厂函数。</param>
            <param name="step">递增的步数。</param>
            <param name="expiration">判断对象过期的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.IDistributedCacheManager.TryDecrement(System.String,System.Func{System.Int64},System.Int32,System.Func{Fireasy.Common.Caching.ICacheItemExpiration})">
            <summary>
            尝试获取减量。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="factory">用于初始化数据的工厂函数。</param>
            <param name="step">递减的步数。</param>
            <param name="expiration">判断对象过期的对象。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Caching.MemoryCacheManager">
            <summary>
            基于内存的缓存管理。无法继承此类。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Caching.MemoryCacheManager.Instance">
            <summary>
            获取 <see cref="T:Fireasy.Common.Caching.MemoryCacheManager"/> 的静态实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Caching.MemoryCacheManager"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.Add``1(System.String,``0,System.Nullable{System.TimeSpan},Fireasy.Common.Caching.CacheItemRemovedCallback)">
            <summary>
            将对象插入到缓存管理器中。
            </summary>
            <typeparam name="T">缓存对象的类型。</typeparam>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="value">要插入到缓存的对象。</param>
            <param name="expire">对象存放于缓存中的有效时间，到期后将从缓存中移除。如果此值为 null，则默认有效时间为 30 分钟。</param>
            <param name="removeCallback">当对象从缓存中移除时，使用该回调方法通知应用程序。</param>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.Add``1(System.String,``0,Fireasy.Common.Caching.ICacheItemExpiration,Fireasy.Common.Caching.CacheItemRemovedCallback)">
            <summary>
            将对象插入到缓存管理器中。
            </summary>
            <typeparam name="T">缓存对象的类型。</typeparam>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="value">要插入到缓存的对象。</param>
            <param name="expiration">判断对象过期的对象。</param>
            <param name="removeCallback">当对象从缓存中移除时，使用该回调方法通知应用程序。</param>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.Contains(System.String)">
            <summary>
            确定缓存中是否包含指定的缓存键的对象。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <returns>如果缓存中包含指定缓存键的对象，则为 true，否则为 false。</returns>
            <exception cref="T:System.NotSupportedException">不支持该方法。</exception>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.GetExpirationTime(System.String)">
            <summary>
            获取缓存的有效时间。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.Get(System.String)">
            <summary>
            获取缓存中指定缓存键的对象。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <returns>检索到的缓存对象，未找到时为 null。</returns>
            <exception cref="T:System.NotSupportedException">不支持该方法。</exception>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.Get``1(System.String)">
            <summary>
            获取缓存中指定缓存键的对象。
            </summary>
            <typeparam name="T">缓存对象的类型。</typeparam>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <returns>检索到的缓存对象，未找到时为 null。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.TryGet``1(System.String,System.Func{``0},System.Func{Fireasy.Common.Caching.ICacheItemExpiration})">
            <summary>
            尝试获取指定缓存键的对象，如果没有则使用工厂函数添加对象到缓存中。
            </summary>
            <typeparam name="T">缓存对象的类型。</typeparam>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="factory">用于添加缓存对象的工厂函数。</param>
            <param name="expiration">判断对象过期的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.TryGet(System.Type,System.String,System.Func{System.Object},System.Func{Fireasy.Common.Caching.ICacheItemExpiration})">
            <summary>
            尝试获取指定缓存键的对象，如果没有则使用工厂函数添加对象到缓存中。
            </summary>
            <param name="dataType">数据类型。</param>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <param name="factory">用于添加缓存对象的工厂函数。</param>
            <param name="expiration">判断对象过期的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.TryGet``1(System.String,``0@)">
            <summary>
            尝试获取指定缓存键的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.Remove(System.String)">
            <summary>
            从缓存中移除指定缓存键的对象。
            </summary>
            <param name="cacheKey">用于引用对象的缓存键。</param>
            <exception cref="T:System.NotSupportedException">不支持该方法。</exception>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.GetKeys">
            <summary>
            获取所有的 key。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.Clear">
            <summary>
            清除所有缓存。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Caching.MemoryCacheManager.Capacity">
            <summary>
            获取或设容量大小。默认为 1000。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.NotifyCacheRemoved(Fireasy.Common.Caching.CacheItem)">
            <summary>
            通知缓存项已移除。
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryCacheManager.CheckExpired">
            <summary>
            检查过期的缓存项。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Caching.MemoryDictionary">
            <summary>
            缓存字典。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.MemoryDictionary.CheckCapacity(System.String,System.Int32,System.Action{Fireasy.Common.Caching.CacheItem})">
            <summary>
            检查字典的容量。
            </summary>
            <param name="cacheKey">缓存键。</param>
            <param name="capacity">设定的容量值。</param>
            <param name="onRemoved">移除的通知方法。</param>
        </member>
        <member name="T:Fireasy.Common.Caching.NeverExpired">
            <summary>
            表示缓存项永不过期。无法继承此类。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Caching.NeverExpired.Instance">
            <summary>
            获取 <see cref="T:Fireasy.Common.Caching.NeverExpired"/> 的静态实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.NeverExpired.HasExpired">
            <summary>
            检查缓存项是否达到过期时间。
            </summary>
            <returns>始终为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.NeverExpired.GetExpirationTime">
            <summary>
            获取到期时间。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Caching.OnceTime">
            <summary>
            表示缓存项的有效期只有一次，首次访问后将过期。无法继承此类。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Caching.OnceTime.times">
            <summary>
            记录访问次数的变量。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.OnceTime.HasExpired">
            <summary>
            检查缓存项是否达到过期时间。
            </summary>
            <returns>过期为 true，有效为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.OnceTime.GetExpirationTime">
            <summary>
            获取到期时间。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Caching.RelativeTime">
            <summary>
            使用一个相对时间作为缓存的过期检测策略，缓存项生命周期是自放入管理器之时起到指定的时间间隔为止，但是每一次访问缓存项，其过期时间将后延。无法继承此类。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Caching.RelativeTime.lastAccessTime">
            <summary>
            最后一次访问的时间。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.RelativeTime.#ctor(System.TimeSpan)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Caching.RelativeTime"/> 类的新实例。
            </summary>
            <param name="timeSpan">一个时间间隔。</param>
        </member>
        <member name="P:Fireasy.Common.Caching.RelativeTime.Expiration">
            <summary>
            获取时间间隔。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Caching.RelativeTime.HasExpired">
            <summary>
            检查缓存项是否达到过期时间。
            </summary>
            <returns>过期为 true，有效为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Caching.RelativeTime.GetExpirationTime">
            <summary>
            获取到期时间。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.ClientNotificationException">
            <summary>
            用于客户端通知的异常。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ClientNotificationException.#ctor(System.String)">
            <summary>
            使用通知信息初始化 <see cref="T:Fireasy.Common.ClientNotificationException"/> 类的新实例。
            </summary>
            <param name="message">通知信息。</param>
        </member>
        <member name="T:Fireasy.Common.Compiler.CodeCompiler">
            <summary>
            代码编译器，提供对动态代码的编译。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Compiler.CodeCompiler"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Compiler.CodeCompiler.CodeProvider">
            <summary>
            获取或设置代码编译的提供者，默认为 <see cref="T:Microsoft.CSharp.CSharpCodeProvider"/>。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Compiler.CodeCompiler.OutputAssembly">
            <summary>
            获取或设置输出的程序集。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Compiler.CodeCompiler.CompilerOptions">
            <summary>
            获取或设置编译选项。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Compiler.CodeCompiler.Assemblies">
            <summary>
            获取附加的程序集。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileDelegate``1(System.CodeDom.CodeCompileUnit,System.String)">
            <summary>
            编译代码并返回指定方法的委托。如果未指定方法名称，则返回类的第一个方法。
            </summary>
            <typeparam name="TDelegate">委托类型。</typeparam>
            <param name="unit">代码模型容器。</param>
            <param name="methodName">方法的名称。</param>
            <returns>代码中对应方法的委托。</returns>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileAssembly(System.CodeDom.CodeCompileUnit)">
            <summary>
            使用一组源程序文件来生成一个程序集。
            </summary>
            <param name="unit">代码模型容器。</param>
            <returns>由代码编译成的程序集。</returns>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileType(System.CodeDom.CodeCompileUnit,System.String)">
            <summary>
            使用 <see cref="T:System.CodeDom.CodeCompileUnit"/> 来生成一个新类型。
            </summary>
            <param name="unit">代码模型容器。</param>
            <param name="typeName">类的名称。</param>
            <returns>由代码编译成的动态类型。</returns>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileDelegate``1(System.String,System.String)">
            <summary>
            编译代码并返回指定方法的委托。如果未指定方法名称，则返回类的第一个方法。
            </summary>
            <typeparam name="TDelegate">委托类型。</typeparam>
            <param name="source">程序源代码，代码中只允许包含一个类。</param>
            <param name="methodName">方法的名称。</param>
            <returns>代码中对应方法的委托。</returns>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileAssembly(System.String)">
            <summary>
            编译代码生成一个程序集。
            </summary>
            <param name="source">程序源代码。</param>
            <returns>由代码编译成的程序集。</returns>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileType(System.String,System.String)">
            <summary>
            编译代码生成一个新类型。
            </summary>
            <param name="source">程序源代码。</param>
            <param name="typeName">类的名称。</param>
            <returns>由代码编译成的动态类型。</returns>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileDelegate``1(System.String[],System.String)">
            <summary>
            编译代码并返回指定方法的委托。如果未指定方法名称，则返回类的第一个方法。
            </summary>
            <typeparam name="TDelegate">委托类型。</typeparam>
            <param name="fileNames">外部的一组源程序文件。</param>
            <param name="methodName">方法的名称。</param>
            <returns>代码中对应方法的委托。</returns>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileAssembly(System.String[])">
            <summary>
            使用一组源程序文件来生成一个程序集。
            </summary>
            <param name="fileNames">外部的一组源程序文件。</param>
            <returns>由代码编译成的程序集。</returns>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompiler.CompileType(System.String[],System.String)">
            <summary>
            使用一组源程序文件来生成一个新类型。
            </summary>
            <param name="fileNames">外部的一组源程序文件。</param>
            <param name="typeName">类的名称。</param>
            <returns>由代码编译成的动态类型。</returns>
        </member>
        <member name="T:Fireasy.Common.Compiler.CodeCompilerException">
            <summary>
            动态编译代码期间发生的异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Compiler.CodeCompilerException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Compiler.CodeCompilerException"/> 类的新实例。
            </summary>
            <param name="message">编译错误信息。</param>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.DynamicObjectTypeDescriptionProvider">
            <summary>
            为动态类型类型提供补充元数据。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.DynamicObjectTypeDescriptionProvider.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.ComponentModel.DynamicObjectTypeDescriptionProvider"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.DynamicObjectTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            获取指定类型和对象的自定义类型说明符。
            </summary>
            <param name="objectType">对象的类型。</param>
            <param name="instance">该类型的实例。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.DynamicTypeDescriptor">
            <summary>
            为 <see cref="T:System.Dynamic.ExpandoObject"/> 类型提供信息补充。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.DynamicTypeDescriptor.#ctor(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.ComponentModel.DynamicTypeDescriptor"/> 类的新实例。
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.ILazyManager">
            <summary>
            提供对象延迟加载的管理。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.ILazyManager.IsValueCreated(System.String)">
            <summary>
            判断指定的属性的值是否已创建。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.IPager">
            <summary>
            表示提供分页。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IPager.PageSize">
            <summary>
            获取或设置每页的记录数。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IPager.CurrentPageIndex">
            <summary>
            获取或设置当前页码，该值从0开始。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IPager.PageCount">
            <summary>
            返回或设置总页数。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IPager.RecordCount">
            <summary>
            获取或设置记录数。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.ITreeNode">
            <summary>
            表示树节点。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.ITreeNode.Id">
            <summary>
            获取表示节点的唯一编码。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.ITreeNode.HasChildren">
            <summary>
            获取或设置是否有子节点。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.ITreeNode.IsLoaded">
            <summary>
            获取或设置是否加载了子节点列表。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.ITreeNode.Children">
            <summary>
            获取或设置子节点列表。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.ITreeNode`1">
            <summary>
            表示树节点。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.ITreeNode`1.Children">
            <summary>
            获取或设置子节点列表。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.ITreeNode`2">
            <summary>
            表示树节点，Id 的类型可以指定。
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TID"></typeparam>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.ITreeNode`2.Id">
            <summary>
            获取表示节点的唯一编码。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.IPaginalResult`1">
            <summary>
            提供一个带有分页信息的泛型返回结构
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IPaginalResult`1.Pages">
            <summary>
            获取或设置页码总数。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IPaginalResult`1.Total">
            <summary>
            获取或设置记录总数。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IPaginalResult`1.IsEnd">
            <summary>
            获取或设置是否为最后一页。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IPaginalResult`1.Data">
            <summary>
            获取或设置客户端接收的数据列表。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.PaginalResult`1">
            <summary>
            提供一个带有分页信息的泛型返回结构。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.PaginalResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},Fireasy.Common.ComponentModel.IPager)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.ComponentModel.PaginalResult`1"/> 类的新实例。
            </summary>
            <param name="data"></param>
            <param name="pager"></param>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.PaginalResult`1.Pages">
            <summary>
            获取或设置页码总数。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.PaginalResult`1.Total">
            <summary>
            获取或设置记录总数。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.PaginalResult`1.IsEnd">
            <summary>
            获取或设置是否为最后一页。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.IResult">
            <summary>
            提供一个通用的返回结构。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IResult.Succeed">
            <summary>
            获取或设置是否调用成功。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IResult.Message">
            <summary>
            获取或设置调用的信息。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.IResult.Data">
            <summary>
            获取或设置客户端接收的数据。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.Result">
            <summary>
            提供一个通用的返回结构。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.Result.Succeed">
            <summary>
            获取或设置是否调用成功。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.Result.Message">
            <summary>
            获取或设置调用的信息。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.Result.Data">
            <summary>
            获取或设置客户端接收的数据。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Info(System.String,System.Object)">
            <summary>
            返回一个提醒的响应信息。
            </summary>
            <param name="message">提供给客户端显示的信息。</param>
            <param name="data">返回给客户端的数据。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Info``1(System.String,``0)">
            <summary>
            返回一个提醒的响应信息。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="message">提供给客户端显示的信息。</param>
            <param name="data">返回给客户端的数据。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Success(System.String,System.Object)">
            <summary>
            返回一个成功的响应信息。
            </summary>
            <param name="message">提供给客户端显示的调用成功的信息。</param>
            <param name="data">返回给客户端的数据。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Success``1(System.String,``0)">
            <summary>
            返回一个成功的响应信息。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="message">提供给客户端显示的调用成功的信息。</param>
            <param name="data">返回给客户端的数据。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Success``1(System.String,System.Object)">
            <summary>
            返回一个成功的响应信息。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="message">提供给客户端显示的调用成功的信息。</param>
            <param name="data">返回给客户端的数据。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Fail(System.String)">
            <summary>
            返回一个失败的响应信息。
            </summary>
            <param name="message">提供给客户端显示的调用失败的信息。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Fail``1(System.String)">
            <summary>
            返回一个失败的响应信息。
            </summary>
            <param name="message">提供给客户端显示的调用失败的信息。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Fail(System.Exception)">
            <summary>
            返回一个失败的响应信息。
            </summary>
            <param name="exception">引发调用失败的异常信息。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.Result.Fail``1(System.Exception)">
            <summary>
            返回一个失败的响应信息。
            </summary>
            <param name="exception">引发调用失败的异常信息。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.Result`1">
            <summary>
            提供一个通用的泛型返回结构。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.Result`1.Succeed">
            <summary>
            获取或设置是否调用成功。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.Result`1.Message">
            <summary>
            获取或设置调用的信息。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.Result`1.Data">
            <summary>
            获取或设置客户端接收的数据。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.SafetyDictionary`2">
            <summary>
            对 <see cref="!:ConcurrentDictionary"/> 线程安全字典的扩展，使之真正意义上的安全。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.#ctor">
            <summary>
            实例化 <see cref="!:SafetyDictionary"/> 类的新实例。 
            </summary>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            实例化 <see cref="!:SafetyDictionary"/> 类的新实例。 
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.GetOrAdd(`0,System.Func{`1})">
            <summary>
            尝试通过 key 获取值，如果 key 不存在则通过函数生成新值并添加到字典中。
            </summary>
            <param name="key"></param>
            <param name="valueFactory">新值的函数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.TryAdd(`0,`1)">
            <summary>
            尝试添加新值。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.TryAdd(`0,System.Func{`1})">
            <summary>
            尝试添加新值。
            </summary>
            <param name="key"></param>
            <param name="valueFactory">新值的函数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取指定 key 的值。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.AddOrUpdate(`0,System.Func{`1})">
            <summary>
            添加或修改指定 key 的值。
            </summary>
            <param name="key"></param>
            <param name="addOrUpdateFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.TryRemove(`0,`1@)">
            <summary>
            尝试从字典里移除指定 key 的值。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.ContainsKey(`0)">
            <summary>
            判断字典里是否存在指定的 key。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.SafetyDictionary`2.Clear">
            <summary>
            清空字典。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.SafetyDictionary`2.LazyValues">
            <summary>
            获取内部的字典。
            </summary>
        </member>
        <member name="P:Fireasy.Common.ComponentModel.SafetyDictionary`2.Count">
            <summary>
            返回值的个数。
            </summary>
        </member>
        <member name="T:Fireasy.Common.ComponentModel.SafetyDictionary`2.SafetyDictionaryEnumerator`2">
            <summary>
            枚举器。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.TypeDescriptorUtility.AddDynamicProvider``1">
            <summary>
            添加一个动态类型的自定义类型说明。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Common.ComponentModel.TypeDescriptorUtility.AddDefaultDynamicProvider">
            <summary>
            添加默认的动态类型的自定义类型说明。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Composition.AssemblyDirectoryCatalog">
            <summary>
            使用程序集目录作为对象的可组合部件目录。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.AssemblyDirectoryCatalog.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Composition.AssemblyDirectoryCatalog"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.AssemblyDirectoryCatalog.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Composition.AssemblyDirectoryCatalog"/> 类的新实例。
            </summary>
            <param name="searchPattern">搜索所依据的模式。</param>
        </member>
        <member name="M:Fireasy.Common.Composition.AssemblyDirectoryCatalog.GetWorkDirectory">
            <summary>
            获取工作目录，即程序集所在的目录。
            </summary>
            <returns>工作目录。</returns>
        </member>
        <member name="T:Fireasy.Common.Composition.ConfigurationCatalog">
            <summary>
            基于配置的对象组合部件目录。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Composition.ConfigurationCatalog.Parts">
            <summary>
            获取目录中包含的部件定义。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.ConfigurationCatalog.ResolveCatalog(Fireasy.Common.Composition.Configuration.ImportConfigurationSetting)">
            <summary>
            从 <see cref="T:Fireasy.Common.Composition.Configuration.ImportConfigurationSetting"/> 对象中解析出 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> 对象。
            </summary>
            <param name="setting">用于配置目录的配置对象。</param>
            <returns>从 <paramref name="setting"/> 解析出的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Composition.ConfigurationCatalog.CreateDefinitions">
            <summary>
            通过配置节创建 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> 序列。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Composition.ConfigurationCatalog`1">
            <summary>
            基于配置的对象组合部件目录。
            </summary>
            <typeparam name="T">要导入的协定类型。</typeparam>
        </member>
        <member name="M:Fireasy.Common.Composition.ConfigurationCatalog`1.CreateDefinitions">
            <summary>
            通过配置节创建 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> 序列。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Composition.Configuration.ImportConfigurationSection">
            <summary>
            表示 MEF 的导入配置节。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.Configuration.ImportConfigurationSection.Initialize(System.Xml.XmlNode)">
            <summary>
            使用配置节点对当前配置进行初始化。
            </summary>
            <param name="section">对应的配置节点。</param>
        </member>
        <member name="T:Fireasy.Common.Composition.Configuration.ImportConfigurationSectionHandler">
            <summary>
            类 <see cref="T:Fireasy.Common.Composition.Configuration.ImportConfigurationSection"/> 对应配置节的解析处理程序。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Composition.Configuration.ImportConfigurationSetting">
            <summary>
            MEF 导入的配置。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Composition.Configuration.ImportConfigurationSetting.Name">
            <summary>
            获取或设置配置名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Composition.Configuration.ImportConfigurationSetting.ContractType">
            <summary>
            获取或设置协定接口类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Composition.Configuration.ImportConfigurationSetting.ImportType">
            <summary>
            获取或设置导入的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Composition.Configuration.ImportConfigurationSetting.Assembly">
            <summary>
            获取或设置程序集名称。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Composition.ConventionalCatalog">
            <summary>
            提供一个注册协定和实现的组合目录。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.ConventionalCatalog.Register``2(System.Boolean)">
            <summary>
            注册一个指定协定类型的实现类型。
            </summary>
            <typeparam name="TContract">协定类型。</typeparam>
            <typeparam name="TImplementation">实现类型。</typeparam>
            <param name="replace">是否替换已有的部件定义。</param>
            <returns>当前的 <see cref="T:Fireasy.Common.Composition.ConventionalCatalog"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Composition.ConventionalCatalog.Register(System.Type,System.Type,System.Boolean)">
            <summary>
            注册一个指定协定类型的实现类型。
            </summary>
            <param name="contractType">协定类型。</param>
            <param name="implType">实现类型。</param>
            <param name="replace">是否替换已有的部件定义。</param>
            <returns>当前的 <see cref="T:Fireasy.Common.Composition.ConventionalCatalog"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Composition.ConventionalCatalog.Register``1(System.Func{``0},System.Boolean)">
            <summary>
            注册一个指定协定类型的实现实例。
            </summary>
            <typeparam name="TContract">协定类型。</typeparam>
            <param name="creator">一个创建实例对象的函数。</param>
            <param name="replace">是否替换已有的部件定义。</param>
            <returns>当前的 <see cref="T:Fireasy.Common.Composition.ConventionalCatalog"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Composition.ConventionalCatalog.Register(System.Type,System.Object,System.Boolean)">
            <summary>
            注册一个指定协定类型的实现实例。
            </summary>
            <param name="contractType">协定类型。</param>
            <param name="instance">实现的对象。</param>
            <param name="replace">是否替换已有的部件定义。</param>
            <returns>当前的 <see cref="T:Fireasy.Common.Composition.ConventionalCatalog"/> 对象。</returns>
        </member>
        <member name="P:Fireasy.Common.Composition.ConventionalCatalog.Parts">
            <summary>
            获取目录中包含的部件定义。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Composition.DefaultImportAttribute">
            <summary>
            定义服务接口默认导入的类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.DefaultImportAttribute.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Composition.DefaultImportAttribute"/> 类的新实例。
            </summary>
            <param name="importType">导入类的类型。</param>
        </member>
        <member name="M:Fireasy.Common.Composition.DefaultImportAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Composition.DefaultImportAttribute"/> 类的新实例。
            </summary>
            <param name="typeName">类型的名称。</param>
        </member>
        <member name="P:Fireasy.Common.Composition.DefaultImportAttribute.ImportType">
            <summary>
            获取或设置导入的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Composition.FilterCompositionContainer">
            <summary>
            如果目录中的多个同一协定的导出，则使用一个函数过滤出部分的导出。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.FilterCompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export},System.ComponentModel.Composition.Primitives.Export},System.ComponentModel.Composition.Hosting.ExportProvider[])">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Composition.FilterCompositionContainer"/> 类的新实例。
            </summary>
            <param name="catalog">对象的组合目录。</param>
            <param name="filter">用于对导出进行过滤的函数。</param>
            <param name="providers">附加一组 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Common.Composition.FilterCompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
            <summary>
            获取与指定约束相匹配的所有导出。
            </summary>
            <param name="definition">定义要获取 <see cref="T:System.ComponentModel.Composition.Primitives.Export"/> 对象的条件对象。</param>
            <param name="atomicComposition">要使用的组合事务，或为 null 以禁用事务性组合。</param>
            <returns>与 <paramref name="definition"/> 相匹配的 <see cref="T:System.ComponentModel.Composition.Primitives.Export"/> 对象的集合。</returns>
        </member>
        <member name="T:Fireasy.Common.Composition.Imports">
            <summary>
            基于 MEF 服务实例的导入管理器。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Composition.Imports.Container">
            <summary>
            获取或设置 MEF 容器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.Imports.GetService``1(System.String)">
            <summary>
            获取指定类型的服务组件。
            </summary>
            <typeparam name="T">服务类的类型。</typeparam>
            <param name="contractName">协定名称。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Composition.Imports.GetServices``1(System.String)">
            <summary>
            获取指定类型的服务组件序列。
            </summary>
            <typeparam name="T">服务类的类型。</typeparam>
            <param name="contractName">协定名称。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Composition.SingleCompositionContainer">
            <summary>
            如果目录中的多个同一协定的导出，则该容器只获取第一个导出。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Composition.SingleCompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Composition.SingleCompositionContainer"/> 类的新实例。
            </summary>
            <param name="catalog">对象的组合目录。</param>
            <param name="providers">附加一组 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider"/> 对象。</param>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationSection">
            <summary>
            一个抽象类，表示配置节的信息。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationSection.Initialize(System.Xml.XmlNode)">
            <summary>
            使用配置节点对当前配置进行初始化。
            </summary>
            <param name="section">对应的配置节点。</param>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationSection`1">
            <summary>
            一个抽象类，表示配置节的信息。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationSection`1.InitializeNode(System.Xml.XmlNode,System.String,System.String,System.Func{System.Xml.XmlNode,Fireasy.Common.Configuration.IConfigurationSettingItem})">
            <summary>
            解析配置节下的所有子节点。
            </summary>
            <param name="section">当前的配置节点。</param>
            <param name="nodeName">要枚举的子节点的名称。</param>
            <param name="typeNodeName">如果配置类中存在 <see cref="T:System.Type"/> 的属性，则指定该属性的名称。</param>
            <param name="func">用于初始化设置项的函数。</param>
        </member>
        <member name="P:Fireasy.Common.Configuration.ConfigurationSection`1.Settings">
            <summary>
            返回当前节的配置项集合。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationSection`1.GetSettingIgnore(System.Xml.XmlNode,System.Type,System.Func{System.Xml.XmlNode,`0})">
            <summary>
            根据是否忽略配置节处理接口来进行构造。
            </summary>
            <param name="node"></param>
            <param name="type"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Configuration.DefaultInstaneConfigurationSection`1">
            <summary>
            具有默认实例配置的配置节。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fireasy.Common.Configuration.DefaultInstaneConfigurationSection`1.DefaultInstanceName">
            <summary>
            获取或设置默认配置实例名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Configuration.DefaultInstaneConfigurationSection`1.Default">
            <summary>
            获取默认的配置项。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Configuration.ManagableConfigurationSection`1">
            <summary>
            可托管的基于实例的配置节。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fireasy.Common.Configuration.ManagableConfigurationSection`1.Factory">
            <summary>
            获取实例创建工厂。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationSectionHandler`1">
            <summary>
            一个抽象类，提供对配置节的处理。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationSectionHandler`1.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建配置节处理程序。
            </summary>
            <param name="parent">父对象。</param>
            <param name="configContext">配置上下文对象。</param>
            <param name="section">节 XML 节点。</param>
            <returns>创建一个节处理程序的 <see cref="T:Fireasy.Common.Configuration.IConfigurationSection"/> 对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationSectionStorageAttribute">
            <summary>
            标识配置所存储的节点路径。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationSectionStorageAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Configuration.ConfigurationSectionStorageAttribute"/> 类的新实例。
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Fireasy.Common.Configuration.ConfigurationSectionStorageAttribute.Name">
            <summary>
            获取或设置存储节点的名称。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationSettingAttribute">
            <summary>
            标识应用程序采用何种配置。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationSettingAttribute.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Configuration.ConfigurationSettingAttribute"/> 类的新实例。
            </summary>
            <param name="type">配置项的类型。</param>
        </member>
        <member name="P:Fireasy.Common.Configuration.ConfigurationSettingAttribute.Type">
            <summary>
            获取或设置配置项的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationSettingIgnoreAttribute">
            <summary>
            表示忽略配置节解析的处理程序。无法继承此类。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationSettingParseTypeAttribute">
            <summary>
            表示配置节所使用的解析程序类型。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationSettingParseTypeAttribute.#ctor(System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Configuration.ConfigurationSettingParseTypeAttribute"/> 类的新实例。
            </summary>
            <param name="type">解析类的类型。</param>
        </member>
        <member name="P:Fireasy.Common.Configuration.ConfigurationSettingParseTypeAttribute.HandlerType">
            <summary>
            获取或设置解析类的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationSettings`1">
            <summary>
            表示配置项的集合。无法继承此类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationSettings`1.AddInvalidSetting(System.String,System.Exception)">
            <summary>
            添加一个无效的配置项，并保存其异常信息。
            </summary>
            <param name="key">配置项的键名。</param>
            <param name="exception">异常信息。</param>
        </member>
        <member name="P:Fireasy.Common.Configuration.ConfigurationSettings`1.Item(System.String)">
            <summary>
            索引器，通过键名访问集合中的配置项。
            </summary>
            <param name="key">键名。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Configuration.ConfigurationUnity">
            <summary>
            应用程序配置的管理单元。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationUnity.GetSection``1">
            <summary>
            获取配置节实例。
            </summary>
            <typeparam name="T">配置节的类型。</typeparam>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationUnity.AttachSetting(Fireasy.Common.Configuration.IConfigurationSettingHostService,Fireasy.Common.Configuration.IConfigurationSettingItem)">
            <summary>
            为具有 <see cref="T:Fireasy.Common.Configuration.IConfigurationSettingHostService"/> 接口的对象附加相应的配置对象。
            </summary>
            <param name="hostService"></param>
            <param name="setting"></param>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationUnity.GetCustomConfiguration(System.String,System.String)">
            <summary>
            从自定义配置文件中读取相应的配置。
            </summary>
            <param name="sectionName"></param>
            <param name="configFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationUnity.CreateInstance``2(Fireasy.Common.Configuration.IConfigurationSettingItem,System.Func{``0,System.Type})">
            <summary>
            根据提供的配置创建实例对象。
            </summary>
            <typeparam name="TSetting"></typeparam>
            <typeparam name="TInstance"></typeparam>
            <param name="setting"></param>
            <param name="typeFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Configuration.ConfigurationUnity.Cached``1(System.String,System.Func{System.Object})">
            <summary>
            缓存配置项创建的实例。
            </summary>
            <typeparam name="TSetting"></typeparam>
            <param name="cacheKey"></param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Configuration.IConfigurationSection">
            <summary>
            提供配置节的方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.IConfigurationSection.Initialize(System.Xml.XmlNode)">
            <summary>
            使用配置节点对当前配置进行初始化。
            </summary>
            <param name="section">对应的配置节点。</param>
        </member>
        <member name="T:Fireasy.Common.Configuration.IConfigurationSettingHostService">
            <summary>
            为应用程序提供配置信息的宿主支持。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.IConfigurationSettingHostService.Attach(Fireasy.Common.Configuration.IConfigurationSettingItem)">
            <summary>
            将配置信息附加给应用程序。
            </summary>
            <param name="setting">配置项。</param>
        </member>
        <member name="M:Fireasy.Common.Configuration.IConfigurationSettingHostService.GetSetting">
            <summary>
            从应用程序中获取本应的配置信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Configuration.IConfigurationSettingItem">
            <summary>
            配置项。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Configuration.INamedIConfigurationSettingItem">
            <summary>
            表示命名的配置项。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Configuration.INamedIConfigurationSettingItem.Name">
            <summary>
            获取或设置名称。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Configuration.IConfigurationSettingParseHandler">
            <summary>
            提供对配置项的解析方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.IConfigurationSettingParseHandler.Parse(System.Xml.XmlNode)">
            <summary>
            将节点信息解析为配置项。
            </summary>
            <param name="section">配置节点。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Configuration.IManagedFactory">
            <summary>
            一个外部托管工厂接口。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Configuration.IManagedFactory.CreateInstance(System.String)">
            <summary>
            创建实例。
            </summary>
            <param name="name">配置名称。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Configuration.InvalidInstanceWrap`1">
            <summary>
            无效配置项的包装体。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fireasy.Common.Configuration.InvalidInstanceWrap`1.Instance">
            <summary>
            获取或设置实例。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Drawing.CompressFormat">
            <summary>
            压缩的格式。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Drawing.ImageDigitization">
            <summary>
            图像数字化处理器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Invert(System.Drawing.Image)">
            <summary>
            将图像进行反相处理。
            </summary>
            <param name="image">源图像。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Gray(System.Drawing.Image)">
            <summary>
            将图像进行灰度处理。
            </summary>
            <param name="image">源图像。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Brightness(System.Drawing.Image,System.Byte)">
            <summary>
            调整图像的亮度。
            </summary>
            <param name="image">源图像。</param>
            <param name="brightness">亮度。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Noise(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            对图像进行加噪处理。
            </summary>
            <param name="image">源图像。</param>
            <param name="level">噪点的强度。</param>
            <param name="step">噪点的间隔。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Mosaic(System.Drawing.Image,System.Int32)">
            <summary>
            对图像进行马赛克处理。
            </summary>
            <param name="image">源图像。</param>
            <param name="pixelSize">方块的大小。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Binaryzation(System.Drawing.Image)">
            <summary>
            对图像进行二值化处理。
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Sharpen(System.Drawing.Image,System.Double)">
            <summary>
            对图像进行锐化处理。
            </summary>
            <param name="image"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Contrast(System.Drawing.Image,System.Double)">
            <summary>
            调整图像的对比度。
            </summary>
            <param name="image"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Relief(System.Drawing.Image)">
            <summary>
            对图像进行浮雕处理。
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.GetThreshold(System.Byte*,System.Int32)">
            <summary>
            图像二值化，获取阀值。
            </summary>
            <param name="inPixels"></param>
            <param name="length">height * Stride</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Drawing.ImageDigitization.Clone(System.Drawing.Bitmap)">
            <summary>
            克隆一个副本。
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Drawing.ThumbnailStyle">
            <summary>
            缩略图样式。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Drawing.ThumbnailStyle.Stretch">
            <summary>
            拉伸。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Drawing.ThumbnailStyle.Zoom">
            <summary>
            等比例缩放。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Drawing.ThumbnailStyle.Center">
            <summary>
            中间一块。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Dynamic.DynamicDelegate">
            <summary>
            用于为 <see cref="T:Fireasy.Common.Dynamic.DynamicExpandoObject"/> 添加类型方法的成员。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicDelegate.Define(Fireasy.Common.Dynamic.DynamicInvokeDelegate)">
            <summary>
            定义一个动态调用的委托。
            </summary>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Dynamic.DynamicInvokeDelegate">
            <summary>
            一个动态调用的委托。
            </summary>
            <param name="sender">被调用的当前对象。</param>
            <param name="args">调用的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Dynamic.DynamicExpandoObject">
            <summary>
            实现 <see cref="T:System.Dynamic.ExpandoObject"/> 类似功能的动态类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicExpandoObject.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Dynamic.DynamicExpandoObject"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicExpandoObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            使用一组 <see cref="!:IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;"/> 初始化 <see cref="T:Fireasy.Common.Dynamic.DynamicExpandoObject"/> 类的新实例。
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicExpandoObject.GetDynamicMemberNames">
            <summary>
            返回成员名称的枚举。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicExpandoObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            尝试获取成员的值。
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicExpandoObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            尝试设置成员的值。
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicExpandoObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            尝试调用成员的操作。
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicExpandoObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicExpandoObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicManager.TryGetMember(System.Dynamic.IDynamicMetaObjectProvider,System.String,System.Object@)">
            <summary>
            尝试获取动态对象中指定名称的属性值。
            </summary>
            <param name="dynamicProvider">一个动态对象。</param>
            <param name="name">属性的名称。</param>
            <param name="value">返回值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Dynamic.DynamicManager.TrySetMember(System.Dynamic.IDynamicMetaObjectProvider,System.String,System.Object)">
            <summary>
            尝试设置动态对象中指定名称的属性值。
            </summary>
            <param name="dynamicProvider">一个动态对象。</param>
            <param name="name">属性的名称。</param>
            <param name="value">设置值。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Dynamic.NoThrowGetBinderMember">
            <summary>
            在动态获取成员操作时忽略异常。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Dynamic.NoThrowSetBinderMember">
            <summary>
            在动态设置成员操作时忽略异常。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Emit.BuildContext">
            <summary>
            Emit 的上下文对象。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.BuildContext.AssemblyBuilder">
            <summary>
            获取 <see cref="T:Fireasy.Common.Emit.DynamicAssemblyBuilder"/>。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.BuildContext.TypeBuilder">
            <summary>
            获取 <see cref="T:Fireasy.Common.Emit.DynamicTypeBuilder"/>。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.BuildContext.PropertyBuilder">
            <summary>
            获取 <see cref="T:Fireasy.Common.Emit.DynamicPropertyBuilder"/>。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.BuildContext.MethodBuilder">
            <summary>
            获取 <see cref="T:Fireasy.Common.Emit.DynamicMethodBuilder"/>。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.BuildContext.EnumBuilder">
            <summary>
            获取 <see cref="T:Fireasy.Common.Emit.DynamicEnumBuilder"/>。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.BuildContext.ConstructorBuilder">
            <summary>
            获取 <see cref="T:Fireasy.Common.Emit.DynamicConstructorBuilder"/>。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.BuildContext.BaseMethod">
            <summary>
            获取重载父类的方法。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.BuildContext.Emitter">
            <summary>
            获取 <see cref="T:Fireasy.Common.Emit.EmitHelper"/>。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Emit.CallingDecoration">
            <summary>
            访问性修饰符。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.CallingDecoration.Standard">
            <summary>
            基本的。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.CallingDecoration.Abstract">
            <summary>
            抽象的。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.CallingDecoration.Sealed">
            <summary>
            密封的。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.CallingDecoration.Virtual">
            <summary>
            多态的。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.CallingDecoration.Static">
            <summary>
            静态的。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.CallingDecoration.ExplicitImpl">
            <summary>
            显式实现的。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicAssemblyBuilder">
            <summary>
            一个动态程序集的构造器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicAssemblyBuilder.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Emit.DynamicAssemblyBuilder"/> 类的新实例。
            </summary>
            <param name="assemblyName">程序集的名称。</param>
            <param name="output">程序集输出的文件名。</param>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicAssemblyBuilder.AssemblyBuilder">
            <summary>
            获取 <see cref="P:Fireasy.Common.Emit.DynamicAssemblyBuilder.AssemblyBuilder"/> 对象。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicAssemblyBuilder.ModuleBuilder">
            <summary>
            获取 <see cref="P:Fireasy.Common.Emit.DynamicAssemblyBuilder.AssemblyBuilder"/> 对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicAssemblyBuilder.InitAssemblyBuilder">
            <summary>
            获取 <see cref="P:Fireasy.Common.Emit.DynamicAssemblyBuilder.AssemblyBuilder"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicAssemblyBuilder.InitModuleBuilder">
            <summary>
            获取 <see cref="P:Fireasy.Common.Emit.DynamicAssemblyBuilder.ModuleBuilder"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicAssemblyBuilder.AssemblyName">
            <summary>
            获取或设置程序集的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicAssemblyBuilder.OutputAssembly">
            <summary>
            获取或设置输出的文件名。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicAssemblyBuilder.DefineType(System.String,Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration,System.Type)">
            <summary>
            使用当前的构造器定义一个动态类型。
            </summary>
            <param name="typeName">类型的名称。</param>
            <param name="visual">指定类的可见性。</param>
            <param name="calling">指定类的调用属性。</param>
            <param name="baseType">类型的父类。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicAssemblyBuilder.DefineInterface(System.String,Fireasy.Common.Emit.VisualDecoration)">
            <summary>
            使用当前的构造器定义一个动态接口。
            </summary>
            <param name="typeName">类型的名称。</param>
            <param name="visual">指定类的可见性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicAssemblyBuilder.DefineEnum(System.String,System.Type,Fireasy.Common.Emit.VisualDecoration)">
            <summary>
            使用当前构造器定义一个枚举。
            </summary>
            <param name="enumName">枚举的名称。</param>
            <param name="underlyingType">枚举的类型。</param>
            <param name="visual">指定枚举的可见性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicAssemblyBuilder.Save">
            <summary>
            将所有的动态类型保存到程序集。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicAssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            设置一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象。
            </summary>
            <param name="customBuilder"></param>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicBuilder">
            <summary>
            一个抽象类，动态构造器。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicBuilder.Context">
            <summary>
            获取或设置构造器的上下文对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicBuilder.SetCustomAttribute``1(System.Object[])">
            <summary>
            使用自定义特性生成器设置此程序集的自定义特性。
            </summary>
            <typeparam name="T">自定义属性的类型。</typeparam>
            <param name="constructorArgs">自定义属性的构造函数的参数。</param>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicBuilder.SetCustomAttribute(System.Linq.Expressions.Expression)">
            <summary>
            使用自定义特性生成器设置此程序集的自定义特性。
            </summary>
            <param name="expression">一个 <see cref="T:System.Attribute"/> 的构造表达式。</param>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            设置一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象到当前实例中。
            </summary>
            <param name="customBuilder">一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicBuilder.CustomAttributeConstructorVisitor.CheckArgumentExpression(System.Linq.Expressions.Expression)">
            <summary>
            检查表达式能否被正确解析，只有构造里的参数以及属性初始化表达式可以使用。
            </summary>
            <param name="expression">要检查的表达式。</param>
            <returns>能够被解析，则为 true。</returns>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicConstructorBuilder">
            <summary>
            用于创建一个动态的构造器。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicConstructorBuilder.ParameterTypes">
            <summary>
            获取参数类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicConstructorBuilder.AppendCode(System.Action{Fireasy.Common.Emit.EmitHelper})">
            <summary>
            追加新的 MSIL 代码到构造器中。
            </summary>
            <param name="ilCoding"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicConstructorBuilder.OverwriteCode(System.Action{Fireasy.Common.Emit.EmitHelper})">
            <summary>
            使用新的 MSIL 代码覆盖构造器中的现有代码。
            </summary>
            <param name="ilCoding"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicConstructorBuilder.DefineParameter(System.String)">
            <summary>
            定义一个参数。
            </summary>
            <param name="name">参数的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicConstructorBuilder.DefineParameter(System.String,System.Boolean,System.Object)">
            <summary>
            定义一个参数。
            </summary>
            <param name="name">参数的名称。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicConstructorBuilder.ConstructorBuilder">
            <summary>
            获取 <see cref="P:Fireasy.Common.Emit.DynamicConstructorBuilder.ConstructorBuilder"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            设置一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象到当前实例关联的 <see cref="P:Fireasy.Common.Emit.DynamicConstructorBuilder.ConstructorBuilder"/> 对象。
            </summary>
            <param name="customBuilder">一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象。</param>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicEnumBuilder">
            <summary>
            用于创建一个动态的枚举。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicEnumBuilder.EnumName">
            <summary>
            获取枚举的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicEnumBuilder.UnderlyingType">
            <summary>
            获取枚举的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicEnumBuilder.EnumBuilder">
            <summary>
            获取 <see cref="P:Fireasy.Common.Emit.DynamicEnumBuilder.EnumBuilder"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicEnumBuilder.DefineLiteral(System.String,System.Object)">
            <summary>
            定义一个枚举值。
            </summary>
            <param name="literalName">标签的名称。</param>
            <param name="value">枚举值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicEnumBuilder.CreateType">
            <summary>
            创建动态的枚举类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicEnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            设置一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象到当前实例关联的 <see cref="P:Fireasy.Common.Emit.DynamicEnumBuilder.EnumBuilder"/> 对象。
            </summary>
            <param name="customBuilder">一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象。</param>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicFieldBuilder">
            <summary>
            用于创建一个字段。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicFieldBuilder.FieldName">
            <summary>
            获取字段的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicFieldBuilder.FieldType">
            <summary>
            获取字段的类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicFieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            设置一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象到当前实例关联的 <see cref="P:Fireasy.Common.Emit.DynamicFieldBuilder.FieldBuilder"/> 对象。
            </summary>
            <param name="customBuilder">一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象。</param>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicFieldBuilder.FieldBuilder">
            <summary>
            获取 <see cref="P:Fireasy.Common.Emit.DynamicFieldBuilder.FieldBuilder"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicInterfaceBuilder">
            <summary>
            用于创建一个动态的接口。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicInterfaceBuilder.BaseType">
            <summary>
            获取或设置动态类型所继承的类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicInterfaceBuilder.GetTypeAttributes">
            <summary>
            获取 <see cref="T:System.Reflection.TypeAttributes"/>。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicInterfaceBuilder.DefineField(System.String,System.Type,System.Object,Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration)">
            <summary>
            定义一个字段。
            </summary>
            <param name="fieldName">字段的名称。</param>
            <param name="fieldType">字段的类型。</param>
            <param name="defaultValue"></param>
            <param name="visual"></param>
            <param name="calling"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicMethodBuilder">
            <summary>
            用于创建一个动态的方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicMethodBuilder.DefineParameter(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            定义一个参数。
            </summary>
            <param name="name">参数的名称。</param>
            <param name="isOut">是否为 out 类型的参数。</param>
            <param name="hasDefaultValue">是否指定缺省值。</param>
            <param name="defaultValue">缺省的参数值。</param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicMethodBuilder.Name">
            <summary>
            获取方法的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicMethodBuilder.ReturnType">
            <summary>
            获取或设置方法的返回类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicMethodBuilder.ParameterTypes">
            <summary>
            获取或设置方法的参数类型数组。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicMethodBuilder.GenericArguments">
            <summary>
            获取或设置方法的泛型参数名称数组。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicMethodBuilder.MethodBuilder">
            <summary>
            获取当前的 <see cref="P:Fireasy.Common.Emit.DynamicMethodBuilder.MethodBuilder"/>。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicMethodBuilder.AppendCode(System.Action{Fireasy.Common.Emit.EmitHelper})">
            <summary>
            追加新的 MSIL 代码到构造器中。
            </summary>
            <param name="ilCoding"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicMethodBuilder.OverwriteCode(System.Action{Fireasy.Common.Emit.EmitHelper})">
            <summary>
            使用新的 MSIL 代码覆盖构造器中的现有代码。
            </summary>
            <param name="ilCoding"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicMethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            设置一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象到当前实例关联的 <see cref="P:Fireasy.Common.Emit.DynamicMethodBuilder.MethodBuilder"/> 对象。
            </summary>
            <param name="customBuilder">一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象。</param>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicPropertyBuilder">
            <summary>
            用于创建一个动态的属性。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicPropertyBuilder.Name">
            <summary>
            获取属性的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicPropertyBuilder.PropertyType">
            <summary>
            获取属性的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicPropertyBuilder.FieldBuilder">
            <summary>
            获取当前的 <see cref="T:Fireasy.Common.Emit.DynamicFieldBuilder"/>。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicPropertyBuilder.PropertyBuilder">
            <summary>
            获取当前的 <see cref="P:Fireasy.Common.Emit.DynamicPropertyBuilder.PropertyBuilder"/>。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicPropertyBuilder.DefineGetSetMethods(Fireasy.Common.Emit.DynamicFieldBuilder)">
            <summary>
            使用默认的过程定义属性的 Get 和 Set 方法体。
            </summary>
            <param name="field">指定一个属性相关的 <see cref="T:Fireasy.Common.Emit.DynamicFieldBuilder"/>。</param>
            <returns>当前的 <see cref="T:Fireasy.Common.Emit.DynamicTypeBuilder"/>。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicPropertyBuilder.DefineGetMethod(Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration,System.Action{Fireasy.Common.Emit.BuildContext})">
            <summary>
            定义属性的 Get 访问方法。
            </summary>
            <param name="visual">指定方法的可见性。</param>
            <param name="calling">指定方法的调用属性。</param>
            <param name="ilCoding">方法体的 IL 过程。</param>
            <returns>新的 <see cref="T:Fireasy.Common.Emit.DynamicMethodBuilder"/>。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicPropertyBuilder.DefineGetMethodByField(Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration,Fireasy.Common.Emit.DynamicFieldBuilder)">
            <summary>
            定义属性的 Get 访问方法。
            </summary>
            <param name="visual">指定方法的可见性。</param>
            <param name="calling">指定方法的调用属性。</param>
            <param name="fieldBuilder">指定一个属性相关的 <see cref="T:Fireasy.Common.Emit.DynamicFieldBuilder"/>。</param>
            <returns>新的 <see cref="T:Fireasy.Common.Emit.DynamicMethodBuilder"/>。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicPropertyBuilder.DefineSetMethod(Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration,System.Action{Fireasy.Common.Emit.BuildContext})">
            <summary>
            定义属性的 Set 访问方法。
            </summary>
            <param name="visual">指定方法的可见性。</param>
            <param name="calling">指定方法的调用属性。</param>
            <param name="ilCoding">方法体的 IL 过程。</param>
            <returns>新的 <see cref="T:Fireasy.Common.Emit.DynamicMethodBuilder"/>。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicPropertyBuilder.DefineSetMethodByField(Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration,Fireasy.Common.Emit.DynamicFieldBuilder)">
            <summary>
            定义属性的 Set 访问方法。
            </summary>
            <param name="visual">指定方法的可见性。</param>
            <param name="calling">指定方法的调用属性。</param>
            <param name="fieldBuilder">指定一个属性相关的 <see cref="T:Fireasy.Common.Emit.DynamicFieldBuilder"/>。</param>
            <returns>新的 <see cref="T:Fireasy.Common.Emit.DynamicMethodBuilder"/>。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicPropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            设置一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象到当前实例关联的 <see cref="P:Fireasy.Common.Emit.DynamicPropertyBuilder.PropertyBuilder"/> 对象。
            </summary>
            <param name="customBuilder">一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象。</param>
        </member>
        <member name="T:Fireasy.Common.Emit.DynamicTypeBuilder">
            <summary>
            用于创建一个动态的类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.#ctor(Fireasy.Common.Emit.BuildContext,System.String,Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration,System.Type)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Emit.DynamicTypeBuilder"/> 类的新实例。
            </summary>
            <param name="context"></param>
            <param name="typeName">动态类型的名称。</param>
            <param name="visual">指定类的可见性。</param>
            <param name="calling">指定类的调用属性。</param>
            <param name="baseType">动态类型继承的基类。</param>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicTypeBuilder.BaseType">
            <summary>
            获取或设置动态类型所继承的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicTypeBuilder.TypeName">
            <summary>
            获取动态类型的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicTypeBuilder.InterfaceTypes">
            <summary>
            获取动态类型所要实现的接口集合。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicTypeBuilder.UnderlyingSystemType">
            <summary>
            返回此 TypeBuilder 的基础系统类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Emit.DynamicTypeBuilder.TypeBuilder">
            <summary>
            获取当前的 <see cref="P:Fireasy.Common.Emit.DynamicTypeBuilder.TypeBuilder"/>。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.CreateType">
            <summary>
            创建动态类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.ImplementInterface(System.Type)">
            <summary>
            添加此类型实现的接口。
            </summary>
            <param name="type">接口的类型。</param>
            <returns>当前的 <see cref="P:Fireasy.Common.Emit.DynamicTypeBuilder.TypeBuilder"/>。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.DefineProperty(System.String,System.Type,Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration)">
            <summary>
            定义一个属性。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <param name="propertyType">属性的类型。</param>
            <param name="visual">指定属性的可见性。</param>
            <param name="calling">指定属性的调用属性。</param>
            <returns>新的 <see cref="T:Fireasy.Common.Emit.DynamicPropertyBuilder"/>。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.DefineMethod(System.String,System.Type,System.Type[],Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration,System.Action{Fireasy.Common.Emit.BuildContext})">
            <summary>
            定义一个方法。
            </summary>
            <param name="methodName">方法的名称。</param>
            <param name="returnType">返回值的类型，如果为 void 则该参数为 null。</param>
            <param name="parameterTypes">一个数组，表示方法的传入参数类型。</param>
            <param name="visual">指定方法的可见性。</param>
            <param name="calling">指定方法的调用属性。</param>
            <param name="ilCoding">方法体的 IL 过程。</param>
            <returns>新的 <see cref="T:Fireasy.Common.Emit.DynamicMethodBuilder"/>。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.DefineConstructor(System.Type[],Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration,System.Action{Fireasy.Common.Emit.BuildContext})">
            <summary>
            定义一个构造函数。
            </summary>
            <param name="parameterTypes"></param>
            <param name="visual"></param>
            <param name="calling"></param>
            <param name="ilCoding"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.DefineField(System.String,System.Type,System.Object,Fireasy.Common.Emit.VisualDecoration,Fireasy.Common.Emit.CallingDecoration)">
            <summary>
            定义一个字段。
            </summary>
            <param name="fieldName">字段的名称。</param>
            <param name="fieldType">字段的类型。</param>
            <param name="defaultValue">默认值。</param>
            <param name="visual"></param>
            <param name="calling"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.DefineNestedType(System.String,Fireasy.Common.Emit.VisualDecoration,System.Type)">
            <summary>
            定义一个嵌套的类型。
            </summary>
            <param name="typeName"></param>
            <param name="visual"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.DefineNestedInterface(System.String,Fireasy.Common.Emit.VisualDecoration)">
            <summary>
            使用当前的构造器定义一个动态接口。
            </summary>
            <param name="typeName">类型的名称。</param>
            <param name="visual">指定类的可见性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.DefineNestedEnum(System.String,System.Type,Fireasy.Common.Emit.VisualDecoration)">
            <summary>
            使用当前构造器定义一个枚举。
            </summary>
            <param name="enumName">枚举的名称。</param>
            <param name="underlyingType">枚举的类型。</param>
            <param name="visual">指定枚举的可见性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.GetTypeAttributes">
            <summary>
            获取 <see cref="T:System.Reflection.TypeAttributes"/>。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Emit.DynamicTypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            设置一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象到当前实例关联的 <see cref="P:Fireasy.Common.Emit.DynamicTypeBuilder.TypeBuilder"/> 对象。
            </summary>
            <param name="customBuilder">一个 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> 对象。</param>
        </member>
        <member name="T:Fireasy.Common.Emit.EmitHelper">
            <summary>
            对 MSIL 的指令进行包装，使其支持链式语法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            使用一个指令器初始化 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 类的新实例。
            </summary>
            <param name="generator">MSIL 指令器。</param>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.#ctor(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.MethodBuilder)">
            <summary>
            使用指令器和方法初始化 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 类的新实例。
            </summary>
            <param name="generator">MSIL 指令器。</param>
            <param name="method">编写指令的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.op_Implicit(Fireasy.Common.Emit.EmitHelper)~System.Reflection.Emit.ILGenerator">
            <summary>
            将 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 隐式转换为 <see cref="P:Fireasy.Common.Emit.EmitHelper.ILGenerator"/>。
            </summary>
            <param name="emitHelper"></param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ILGenerator">
            <summary>
            获取 MSIL 指令生成器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.BeginCatchBlock(System.Type)">
            <summary>
            开始 Catch 块。
            </summary>
            <param name="exceptionType">表示异常的 System.Type 对象。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.BeginExceptFilterBlock">
            <summary>
            开始已筛选异常的异常块。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.BeginExceptionBlock">
            <summary>
            开始非筛选异常的异常块。
            </summary>
            <returns>块结尾的标签。这将使您停在正确的位置执行 Finally 块或完成 Try 块。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.BeginFaultBlock">
            <summary>
            在 Microsoft 中间语言 (MSIL) 流中开始一个异常错误块。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.BeginFinallyBlock">
            <summary>
            在 Microsoft 中间语言 (MSIL) 指令流中开始一个 Finally 块。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.BeginScope">
            <summary>
            开始词法范围。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.DeclareLocal(System.Type)">
            <summary>
            声明指定类型的局部变量。
            </summary>
            <param name="localType">一个 System.Type 对象，表示局部变量的类型。</param>
            <returns>已声明的局部变量。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.DeclareLocal(System.Type,System.Boolean)">
            <summary>
            声明指定类型的局部变量，还可以选择固定该变量所引用的对象。
            </summary>
            <param name="localType">一个 System.Type 对象，表示局部变量的类型。</param>
            <param name="pinned">如果要将对象固定在内存中，则为 true；否则为 false。</param>
            <returns>已声明的局部变量。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.DefineLabel">
            <summary>
            声明新标签。
            </summary>
            <returns>返回可用作分支标记的新标签。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.EndExceptionBlock">
            <summary>
            结束异常块。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.EndScope">
            <summary>
            结束词法范围。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.MarkLabel(System.Reflection.Emit.Label)">
            <summary>
            用给定标签标记 Microsoft 中间语言 (MSIL) 流的当前位置。
            </summary>
            <param name="loc">为其设置索引的标签。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            在 Microsoft 中间语言 (MSIL) 流中标记序列点。
            </summary>
            <param name="document">为其定义序列点的文档。</param>
            <param name="startLine">序列点开始的行。</param>
            <param name="startColumn">序列点开始的行中的列。</param>
            <param name="endLine">序列点结束的行。</param>
            <param name="endColumn">序列点结束的行中的列。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ThrowException(System.Type)">
            <summary>
            发出指令以引发异常。
            </summary>
            <param name="exceptionType">要引发的异常类型的类。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.UsingNamespace(System.String)">
            <summary>
            指定用于计算当前活动词法范围的局部变量和监视值的命名空间。
            </summary>
            <param name="namespaceName">用于计算当前活动词法范围的局部变量和监视值的命名空间。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.add">
            <summary>
            将两个值相加并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.add_ovf">
            <summary>
            将两个整数相加，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.add_ovf_un">
            <summary>
            将两个无符号整数值相加，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.and">
            <summary>
            计算两个值的按位“与”并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.arglist">
            <summary>
            返回指向当前方法的参数列表的非托管指针。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.beq(System.Reflection.Emit.Label)">
            <summary>
            如果两个值相等，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.beq_s(System.Reflection.Emit.Label)">
            <summary>
            如果两个值相等，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bge(System.Reflection.Emit.Label)">
            <summary>
            如果第一个值大于或等于第二个值，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bge_s(System.Reflection.Emit.Label)">
            <summary>
            如果第一个值大于或等于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bge_un(System.Reflection.Emit.Label)">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bge_un_s(System.Reflection.Emit.Label)">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bgt(System.Reflection.Emit.Label)">
            <summary>
            如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bgt_s(System.Reflection.Emit.Label)">
            <summary>
            如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bgt_un(System.Reflection.Emit.Label)">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bgt_un_s(System.Reflection.Emit.Label)">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ble(System.Reflection.Emit.Label)">
            <summary>
            如果第一个值小于或等于第二个值，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ble_s(System.Reflection.Emit.Label)">
            <summary>
            如果第一个值小于或等于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ble_un(System.Reflection.Emit.Label)">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于或等于第二个值，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ble_un_s(System.Reflection.Emit.Label)">
            <summary>
            当比较无符号整数值或不可排序的浮点值时，如果第一个值小于或等于第二个值，则将控制权转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.blt(System.Reflection.Emit.Label)">
            <summary>
            如果第一个值小于第二个值，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.blt_s(System.Reflection.Emit.Label)">
            <summary>
            如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.blt_un(System.Reflection.Emit.Label)">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于第二个值，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.blt_un_s(System.Reflection.Emit.Label)">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bne_un(System.Reflection.Emit.Label)">
            <summary>
            当两个无符号整数值或不可排序的浮点型值不相等时，将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.bne_un_s(System.Reflection.Emit.Label)">
            <summary>
            当两个无符号整数值或不可排序的浮点型值不相等时，将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.box(System.Type)">
            <summary>
            将值类转换为对象引用（O 类型）。
            </summary>
            <param name="type">A Type</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.boxIfValueType(System.Type)">
            <summary>
            如果类型为值类型，将值类转换为对象引用（O 类型），否则不做任何处理。
            </summary>
            <param name="type">A Type</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.br(System.Reflection.Emit.Label)">
            <summary>
            无条件地将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.br_s(System.Reflection.Emit.Label)">
            <summary>
            无条件地将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.break">
            <summary>
            向 Common Language Infrastructure (CLI) 发出信号以通知调试器已撞上了一个断点。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.brfalse(System.Reflection.Emit.Label)">
            <summary>
            如果 value 为 false、空引用（Visual Basic 中的 Nothing）或零，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.brfalse_s(System.Reflection.Emit.Label)">
            <summary>
            如果 value 为 false、空引用或零，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.brtrue(System.Reflection.Emit.Label)">
            <summary>
            如果 value 为 true、非空或非零，则将控制转移到目标指令。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.brtrue_s(System.Reflection.Emit.Label)">
            <summary>
            如果 value 为 true、非空或非零，则将控制转移到目标指令（短格式）。
            </summary>
            <param name="label">The label to branch from this location.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.call(System.Reflection.MethodInfo)">
            <summary>
            调用由传递的方法说明符指示的方法。
            </summary>
            <param name="methodInfo">The method to be called.</param>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.call(System.Reflection.ConstructorInfo)">
            <summary>
            调用由传递的构造函数说明符指示的构造函数。
            </summary>
            <param name="constructorInfo">The constructor to be called.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.call(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            调用由传递的方法说明符指示的方法。
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.call(System.Type,System.String,System.Type[])">
            <summary>
            调用指定名称的方法。
            </summary>
            <param name="type">A Type</param>
            <param name="methodName">The name of the method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.call(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            调用指定名称的方法。
            </summary>
            <param name="type">A Type</param>
            <param name="methodName">The name of the method to be called.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.callvirt(System.Reflection.MethodInfo)">
            <summary>
            对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.callvirt(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.callvirt(System.Type,System.String,System.Type[])">
            <summary>
            对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.callvirt(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.callvirt(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。
            </summary>
            <param name="methodName">要调用的方法名称。</param>
            <param name="type">表示一个类型。</param>
            <param name="flags">绑定标识。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.castclass(System.Type)">
            <summary>
            尝试将引用传递的对象转换为指定的类。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.castType(System.Type)">
            <summary>
            尝试将对象转换为指定的类，如果对象是值类型，则进行拆箱。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ceq">
            <summary>
            比较两个值。如果这两个值相等，则将整数值 1 (int32) 推送到计算堆栈上；否则，将 0 (int32) 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.cgt">
            <summary>
            比较两个值。如果第一个值大于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.cgt_un">
            <summary>
            比较两个无符号的或不可排序的值。如果第一个值大于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.constrained(System.Type)">
            <summary>
            约束要对其进行虚方法调用的类型。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ckfinite">
            <summary>
            如果值不是有限数，则引发 <see cref="T:System.ArithmeticException"/>。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.clt">
            <summary>
            比较两个值。如果第一个值小于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.clt_un">
            <summary>
            比较无符号的或不可排序的值 value1 和 value2。如果 value1 小于 value2，则将整数值 1 (int32 ) 推送到计算堆栈上；反之，将 0 ( int32 ) 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_i">
            <summary>
            将位于计算堆栈顶部的值转换为 native int。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_i1">
            <summary>
            将位于计算堆栈顶部的值转换为 int8，然后将其扩展（填充）为 int32。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_i2">
            <summary>
            将位于计算堆栈顶部的值转换为 int16，然后将其扩展（填充）为 int32。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_i4">
            <summary>
            将位于计算堆栈顶部的值转换为 int32。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_i8">
            <summary>
            将位于计算堆栈顶部的值转换为 int64。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.conv(System.Type)">
            <summary>
            将位于计算堆栈顶部的值转换为相应的类型。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 native int，并在溢出时引发 <see cref="T:System.OverflowException"/>。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i1">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 int8 并将其扩展为 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 native int，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i1_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 int8 并将其扩展为 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i2">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 int16 并将其扩展为 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i2_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 int16 并将其扩展为 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i4">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i4_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i8">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 int64，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_i8_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 int64，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned native int，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned native int，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u1">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned int8 并将其扩展为 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u1_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned int8 并将其扩展为 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u2">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned int16 并将其扩展为 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u2_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned int16 并将其扩展为 int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u4">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u4_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned int32，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u8">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned int64，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_ovf_u8_un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned int64，并在溢出时引发 System.OverflowException。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_r4">
            <summary>
            将位于计算堆栈顶部的值转换为 float32。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_r8">
            <summary>
            将位于计算堆栈顶部的值转换为 float64。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_r_un">
            <summary>
            将位于计算堆栈顶部的无符号整数值转换为 float32。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_u">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned native int，然后将其扩展为 native int。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_u1">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned int8，然后将其扩展为 int32。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_u2">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned int16，然后将其扩展为 int32。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_u4">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned int32，然后将其扩展为 int32。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.conv_u8">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned int64，然后将其扩展为 int64。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.cpblk">
            <summary>
            将指定数目的字节从源地址复制到目标地址。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.cpobj(System.Type)">
            <summary>
            将位于对象（&amp;、* 或 native int 类型）地址的值类型复制到目标对象（&amp;、* 或 native int 类型）的地址。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.div">
            <summary>
            将两个值相除并将结果作为浮点（F 类型）或商（int32 类型）推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.div_un">
            <summary>
            两个无符号整数值相除并将结果 ( int32 ) 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.dup">
            <summary>
            复制计算堆栈上当前最顶端的值，然后将副本推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.endfilter">
            <summary>
            将控制从异常的 filter 子句转移回 Common Language Infrastructure (CLI) 异常处理程序。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.endfinally">
            <summary>
            将控制从异常块的 fault 或 finally 子句转移回 Common Language Infrastructure (CLI) 异常处理程序。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.initblk">
            <summary>
            将位于特定地址的内存的指定块初始化为给定大小和初始值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.initobj(System.Type)">
            <summary>
            将位于指定地址的值类型的每个字段初始化为空引用或适当的基元类型的 0。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.isinst(System.Type)">
            <summary>
            测试对象引用（O 类型）是否为特定类的实例。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.jmp(System.Reflection.MethodInfo)">
            <summary>
            退出当前方法并跳至指定方法。
            </summary>
            <param name="methodInfo">要跳转的方法。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldarg(System.Int16)">
            <summary>
            将参数（由指定索引值引用）加载到堆栈上。
            </summary>
            <param name="index">表示参数的索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldarg(System.Int32)">
            <summary>
            将参数（由指定索引值引用）加载到堆栈上。
            </summary>
            <param name="index">表示参数的索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldarga(System.Int16)">
            <summary>
            将参数（由指定索引值引用）加载到堆栈上。
            </summary>
            <param name="index">表示参数的索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldarga_s(System.Byte)">
            <summary>
            将参数（由指定的短格式索引引用）加载到计算堆栈上。
            </summary>
            <param name="index">表示参数的索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldarga(System.Int32)">
            <summary>
            将参数（由指定索引值引用）加载到堆栈上。
            </summary>
            <param name="index">表示参数的索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldarg_0">
            <summary>
            将索引为 0 的参数加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldarg_1">
            <summary>
            将索引为 1 的参数加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldarg_2">
            <summary>
            将索引为 2 的参数加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldarg_3">
            <summary>
            将索引为 3 的参数加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldarg_s(System.Byte)">
            <summary>
            将参数（由指定的短格式索引引用）加载到计算堆栈上。
            </summary>
            <param name="index">值的索引。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldc_bool(System.Boolean)">
            <summary>
            将布尔值参数加载到计算堆栈上。
            </summary>
            <param name="b">要推送到栈上的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldc_i4(System.Int32)">
            <summary>
            将所提供的 int32 类型的值作为 int32 推送到计算堆栈上。
            </summary>
            <param name="num">要推送到栈上的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_0">
            <summary>
            将整数值 0 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_1">
            <summary>
            将整数值 1 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_2">
            <summary>
            将整数值 2 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_3">
            <summary>
            将整数值 3 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_4">
            <summary>
            将整数值 4 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_5">
            <summary>
            将整数值 5 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_6">
            <summary>
            将整数值 6 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_7">
            <summary>
            将整数值 7 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_8">
            <summary>
            将整数值 8 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldc_i4_m1">
            <summary>
            将整数值 -1 作为 int32 推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldc_i4_(System.Int32)">
            <summary>
            将指定的整数作为 int32 推送到计算堆栈上。
            </summary>
            <param name="num">要推送到栈上的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldc_i4_s(System.SByte)">
            <summary>
            将提供的 int8 值作为 int32 推送到计算堆栈上（短格式）。
            </summary>
            <param name="num">要推送到栈上的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldc_i8(System.Int64)">
            <summary>
            将所提供的 int64 类型的值作为 int64 推送到计算堆栈上。
            </summary>
            <param name="num">要推送到栈上的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldc_r4(System.Single)">
            <summary>
            将所提供的 float32 类型的值作为 F (float) 类型推送到计算堆栈上。
            </summary>
            <param name="num">要推送到栈上的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldc_r8(System.Double)">
            <summary>
            将所提供的 float64 类型的值作为 F (float) 类型推送到计算堆栈上。
            </summary>
            <param name="num">要推送到栈上的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldelem(System.Type)">
            <summary>
            按照指令中指定的类型，将指定数组索引中的元素加载到计算堆栈的顶部。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_i">
            <summary>
            将位于指定数组索引处的 native int 类型的元素作为 native int 加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_i1">
            <summary>
            将位于指定数组索引处的 int8 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_i2">
            <summary>
            将位于指定数组索引处的 int16 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_i4">
            <summary>
            将位于指定数组索引处的 int32 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_i8">
            <summary>
            将位于指定数组索引处的 int64 类型的元素作为 int64 加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_r4">
            <summary>
            将位于指定数组索引处的 float32 类型的元素作为 F 类型（浮点型）加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_r8">
            <summary>
            将位于指定数组索引处的 float64 类型的元素作为 F 类型（浮点型）加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_ref">
            <summary>
            将位于指定数组索引处的包含对象引用的元素作为 O 类型（对象引用）加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_u1">
            <summary>
            将位于指定数组索引处的 unsigned int8 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_u2">
            <summary>
            将位于指定数组索引处的 unsigned int16 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldelem_u4">
            <summary>
            将位于指定数组索引处的 unsigned int32 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldelema(System.Type)">
            <summary>
            将位于指定数组索引的数组元素的地址作为 &amp; 类型（托管指针）加载到计算堆栈的顶部。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldfld(System.Reflection.FieldInfo)">
            <summary>
            查找对象中其引用当前位于计算堆栈的字段的值。
            </summary>
            <param name="fieldInfo">表示字段的 <see cref="T:System.Reflection.FieldInfo"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldflda(System.Reflection.FieldInfo)">
            <summary>
            查找对象中其引用当前位于计算堆栈的字段的地址。
            </summary>
            <param name="fieldInfo">表示字段的 <see cref="T:System.Reflection.FieldInfo"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldfld(Fireasy.Common.Emit.DynamicFieldBuilder)">
            <summary>
            查找对象中其引用当前位于计算堆栈的字段的值。
            </summary>
            <param name="fieldInfo">表示字段的 <see cref="T:Fireasy.Common.Emit.DynamicFieldBuilder"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldflda(Fireasy.Common.Emit.DynamicFieldBuilder)">
            <summary>
            查找对象中其引用当前位于计算堆栈的字段的地址。
            </summary>
            <param name="fieldInfo">表示字段的 <see cref="T:Fireasy.Common.Emit.DynamicFieldBuilder"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldftn(System.Reflection.MethodInfo)">
            <summary>
            将指向实现特定方法的本机代码的非托管指针（native int 类型）推送到计算堆栈上。
            </summary>
            <param name="methodInfo">要调用的方法。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_i">
            <summary>
            将 native int 类型的值作为 native int 间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_i1">
            <summary>
            将 int8 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_i2">
            <summary>
            将 int16 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_i4">
            <summary>
            将 int32 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_i8">
            <summary>
            将 int64 类型的值作为 int64 间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_r4">
            <summary>
            将 float32 类型的值作为 F (float) 类型间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_r8">
            <summary>
            将 float64 类型的值作为 F (float) 类型间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_ref">
            <summary>
            将对象引用作为 O（对象引用）类型间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_u1">
            <summary>
            将 unsigned int8 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_u2">
            <summary>
            将 unsigned int16 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldind_u4">
            <summary>
            将 unsigned int32 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldind(System.Type)">
            <summary>
            将指定类型的值间接加载到计算堆栈上。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldlen">
            <summary>
            将从零开始的、一维数组的元素的数目推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldloc(System.Int16)">
            <summary>
            将指定索引处的局部变量加载到计算堆栈上。
            </summary>
            <param name="index">变量在栈上的索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            将指定的局部变量加载到计算堆栈上。
            </summary>
            <param name="localBuilder">表示一个局部变量。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldloca(System.Int16)">
            <summary>
            将位于特定索引处的局部变量的地址加载到计算堆栈上。
            </summary>
            <param name="index">表示索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldloca(System.Reflection.Emit.LocalBuilder)">
            <summary>
            将指定的局部变量的地址加载到计算堆栈上。
            </summary>
            <param name="local">表示一个局部变量。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldloca_s(System.Byte)">
            <summary>
            将位于特定索引处的局部变量的地址加载到计算堆栈上（短格式）。
            </summary>
            <param name="index">变量的索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldloc_0">
            <summary>
            将索引 0 处的局部变量加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldloc_1">
            <summary>
            将索引 1 处的局部变量加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldloc_2">
            <summary>
            将索引 2 处的局部变量加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldloc_3">
            <summary>
            将索引 3 处的局部变量加载到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldloc_s(System.Byte)">
            <summary>
            将特定索引处的局部变量加载到计算堆栈上（短格式）。
            </summary>
            <param name="index">变量的索引值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.ldnull">
            <summary>
            将空引用（O 类型）推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldobj(System.Type)">
            <summary>
            将地址指向的值类型对象复制到计算堆栈的顶部。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldsfld(System.Reflection.FieldInfo)">
            <summary>
            将静态字段的值推送到计算堆栈上。
            </summary>
            <param name="fieldInfo">表示字段的 <see cref="T:System.Reflection.FieldInfo"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldsflda(System.Reflection.FieldInfo)">
            <summary>
            将静态字段的地址推送到计算堆栈上。
            </summary>
            <param name="fieldInfo">表示字段的 <see cref="T:System.Reflection.FieldInfo"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldstr(System.String)">
            <summary>
            推送对元数据中存储的字符串的新对象引用。
            </summary>
            <param name="str">一个字符串。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldtoken(System.Reflection.MethodInfo)">
            <summary>
            将元数据标记转换为其运行时表示形式，并将其推送到计算堆栈上。
            </summary>
            <param name="methodInfo">要调用的方法。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldtoken(System.Reflection.FieldInfo)">
            <summary>
            将元数据标记转换为其运行时表示形式，并将其推送到计算堆栈上。
            </summary>
            <param name="fieldInfo">表示字段的 <see cref="T:System.Reflection.FieldInfo"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldtoken(System.Type)">
            <summary>
            将元数据标记转换为其运行时表示形式，并将其推送到计算堆栈上。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ldvirtftn(System.Reflection.MethodInfo)">
            <summary>
            将指向实现与指定对象关联的特定虚方法的本机代码的非托管指针（native int 类型）推送到计算堆栈上。
            </summary>
            <param name="methodInfo">要调用的方法。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.leave(System.Reflection.Emit.Label)">
            <summary>
            退出受保护的代码区域，无条件将控制转移到特定目标指令。
            </summary>
            <param name="label">表示一个分支标签。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.leave_s(System.Reflection.Emit.Label)">
            <summary>
            退出受保护的代码区域，无条件将控制转移到目标指令（缩写形式）。
            </summary>
            <param name="label">表示一个分支标签。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.localloc">
            <summary>
            从本地动态内存池分配特定数目的字节并将第一个分配的字节的地址（瞬态指针，* 类型）推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.mkrefany(System.Type)">
            <summary>
            将对特定类型实例的类型化引用推送到计算堆栈上。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.mul">
            <summary>
            将两个值相乘并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.mul_ovf">
            <summary>
            将两个整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.mul_ovf_un">
            <summary>
            将两个无符号整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.neg">
            <summary>
            对一个值执行求反并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.newarr(System.Type)">
            <summary>
            将对新的从零开始的一维数组（其元素属于特定类型）的对象引用推送到计算堆栈上。
            </summary>
            <param name="type">表示元素的类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.newobj(System.Reflection.ConstructorInfo)">
            <summary>
            创建一个值类型的新对象或新实例，并将对象引用（O 类型）推送到计算堆栈上。
            </summary>
            <param name="constructorInfo">一个构造函数。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.newobj(System.Type,System.Type[])">
            <summary>
            创建一个值类型的新对象或新实例，并将对象引用（O 类型）推送到计算堆栈上。
            </summary>
            <param name="type">表示对象的类型。</param>
            <param name="parameters">构造的参数类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.nop">
            <summary>
            如果修补操作码，则填充空间。尽管可能消耗处理周期，但未执行任何有意义的操作。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.not">
            <summary>
            计算堆栈顶部整数值的按位求补并将结果作为相同的类型推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.or">
            <summary>
            计算位于堆栈顶部的两个整数值的按位求补并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.pop">
            <summary>
            移除当前位于计算堆栈顶部的值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.readonly">
            <summary>
            指定后面的数组地址操作在运行时不执行类型检查，并且返回可变性受限的托管指针。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.refanytype">
            <summary>
            检索嵌入在类型化引用内的类型标记。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.refanyval(System.Type)">
            <summary>
            检索嵌入在类型化引用内的地址（&amp; 类型）。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.rem">
            <summary>
            将两个值相除并将余数推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.rem_un">
            <summary>
            将两个无符号值相除并将余数推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.ret">
            <summary>
            从当前方法返回，并将返回值（如果存在）从调用方的计算堆栈推送到被调用方的计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.rethrow">
            <summary>
            再次引发当前异常。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.shl">
            <summary>
            将整数值左移（用零填充）指定的位数，并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.shr">
            <summary>
            将整数值右移（保留符号）指定的位数，并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.shr_un">
            <summary>
            将无符号整数值右移（用零填充）指定的位数，并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.sizeof(System.Type)">
            <summary>
            将提供的值类型的大小（以字节为单位）推送到计算堆栈上。
            </summary>
            <param name="type">表示一个值类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.starg(System.Int16)">
            <summary>
            将位于计算堆栈顶部的值存储到位于指定索引的参数槽中。
            </summary>
            <param name="index">槽索引。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.starg_s(System.Byte)">
            <summary>
            将位于计算堆栈顶部的值存储在参数槽中的指定索引处（短格式）。
            </summary>
            <param name="index">槽索引。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.starg(System.Int32)">
            <summary>
            将位于计算堆栈顶部的值存储到位于指定索引的参数槽中。
            </summary>
            <param name="index">槽索引。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stelem_i">
            <summary>
            用计算堆栈上的 native int 值替换给定索引处的数组元素。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stelem_i1">
            <summary>
            用计算堆栈上的 int8 值替换给定索引处的数组元素。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stelem_i2">
            <summary>
            用计算堆栈上的 int16 值替换给定索引处的数组元素。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stelem_i4">
            <summary>
            用计算堆栈上的 int32 值替换给定索引处的数组元素。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stelem_i8">
            <summary>
            用计算堆栈上的 int64 值替换给定索引处的数组元素。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stelem_r4">
            <summary>
            用计算堆栈上的 float32 值替换给定索引处的数组元素。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stelem_r8">
            <summary>
            用计算堆栈上的 float64 值替换给定索引处的数组元素。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stelem_ref">
            <summary>
            用计算堆栈上的对象 ref 值（O 类型）替换给定索引处的数组元素。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.stfld(System.Reflection.FieldInfo)">
            <summary>
            用新值替换在对象引用或指针的字段中存储的值。
            </summary>
            <param name="fieldInfo">表示字段的 <see cref="T:System.Reflection.FieldInfo"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stind_i">
            <summary>
            在所提供的地址存储 native int 类型的值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stind_i1">
            <summary>
            在所提供的地址存储 int8 类型的值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stind_i2">
            <summary>
            在所提供的地址存储 int16 类型的值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stind_i4">
            <summary>
            在所提供的地址存储 int32 类型的值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stind_i8">
            <summary>
            在所提供的地址存储 int64 类型的值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stind_r4">
            <summary>
            在所提供的地址存储 float32 类型的值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stind_r8">
            <summary>
            在所提供的地址存储 float64 类型的值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stind_ref">
            <summary>
            存储所提供地址处的对象引用值。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.stind(System.Type)">
            <summary>
            在所提供的地址存储指定类型的值。
            </summary>
            <param name="type">表示一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.stloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到指定的局部变量中。
            </summary>
            <param name="local">一个局部变量。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.stloc(System.Int16)">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到指定索引处的局部变量列表中。
            </summary>
            <param name="index">表示索引的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stloc_0">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到索引 0 处的局部变量列表中。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stloc_1">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到索引 1 处的局部变量列表中。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stloc_2">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到索引 2 处的局部变量列表中。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.stloc_3">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到索引 3 处的局部变量列表中。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.stloc_s(System.Reflection.Emit.LocalBuilder)">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储在指定的局部变量（短格式）。
            </summary>
            <param name="local">一个局部变量。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.stloc_s(System.Byte)">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储在局部变量列表中的 index 处（短格式）。
            </summary>
            <param name="index">表示索引的值。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.stobj(System.Type)">
            <summary>
            将指定类型的值从计算堆栈复制到所提供的内存地址中。
            </summary>
            <param name="type">一个类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.stsfld(System.Reflection.FieldInfo)">
            <summary>
            用来自计算堆栈的值替换静态字段的值。
            </summary>
            <param name="fieldInfo">一个表示字段的 <see cref="T:System.Reflection.FieldInfo"/>。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.sub">
            <summary>
            从其他值中减去一个值并将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.sub_ovf">
            <summary>
            从另一值中减去一个整数值，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.sub_ovf_un">
            <summary>
            从另一值中减去一个无符号整数值，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.switch(System.Reflection.Emit.Label[])">
            <summary>
            实现跳转表。
            </summary>
            <param name="labels">从此位置分支到的标签对象的数组。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.tailcall">
            <summary>
            执行后缀的方法调用指令，以便在执行实际调用指令前移除当前方法的堆栈帧。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.throw">
            <summary>
            引发当前位于计算堆栈上的异常对象。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.unaligned(System.Reflection.Emit.Label)">
            <summary>
            指示当前位于计算堆栈上的地址可能没有与紧接的 ldind、stind、ldfld、stfld、ldobj、stobj、initblk 或 cpblk 指令的自然大小对齐。
            </summary>
            <param name="label">分量的分支标签。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.unaligned(System.Int64)">
            <summary>
            指示当前位于计算堆栈上的地址可能没有与紧接的 ldind、stind、ldfld、stfld、ldobj、stobj、initblk 或 cpblk 指令的自然大小对齐。
            </summary>
            <param name="addr">表示一个栈上的地址。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.unbox(System.Type)">
            <summary>
            将值类型的已装箱的表示形式转换为其未装箱的形式。
            </summary>
            <param name="type">拆箱后的类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.unbox_any(System.Type)">
            <summary>
            将指令中指定类型的已装箱的表示形式转换成未装箱形式。
            </summary>
            <param name="type">拆箱后的类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.unboxIfValueType(System.Type)">
            <summary>
            如果该类型是值类型，将指令中指定类型的已装箱的表示形式转换成未装箱形式，否则不做任何处理。
            </summary>
            <param name="type">拆箱后的类型。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.volatile">
            <summary>
            指定当前位于计算堆栈顶部的地址可以是易失的，并且读取该位置的结果不能被缓存，或者对该地址的多个存储区不能被取消。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="P:Fireasy.Common.Emit.EmitHelper.xor">
            <summary>
            计算位于计算堆栈顶部的两个值的按位异或，并且将结果推送到计算堆栈上。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.end">
            <summary>
            终止符，无具体含义，用于属性后面。
            </summary>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.Assert(System.Boolean,System.Action{Fireasy.Common.Emit.EmitHelper},System.Action{Fireasy.Common.Emit.EmitHelper})">
            <summary>
            使用断言进行编码。
            </summary>
            <param name="predicate">用于测试条件的函数。</param>
            <param name="trueAction">如果条件为 true，则执行该方法。</param>
            <param name="falseAction">如果条件为 false，则执行该方法。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{Fireasy.Common.Emit.EmitHelper,``0,System.Int32})">
            <summary>
            枚举序列中的所有元素，并应用指定的方法。
            </summary>
            <typeparam name="T">序列中的元素类型。</typeparam>
            <param name="source">一个序列。</param>
            <param name="action">应用 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 实例的方法。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Emit.EmitHelper.For(System.Int32,System.Int32,System.Action{Fireasy.Common.Emit.EmitHelper,System.Int32})">
            <summary>
            循环从 <paramref name="from"/> 到 <paramref name="to"/> 之间的数字，并应用指定的方法。
            </summary>
            <param name="from">开始的数字。</param>
            <param name="to">结束的数字。</param>
            <param name="action">循环体方法。</param>
            <returns>当前 <see cref="T:Fireasy.Common.Emit.EmitHelper"/> 的实例。</returns>
        </member>
        <member name="T:Fireasy.Common.Emit.ITypeCreator">
            <summary>
            表示可以创建类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Emit.ITypeCreator.CreateType">
            <summary>
            用此生成器创建一个类。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Emit.VisualDecoration">
            <summary>
            可见性修饰符。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.VisualDecoration.Public">
            <summary>
            公共的。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.VisualDecoration.Private">
            <summary>
            私有的。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.VisualDecoration.Internal">
            <summary>
            内部的。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Emit.VisualDecoration.Protected">
            <summary>
            保护的。
            </summary>
        </member>
        <member name="T:Fireasy.Common.EnumDescriptionAttribute">
            <summary>
            为枚举值添加文本说明。
            </summary>
        </member>
        <member name="M:Fireasy.Common.EnumDescriptionAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.EnumDescriptionAttribute"/> 类的新实例。
            </summary>
            <param name="description">说明文本。</param>
        </member>
        <member name="M:Fireasy.Common.EnumDescriptionAttribute.#ctor(System.Int32,System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.EnumDescriptionAttribute"/> 类的新实例。
            </summary>
            <param name="flags">标志位。</param>
            <param name="description">说明文本。</param>
        </member>
        <member name="P:Fireasy.Common.EnumDescriptionAttribute.Flags">
            <summary>
            获取或设置标志位。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.ByteArrayExtensions.ToHex(System.Byte[])">
            <summary>
            将一组字节转换为使用十六进制字符串表示。比如 {255,254} 转为 FFFE。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ByteArrayExtensions.FromHex(System.String)">
            <summary>
            将表示十六进制的字符串转换为字节数组。比如 FFFE 转为 {255,254}。
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.CharExtension">
            <summary>
            字符相关的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.CharExtension.IsChinese(System.Char)">
            <summary>
            判断指定的字符是否是中文字符。
            </summary>
            <param name="character">要判断的字符。</param>
            <returns>如果字符是中文字符，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.CharExtension.GetAsciiCode(System.Char)">
            <summary>
            获取字符的区位码。
            </summary>
            <param name="character">一个字符。</param>
            <returns>字符的区位码。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.CharExtension.IsLine(System.Char)">
            <summary>
            判断是否为回车换行符。
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.ChineseSpellHelper">
            <summary>
            汉语拼音的辅助类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.ChineseSpellHelper.GetPinyinFirstLetter(System.String)">
            <summary>
            取中文文本的拼音首字母。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ChineseSpellHelper.GetPinyin(System.String)">
            <summary>
            取中文文本的拼音。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ChineseSpellHelper.GetChineseList(System.String)">
            <summary>
            取和拼音相同的汉字列表。
            </summary>
            <param name="Pinyin"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ChineseSpellHelper.GetPinyin(System.Char)">
            <summary>
            返回单个字符的汉字拼音。
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ChineseSpellHelper.GetHashIndex(System.Char)">
            <summary>
            取文本索引值。
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ComponentExtensions.IsDefined``1(System.ComponentModel.MemberDescriptor)">
            <summary>
            判定是否定义了自定义特性。
            </summary>
            <typeparam name="T">自定义特性类型。</typeparam>
            <param name="member">要搜索的成员定义。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ComponentExtensions.GetCustomAttributes``1(System.ComponentModel.MemberDescriptor)">
            <summary>
            获取自定义特性组。
            </summary>
            <typeparam name="T">自定义特性类型。</typeparam>
            <param name="member">要搜索的成员定义。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.DateTimeExtension">
            <summary>
            日期相关的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.StartOfDay(System.DateTime)">
            <summary>
            转换为日期的起始时刻。
            </summary>
            <param name="time">当前的日期。</param>
            <returns>日期在0点0分0秒的时刻。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.EndOfDay(System.DateTime)">
             <summary>
            转换为日期的终止时刻。
             </summary>
             <param name="time">当前的日期。</param>
             <returns>日期在23点59分59秒的时刻。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.StartOfMonth(System.DateTime)">
            <summary>
            获取当前日期中本月的第一天。
            </summary>
            <param name="date">当前的日期。</param>
            <returns>指定日期中本月的第一天。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.EndOfMonth(System.DateTime)">
            <summary>
            获取当前日期中本月的最后一天。
            </summary>
            <param name="date">当前的日期。</param>
            <returns>指定日期中本月的最后一天。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.StartOfWeek(System.DateTime)">
            <summary>
            获取当前日期中本周的第一天。
            </summary>
            <param name="date">当前的日期。</param>
            <returns>指定日期中本周的第一天。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.EndOfWeek(System.DateTime)">
            <summary>
            获取当前日期中本周的最后一天。
            </summary>
            <param name="date">当前的日期。</param>
            <returns>指定日期中本周的最后一天。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.IsLeapYear(System.DateTime)">
            <summary>
            判断该日期中的年份是否为闰年。
            </summary>
            <param name="date">当前的日期。</param>
            <returns>如果指定日期的年份是闰年，则为 true，否则为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.SetYear(System.DateTime,System.Int32)">
            <summary>
            设置该日期中的年份。
            </summary>
            <param name="time">当前的时间。</param>
            <param name="year">要设置的年份。</param>
            <returns>指定年份后的日期。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.SetMonth(System.DateTime,System.Int32)">
            <summary>
            设置该日期中的月份。
            </summary>
            <param name="time">当前的时间</param>
            <param name="month">要设置的月份。</param>
            <returns>指定月份后的日期。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.SetDay(System.DateTime,System.Int32)">
            <summary>
            设置该日期中的天数。
            </summary>
            <param name="time">当前的时间</param>
            <param name="day">要设置的天数。</param>
            <returns>指定天数后的日期。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.IsWeekend(System.DateTime)">
            <summary>
            判断当前日期是否是周末。
            </summary>
            <param name="date">当前的日期。</param>
            <returns>如果指定的日期是周末（星期六和星期天），则为 true，否则为 false。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.FirstWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            获取本月中的第一个 <paramref name="dayOfWeek"/>。
            </summary>
            <param name="date">当前的日期。</param>
            <param name="dayOfWeek">周几。</param>
            <returns>指定日期中的第一个周几（周一或周六等）。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.LastWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            获取本月中的最后一个 <paramref name="dayOfWeek"/>。
            </summary>
            <param name="date">当前的日期。</param>
            <param name="dayOfWeek">周几。</param>
            <returns>指定日期中的最后一个周几（周一或周六等）。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.NextWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            获取下一个 <paramref name="dayOfWeek"/> 的日期。
            </summary>
            <param name="date">当前的日期。</param>
            <param name="dayOfWeek">下一个周几。</param>
            <returns>指定日期的下一个周几（周一或周六等）。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.NextWeek(System.DateTime,System.DayOfWeek,System.Int32)">
            <summary>
            获取下 <paramref name="week"/> 个周后 <paramref name="dayOfWeek"/> 的日期。
            </summary>
            <param name="date">当前的日期。</param>
            <param name="dayOfWeek">周几。</param>
            <param name="week">往后的第几个周。</param>
            <returns>指定日期的下几个周几（周一或周六等）。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.PreviousWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            获取上一个 <paramref name="dayOfWeek"/> 的日期。
            </summary>
            <param name="date">当前的日期。</param>
            <param name="dayOfWeek">上一个周几。</param>
            <returns>指定日期的上一个周几（周一或周六等）。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.PreviousWeek(System.DateTime,System.DayOfWeek,System.Int32)">
            <summary>
            获取上 <paramref name="week"/> 个周后 <paramref name="dayOfWeek"/> 的日期。
            </summary>
            <param name="date">当前的日期。</param>
            <param name="dayOfWeek">周几。</param>
            <param name="week">往前的第几个周。</param>
            <returns>指定日期的上几个周几（周一或周六等）。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.FirstWeek(System.DateTime)">
            <summary>
            获取本月中的第一个周周一的日期。
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.IsBefore(System.DateTime,System.DateTime)">
            <summary>
            判断 <paramref name="other"/> 日期是否在 <paramref name="source"/> 之前。
            </summary>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.IsAfter(System.DateTime,System.DateTime)">
            <summary>
            判断 <paramref name="other"/> 日期是否在 <paramref name="source"/> 之后。
            </summary>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.ToDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            将日期转换为 <see cref="T:System.DateTimeOffset"/>。
            </summary>
            <param name="localDateTime"></param>
            <param name="localTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.ToStringEx(System.TimeSpan)">
            <summary>
            将 <see cref="T:System.TimeSpan"/> 输出为字符表示。
            </summary>
            <param name="timeSpan">要输出的时间间隔。</param>
            <returns>小时、分钟和秒表示的字符串。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.ToTimeStamp(System.DateTime)">
            <summary>
            将时间转换为时间戳。
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DateTimeExtension.ToDateTime(System.Int64)">
            <summary>
            将时间戳转换为时间。
            </summary>
            <param name="timeStamp">时间戳。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.DictionaryExtension">
            <summary>
            字典的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.DictionaryExtension.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            尝试添加键和值，如果已经存在该键则忽略。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="valueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DictionaryExtension.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            尝试添加键和值，如果已经存在该键则忽略。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DictionaryExtension.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            尝试根据键值从字典中获取对应的值，如果键不存在时，则添加使用函数返回的值到字典中。
            </summary>
            <typeparam name="TKey">字典中的键的类型。</typeparam>
            <typeparam name="TValue">字典中的值的类型。</typeparam>
            <param name="dictionary">当前操作的字典。</param>
            <param name="key">元素的键。</param>
            <param name="func">一个函数，返回一个元素的值，并添加到字典中。</param>
            <returns>如果字典内查找到键，则为键对应的元素的值，否则为函数返回的值。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DictionaryExtension.AddOrReplace``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            添加键和值，如果键已存在，则使用新值替换。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DictionaryExtension.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取字典的值。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DictionaryExtension.Sort``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对字典进行排序。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DictionaryExtension.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            使用一个 <see cref="T:System.Collections.Generic.IComparer`1"/> 对字典进行排序。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.DynamicExtensions">
            <summary>
            动态类型的扩展。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.DynamicExtensions.GetDynamicMemberNames(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            获取动态对象中成员名称的枚举。
            </summary>
            <param name="dynamicProvider">一个动态对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DynamicExtensions.TryGetMember(System.Dynamic.IDynamicMetaObjectProvider,System.String,System.Object@)">
            <summary>
            尝试获取动态对象中指定名称的属性值。
            </summary>
            <param name="dynamicProvider">一个动态对象。</param>
            <param name="name">属性的名称。</param>
            <param name="value">返回值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.DynamicExtensions.TrySetMember(System.Dynamic.IDynamicMetaObjectProvider,System.String,System.Object)">
            <summary>
            尝试设置动态对象中指定名称的属性值。
            </summary>
            <param name="dynamicProvider">一个动态对象。</param>
            <param name="name">属性的名称。</param>
            <param name="value">设置值。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.EnumerableExtension">
            <summary>
            枚举器扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.EnumerableExtension.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将一个序列转换为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.EnumerableExtension.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            判断序列中是否有元素。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            枚举序列中的所有元素，并执行指定的方法。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:Fireasy.Common.Extensions.EnumerableExtension.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            返回一个序列的切片。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.EnumerableExtension.MakeImmutable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            构造一个不可变的序列。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.EnumerableExtension.Enumerable``1(System.Collections.IEnumerable)">
            <summary>
            将一个 <see cref="T:System.Collections.IEnumerable"/> 枚举成泛型 <typeparamref name="T"/> 的枚举。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.EnumExtension">
            <summary>
            枚举相关的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.EnumExtension.GetDescription(System.Enum)">
            <summary>
            根据枚举值获取对应的枚举项对应的显示文本，<br/>
            枚举需要使用 <see cref="T:Fireasy.Common.EnumDescriptionAttribute"/> 进行描述。
            </summary>
            <param name="value">枚举项。</param>
            <returns>枚举项对应的显示文本。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.EnumExtension.GetEnumList(System.Type,System.Int32)">
            <summary>
            获取枚举类型所有的显示文本－值对并填充到IList接口对象中，<br/>
            枚举需要使用 <see cref="T:Fireasy.Common.EnumDescriptionAttribute"/> 进行描述。
            </summary>
            <param name="enumType">枚举类型。</param>
            <param name="flags">标志位，使用 <see cref="T:Fireasy.Common.EnumDescriptionAttribute"/> 标识。</param>
            <returns>显示文本——值对，可以把返回的内容直接绑定到控件上。</returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.ExpressionExtensions">
            <summary>
            表达式的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个表示两个表达式相等的表达式。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个表示两个表达式不相等的表达式。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个表示大于的表达式。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个表示大于等于的表达式。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个表示小于的表达式。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个表示小于等于的表达式。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个按与运算的表达式。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个按或运算的表达式。
            </summary>
            <param name="expression1"></param>
            <param name="expression2"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.ConvertExpressions(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            转换两个表达式。如果其中一个是可空类型，则转换另一个为可空类型。
            </summary>
            <param name="expression1"></param>
            <param name="expression2"></param>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用 And 运算合并另一个表达式。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="current"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用 Or 运算合并另一个表达式。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="current"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.And``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            使用 And 运算合并另一个表达式。
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="current"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.Or``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            使用 Or 运算合并另一个表达式。
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="current"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.And``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            使用 And 运算合并另一个表达式。
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="current"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ExpressionExtensions.Or``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            使用 Or 运算合并另一个表达式。
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="current"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.GenericExtension">
            <summary>
            基本扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.IsNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.AssertNotNull``2(System.Nullable{``0},System.Func{``0,``1})">
            <summary>
            检查可空类型的值是否为空，如果不为空，则调用委托函数返回结果。
            </summary>
            <typeparam name="TSource">对象类型。</typeparam>
            <typeparam name="TReturn">返回的类型</typeparam>
            <param name="value">要查检的值。</param>
            <param name="func">值不为空时调用的函数。</param>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.AssertNotNull``1(``0,System.Action{``0})">
            <summary>
            检查对象是否为空，如果不为空，则调用委托方法。
            </summary>
            <typeparam name="TSource">结构类型。</typeparam>
            <param name="value">要查检的值。</param>
            <param name="action">值不为空时调用的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.AssertNotNull``2(``0,System.Func{``0,``1})">
            <summary>
            检查对象是否为空，如果不为空，则调用委托函数返回结果。
            </summary>
            <typeparam name="TSource">结构类型。</typeparam>
            <typeparam name="TReturn">返回的类型</typeparam>
            <param name="value">要查检的值。</param>
            <param name="func">值不为空时调用的函数。</param>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.TryDispose(System.Object)">
            <summary>
            尝试释放对象占用的资源。
            </summary>
            <param name="disobj"></param>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.As``1(System.Object)">
            <summary>
            将对象转换为 T 类型，如果对象不支持转换，则返回 null。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.As``1(System.Object,System.Action{``0},System.Action)">
            <summary>
            将对象转换为 T 类型，如果对象不支持转换，则返回 null。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="action"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.As``2(System.Object,System.Func{``0,``1})">
            <summary>
            将对象转换为 T 类型，如果对象不支持转换，则返回 null。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="obj"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.Is``1(System.Object)">
            <summary>
            判断对象是否可以转换为 T 类型。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.ToStringSafely(System.Object)">
            <summary>
            输出对象的字符串表示方法，对象为 null 时仍然返回一个字符串。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.IsBetween``1(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.Boolean,System.Boolean)">
            <summary>
            判断值是否在范围内。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">要判断的值。</param>
            <param name="lowerBound">下标。</param>
            <param name="upperBound">上标。</param>
            <param name="comparer"><typeparamref name="T"/> 的比较器。</param>
            <param name="includeLowerBound">是否包含下标。</param>
            <param name="includeUpperBound">是否包含上标。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.To``2(``0,``1)">
            <summary>
            将对象转换为指定的类型。
            </summary>
            <typeparam name="TSource">对象的类型。</typeparam>
            <typeparam name="TTarget">要转换的类型。</typeparam>
            <param name="source">源对象。</param>
            <param name="defaultValue">转换失败后返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.To``2(``0,Fireasy.Common.Mapper.ConvertMapper{``0,``1})">
            <summary>
            将对象转换为指定的类型。
            </summary>
            <typeparam name="TSource">对象的类型。</typeparam>
            <typeparam name="TTarget">要转换的类型。</typeparam>
            <param name="source">源对象。</param>
            <param name="mapper">转换器。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.To``1(System.Object,``0)">
            <summary>
            将对象转换为指定的类型。
            </summary>
            <typeparam name="TTarget">要转换的对象类型。</typeparam>
            <param name="value">源对象。</param>
            <param name="defaultValue">转换失败后返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.ToType(System.Object,System.Type,System.Object,Fireasy.Common.Mapper.ConvertMapper)">
            <summary>
            将对象转换为指定的类型。
            </summary>
            <param name="value">源对象。</param>
            <param name="conversionType">要转换的对象类型。</param>
            <param name="defaultValue">转换失败后返回的默认值。</param>
            <param name="mapper">转换器。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.Extend(System.Object,System.Object)">
            <summary>
            使用另一个对象对源对象进行扩展，这类似于 jQuery 中的 extend 方法。
            </summary>
            <param name="source">源对象。</param>
            <param name="other">用于扩展的另一个对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.ExtendAs``1(System.Object,System.Object)">
            <summary>
            使用另一个对象对源对象进行扩展，生成类型 <typeparamref name="TTarget"/> 的对象。
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="source">源对象。</param>
            <param name="other">用于扩展的另一个对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.ToDynamic(System.Object)">
            <summary>
            将一个匿名类型的对象转换为类型为 <see cref="T:System.Dynamic.ExpandoObject"/> 的动态对象。使用 <see cref="T:Fireasy.Common.ComponentModel.DynamicObjectTypeDescriptionProvider"/> 类型进行元数据补充。
            </summary>
            <param name="source">一个匿名类型对象。</param>
            <returns>如果 <paramref name="source"/> 为非匿名类型对象，则为其自身。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.Compare(System.Object,System.Action{System.Reflection.PropertyInfo,System.Object})">
            <summary>
            比较对象与它默认实例具有差异的属性。
            </summary>
            <param name="obj"></param>
            <param name="action"></param>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.ToJson``1(``0,Fireasy.Common.Serialization.JsonSerializeOption)">
            <summary>
            将对象序列化为 Json 字符串。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.FromJson``1(System.String,Fireasy.Common.Serialization.JsonSerializeOption)">
            <summary>
            从 Json 字符串。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.BuildNewObjectType(System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            使用指定的属性集合创建新的对象类型。
            </summary>
            <param name="newTypeName"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.CloneTo(System.Object,System.Type,Fireasy.Common.Mapper.ConvertMapper)">
            <summary>
            将对象克隆为指定类型的实例。
            </summary>
            <param name="obj"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.GenericExtension.ReadObjectValues``2(``0,``1,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            读取两个对象的属性值。
            </summary>
            <typeparam name="TS"></typeparam>
            <typeparam name="TO"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.ImageExtensions">
            <summary>
            图像扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.ImageExtensions.Thumb(System.Drawing.Image,System.Int32,System.Int32,Fireasy.Common.Drawing.ThumbnailStyle)">
            <summary>
            生成缩略图。
            </summary>
            <param name="image">源图像。</param>
            <param name="width">缩略图宽度。</param>
            <param name="height">缩略图高度。</param>
            <param name="style">缩略图样式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ImageExtensions.Zoom(System.Drawing.Image,System.Single)">
            <summary>
            等比例缩放图像。
            </summary>
            <param name="image">源图像。</param>
            <param name="scale">缩放的比例。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ImageExtensions.Zoom(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            使用限制的范围大小来缩放图像。
            </summary>
            <param name="image">源图像。</param>
            <param name="width">限制的宽度。</param>
            <param name="height">限制的高度。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ImageExtensions.Compress(System.Drawing.Image,System.Int32,Fireasy.Common.Drawing.CompressFormat)">
            <summary>
            压缩图像，压缩后图像的质量的大小都会降低。
            </summary>
            <param name="image">源图像。</param>
            <param name="quality">压缩质量，取值为 0-100。</param>
            <param name="format">压缩的格式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ImageExtensions.Compress(System.Drawing.Image,System.IO.Stream,System.Int32,Fireasy.Common.Drawing.CompressFormat)">
            <summary>
            压缩图像到流容器，压缩后图像的质量的大小都会降低。
            </summary>
            <param name="image">源图像。</param>
            <param name="stream">流容器。</param>
            <param name="quality">压缩质量，取值为 0-100。</param>
            <param name="format">压缩的格式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ImageExtensions.SaveToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            保存到流容器。
            </summary>
            <param name="image">源图像。</param>
            <param name="format">输出的图片格式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ImageExtensions.GetCenterRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取居中显示的绘制矩形。
            </summary>
            <param name="imgWidth"></param>
            <param name="imgHeight"></param>
            <param name="thuWidth"></param>
            <param name="thuHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ImageExtensions.GetZoomRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取等比例缩放的绘制矩形。
            </summary>
            <param name="imgWidth"></param>
            <param name="imgHeight"></param>
            <param name="thuWidth"></param>
            <param name="thuHeight"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.MathExtension">
            <summary>
            相关数学函数的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.MathExtension.Round(System.Double,System.Int32,Fireasy.Common.Extensions.RoundType)">
            <summary>
            将小数按照指定的小数位数舍入。
            </summary>
            <param name="value"></param>
            <param name="decimals"></param>
            <param name="roundType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.MathExtension.Variance(System.Int32[],System.Func{System.Double,System.Double,System.Double})">
            <summary>
            计算一组数值的方差。
            </summary>
            <param name="array">要计算的数组。</param>
            <param name="weightFunc">加权函数。第一个参数为当前的数值，第二个参数 double 为数组的平均值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.MathExtension.Variance(System.Decimal[],System.Func{System.Double,System.Double,System.Double})">
            <summary>
            计算一组数值的方差。
            </summary>
            <param name="array">要计算的数组。</param>
            <param name="weightFunc">加权函数。第一个参数为当前的数值，第二个参数 double 为数组的平均值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.MathExtension.Variance(System.Single[],System.Func{System.Double,System.Double,System.Double})">
            <summary>
            计算一组数值的方差。
            </summary>
            <param name="array">要计算的数组。</param>
            <param name="weightFunc">加权函数。第一个参数为当前的数值，第二个参数 double 为数组的平均值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.MathExtension.Variance(System.Double[],System.Func{System.Double,System.Double,System.Double})">
            <summary>
            计算一组数值的方差。
            </summary>
            <param name="array">要计算的数组。</param>
            <param name="weightFunc">加权函数。第一个参数为当前的数值，第二个参数 double 为数组的平均值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.MathExtension.Median``1(``0[])">
            <summary>
            求一组数值的中位数。
            </summary>
            <param name="array">要计算的数组。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.RoundType">
            <summary>
            小数位舍入的方式。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.EightNine">
            <summary>
            八舍九入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.FiveSix">
            <summary>
            五舍六入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.FourFive">
            <summary>
            四舍五入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.None">
            <summary>
            九舍不入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.OneTow">
            <summary>
            一舍二入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.SevenEight">
            <summary>
            七舍八入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.SixSeven">
            <summary>
            六舍七入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.ThreeFour">
            <summary>
            三舍四入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.TowThree">
            <summary>
            二舍三入。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Extensions.RoundType.ZeroOne">
            <summary>
            零舍一入。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Extensions.NumericExtension">
            <summary>
            数字相关的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.NumericExtension.GetIntegerPart(System.Decimal)">
            <summary>
            获取数值的整数部份。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.NumericExtension.GetIntegerPart(System.Double)">
            <summary>
            获取数值的整数部份。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.NumericExtension.GetDecimalPart(System.Decimal)">
            <summary>
            获取数值的整数部份。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.NumericExtension.GetDecimalPart(System.Double)">
            <summary>
            获取数值的整数部份。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.NumericExtension.ToUpper(System.Decimal)">
            <summary>
            将数字转换为用人民币大写表示的字符串。
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.NumericExtension.ToUpper(System.Double)">
            <summary>
            将数字转换为用人民币大写表示的字符串。
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.ReflectionExtension">
            <summary>
            反射的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.ParseType(System.String)">
            <summary>
            获取 <see cref="T:System.Type"/> 对象。
            </summary>
            <param name="typeName">类型的名称。</param>
            <returns>一个 <see cref="T:System.Type"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.New``1(System.Type,System.Object[])">
            <summary>
            创建指定类型的实例对象，并转换为类型 <typeparamref name="T"/> 的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.New(System.Type,System.Object[])">
            <summary>
            创建指定类型的实例对象。
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetDefaultValue(System.Type)">
            <summary>
            获取类型的默认值。
            </summary>
            <param name="type">源类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.IsNullableType(System.Type)">
            <summary>
            判断类型是否为可空。
            </summary>
            <param name="type">源类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.IsConcreteType(System.Type)">
            <summary>
            判断类型是否为实现类，即区别于抽象的类型。
            </summary>
            <param name="type">源类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetHierarchyTypes(System.Type)">
            <summary>
            获取指定类型的继承层次，包括实现的接口。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.EachBaseTypes(System.Type)">
            <summary>
            枚举出指定类型的所有父类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetNonNullableType(System.Type)">
            <summary>
            获取 <see cref="T:System.Nullable"/> 类型中的类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetNullableType(System.Type)">
            <summary>
            包装类型的 <see cref="T:System.Nullable"/> 类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.IsNumericType(System.Type)">
            <summary>
            判断类型是否为数字类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetGenericImplementType(System.Type,System.Type)">
            <summary>
            获取实现泛型定义类型的基类或接口。
            </summary>
            <param name="type"></param>
            <param name="genericDefinitionType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetImplementType(System.Type,System.Type)">
            <summary>
            在父类结构中搜索实现接口类的类型。
            </summary>
            <param name="type">源类型。</param>
            <param name="interfaceType">接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.IsImplementInterface(System.Type,System.Type)">
            <summary>
            判断类型是否实现了指定的接口类型。
            </summary>
            <param name="type">源类型。</param>
            <param name="interfaceType">接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.IsDirectImplementInterface(System.Type,System.Type)">
            <summary>
            判断类型是否直接地实现了指定的接口类型。
            </summary>
            <param name="type">源类型。</param>
            <param name="interfaceType">接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetDirectImplementInterface(System.Type,System.Type)">
            <summary>
            获取直接实现指定接口类的接口。
            </summary>
            <param name="type">源类型。</param>
            <param name="interfaceType">接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.IsAnonymousType(System.Type)">
            <summary>
            判断是否为匿名类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetEnumerableElementType(System.Type)">
            <summary>
            查找枚举器 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 的元素类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetEnumerableType(System.Type)">
            <summary>
            获取元素的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            获取 <see cref="T:System.Reflection.MemberInfo"/> 的类型。
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            获取 <see cref="T:System.Reflection.MemberInfo"/> 的值。
            </summary>
            <param name="member"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            获取自定义特性组。
            </summary>
            <typeparam name="T">自定义特性类型。</typeparam>
            <param name="provider">要搜索的特性类型。</param>
            <param name="inherit">指定是否搜索该成员的继承链以查找这些特性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.IsDefined``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            判定是否定义了自定义特性。
            </summary>
            <typeparam name="T">自定义特性类型。</typeparam>
            <param name="provider">要搜索的特性类型。</param>
            <param name="inherit">指定是否搜索该成员的继承链以查找这些特性。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.BuildImplementType(System.Type)">
            <summary>
            构造一个实现类。
            </summary>
            <param name="definedType">定义的接口或父类。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.FastGetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            高效地获取指定属性的值。
            </summary>
            <param name="property">要操作的属性。</param>
            <param name="instance">实例对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.FastSetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            高效地设置指定属性的值。
            </summary>
            <param name="property">要操作的属性。</param>
            <param name="instance">实例对象。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.FastGetValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            高效地获取指定字段的值。
            </summary>
            <param name="field">要操作的字段。</param>
            <param name="instance">实例对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.FastInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            高效地执行指定的方法。
            </summary>
            <param name="method">要操作的方法。</param>
            <param name="instance">实例对象。</param>
            <param name="arguments">方法的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.FastInvoke(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            高效地执行指定的构造函数。
            </summary>
            <param name="constructor">要操作的构造函数。</param>
            <param name="arguments">构造函数的参数。</param>
        </member>
        <member name="M:Fireasy.Common.Extensions.ReflectionExtension.GetDefinedProperties(System.Type)">
            <summary>
            获取接口定义的属性。
            </summary>
            <param name="interfaceType">接口类型。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.StreamExtensions">
            <summary>
            流的扩展。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.StreamExtensions.Read(System.IO.Stream,System.Action{System.Byte[],System.Int32,System.Int32},System.Int32)">
            <summary>
            从流对象中分段读取字节数组。
            </summary>
            <param name="stream">流对象。</param>
            <param name="readAction">每次读到的数据放入缓冲区。</param>
            <param name="bufferSize">缓冲区大小。</param>
        </member>
        <member name="M:Fireasy.Common.Extensions.StreamExtensions.WriteTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            将一个流对象的内容写入到目标流中。
            </summary>
            <param name="stream">流对象。</param>
            <param name="targetStream">目标流。</param>
            <param name="bufferSize">缓冲区大小。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StreamExtensions.CopyToMemory(System.IO.Stream)">
            <summary>
            将流内容复制到 <see cref="T:System.IO.MemoryStream"/> 对象中。
            </summary>
            <param name="stream">流对象。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.StringExtension">
            <summary>
            字符串相关的扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.Left(System.String,System.Int32)">
            <summary>
            截取字符串左边的n个字符。
            </summary>
            <param name="source"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.Right(System.String,System.Int32)">
            <summary>
            截取字符串右边的n个字符。
            </summary>
            <param name="source"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.Like(System.String,System.String)">
            <summary>
            判断字符串是否满足通配符。
            </summary>
            <param name="source"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.GetAnsiLength(System.String)">
            <summary>
            获取非 Unicode 下的字符串长度，即一个汉字占两个长度。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.ToSBC(System.String)">
            <summary>
            将字符串转换为全角编码 SBC。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.ToDBC(System.String)">
            <summary>
            将字符串转换为半角编码 DBC。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.ToSingular(System.String)">
            <summary>
            单词变成单数形式。
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.ToPlural(System.String)">
            <summary>
            单词变成复数形式。
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.IsNumeric(System.String)">
            <summary>
            判断指定的字符是否是数字。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.IsInteger(System.String)">
            <summary>
            判断指定的字符是否是整数。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.DeUnicode(System.String)">
            <summary>
            将形如 \u3232 类似的字符串转换为字符串显示。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.IsMatch(System.String,System.String,System.Boolean)">
            <summary>
            判断指定的字符串是否与表达式匹配。
            </summary>
            <param name="source"></param>
            <param name="pattern"></param>
            <param name="ignorCase"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.ToSimplified(System.String)">
            <summary>
            将字符串转换为简体中文表示。
            </summary>
            <param name="source">要转换的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.ToTraditional(System.String)">
            <summary>
            将字符串转换为繁体中文表示。
            </summary>
            <param name="source">要转换的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.ToPinyin(System.String)">
            <summary>
            将中文字符转换为汉语拼音的首字母。
            </summary>
            <param name="source">将要转换的字符串。</param>
            <returns>转换后的字符串。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.ToFullPinyin(System.String)">
            <summary>
            将中文字符转换为汉语拼音的全拼。
            </summary>
            <param name="source">将要转换的字符串。</param>
            <returns>转换后的字符串。</returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.StringExtension.GetLines(System.String)">
            <summary>
            获取字符串中换行的个数。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.TreeNodeExtensions.Expand``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0}},System.Int32)">
            <summary>
            逐级找出子节点。
            </summary>
            <param name="nodes">当前的节点集合。</param>
            <param name="parents">父节点ID集合。</param>
            <param name="factory">生成节点的函数。</param>
            <param name="index">控制从后向前推进的索引值。</param>
        </member>
        <member name="T:Fireasy.Common.Extensions.TreeNodeExpandChecker">
            <summary>
            用于检查是否在线程内递归调用 TreeNodeExtensions.Expand 方法，有利于减少不必要的数据操作。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.TreeNodeExpandChecker.IsExpanded">
            <summary>
            判断是否使用过 TreeNodeExtensions.Expand 方法。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Extensions.XmlExtension">
            <summary>
            Xml的相关扩展方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Extensions.XmlExtension.GetValue``1(System.Xml.XmlAttribute)">
            <summary>
            获取 <see cref="T:System.Xml.XmlAttribute"/> 的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.XmlExtension.GetAttributeValue``1(System.Xml.XmlNode,System.String)">
            <summary>
            获取属性的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.XmlExtension.GetAttributeValue``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            获取属性的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.XmlExtension.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            获取属性的值。
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Extensions.XmlExtension.EachChildren(System.Xml.XmlNode,System.String,System.Action{System.Xml.XmlNode})">
            <summary>
            循环节点的子节点列表。
            </summary>
            <param name="node"></param>
            <param name="path"></param>
            <param name="action"></param>
        </member>
        <member name="M:Fireasy.Common.Extensions.XmlExtension.ToCDATA(System.String)">
            <summary>
            将字符串转换为 CDATA。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Guard">
            <summary>
            提供对程序的异常检查。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Guard.NullReference(System.Object,System.String)">
            <summary>
            检查对象是否为 null。
            </summary>
            <param name="obj">要检查的对象。</param>
            <param name="message">异常的提示信息。</param>
            <exception cref="T:System.ArgumentException">对象为 null。</exception>
        </member>
        <member name="M:Fireasy.Common.Guard.ArgumentNull(System.Object,System.String,System.String)">
            <summary>
            检查参数是否为 null。
            </summary>
            <param name="obj">要检查的参数对象。</param>
            <param name="paramName">参数的名称。</param>
            <param name="message">异常的提示信息。</param>
            <exception cref="T:System.ArgumentNullException">参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Common.Guard.Argument(System.Boolean,System.String,System.String)">
            <summary>
            检查参数是否无效。
            </summary>
            <param name="predicate">测试的函数。</param>
            <param name="paramName">参数的名称。</param>
            <param name="message">异常的提示信息。</param>
            <exception cref="T:System.ArgumentException">函数未成功。</exception>
        </member>
        <member name="M:Fireasy.Common.Guard.OutOfRange(System.Int32,System.Int32,System.String)">
            <summary>
            检查给定的索引值是否超出范围。
            </summary>
            <param name="range">给定的范围。</param>
            <param name="index">要检查的索引值。</param>
            <param name="message">异常的提示信息。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">参数无效。</exception>
        </member>
        <member name="M:Fireasy.Common.Guard.Assert(System.Boolean,System.Exception)">
            <summary>
            检查条件，如果为 false 则引发指定类型的异常。
            </summary>
            <param name="condition">条件是否成立。</param>
            <param name="exception">抛出的异常对象。</param>
        </member>
        <member name="T:Fireasy.Common.Ioc.Configuration.ContainerConfigurationSection">
            <summary>
            表示容器的配置节。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Ioc.Configuration.ContainerConfigurationSection.Initialize(System.Xml.XmlNode)">
            <summary>
            使用配置节点对当前配置进行初始化。
            </summary>
            <param name="section">对应的配置节点。</param>
        </member>
        <member name="T:Fireasy.Common.Ioc.Configuration.ContainerConfigurationSetting">
            <summary>
            表示容器的配置信息。无法继承此类。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.Configuration.ContainerConfigurationSetting.Name">
            <summary>
            获取或设置配置的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.Configuration.ContainerConfigurationSetting.Registrations">
            <summary>
            获取服务与组件的注册键对。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Ioc.Configuration.RegistrationSetting">
            <summary>
            表示服务与组件的注册键对。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.Configuration.RegistrationSetting.ServiceType">
            <summary>
            获取或设置服务的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.Configuration.RegistrationSetting.ImplementationType">
            <summary>
            获取或设置实现的类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.Configuration.RegistrationSetting.Assembly">
            <summary>
            获取或设置程序集。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.Configuration.RegistrationSetting.Singleton">
            <summary>
            获取或设置是否单例。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Ioc.Container">
            <summary>
            控制反转的容器，用于存放描述组件与服务的联系。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Register``2">
            <summary>
            注册服务类型及实现类型，<typeparamref name="TImplementation"/> 是 <typeparamref name="TService"/> 的实现类。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <typeparam name="TImplementation">实现类型。</typeparam>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Register``2(Fireasy.Common.Ioc.Lifetime)">
            <summary>
            注册服务类型及实现类型，<typeparamref name="TImplementation"/> 是 <typeparamref name="TService"/> 的实现类。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <typeparam name="TImplementation">实现类型。</typeparam>
            <param name="lifetime">生命周期。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Register(System.Type,System.Type)">
            <summary>
            注册服务类型及实现类型，<paramref name="implementationType"/> 是 <paramref name="serviceType"/> 的实现类。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="implementationType">实现类型。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Register(System.Type,System.Type,Fireasy.Common.Ioc.Lifetime)">
            <summary>
            注册服务类型及实现类型，<paramref name="implementationType"/> 是 <paramref name="serviceType"/> 的实现类。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="implementationType">实现类型。</param>
            <param name="lifetime">生命周期。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Register``1(System.Func{``0})">
            <summary>
            使用服务对象的构造器注册它的服务类型。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="instanceCreator">实例的构造方法。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Register(System.Type,System.Func{System.Object})">
            <summary>
            使用服务对象的构造器注册它的服务类型。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="instanceCreator">实例的构造方法。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.RegisterSingleton``1(System.Func{``0})">
            <summary>
            使用服务对象的构造器注册它的服务类型，该对象是一个单例。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="instanceCreator">实例的构造方法。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.RegisterSingleton``1(``0)">
            <summary>
            使用服务对象的实例注册它的服务类型，该对象是一个单例。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="instance">类型 <typeparamref name="TService"/> 的实例。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.RegisterSingleton(System.Type,System.Func{System.Object})">
            <summary>
            使用服务对象的构造器注册它的服务类型，该对象是一个单例。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="instanceCreator">实例的构造方法。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.RegisterSingleton``2">
            <summary>
            使用服务对象的构造器注册它的服务类型，该对象是一个单例。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <typeparam name="TImplementation">实现类型。</typeparam>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.RegisterSingleton(System.Type,System.Type)">
            <summary>
            使用服务对象的构造器注册它的服务类型，该对象是一个单例。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="implementationType">实现类型。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.RegisterAssembly(System.Reflection.Assembly,Fireasy.Common.Ioc.Lifetime)">
            <summary>
            遍列程序集中的所有类型，以其接口类型注册服务类型。
            </summary>
            <param name="assembly">程序集。</param>
            <param name="lifetime">生命周期。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.RegisterAssembly(System.String,Fireasy.Common.Ioc.Lifetime)">
            <summary>
            遍列程序集中的所有类型，以其接口类型注册服务类型。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="lifetime">生命周期。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.UnRegister``1">
            <summary>
            注销该服务登记。
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.UnRegister(System.Type)">
            <summary>
            注销该服务登记。
            </summary>
            <param name="serviceType">服务类型。</param>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Clear">
            <summary>
            清除容器内的所有注册的服务类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Resolve``1">
            <summary>
            解析出类型 <typeparamref name="TService"/> 的实例。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <returns>类型的实例对象。如果没有注册，则为 null。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Resolve(System.Type)">
            <summary>
            解析出类型 <paramref name="serviceType"/> 的实例。
            </summary>
            <param name="serviceType">服务类型。</param>
            <returns>类型的实例对象。如果没有注册，则为 null。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.GetRegistrations">
            <summary>
            获取此容器中注册的所有 <see cref="T:Fireasy.Common.Ioc.IRegistration"/>。
            </summary>
            <returns>所有在该容器注册的注册器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.GetRegistrations``1">
            <summary>
            获取指定类型的 <see cref="T:Fireasy.Common.Ioc.IRegistration"/> 实例。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <returns>类型的注册器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.GetRegistrations(System.Type)">
            <summary>
            获取指定类型的 <see cref="T:Fireasy.Common.Ioc.IRegistration"/> 实例。
            </summary>
            <param name="serviceType">服务类型。</param>
            <returns>类型的注册器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.IsRegistered``1">
            <summary>
            判断服务类是否已注册。
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.IsRegistered(System.Type)">
            <summary>
            判断服务类是否已注册。
            </summary>
            <param name="serviceType">服务类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.RegisterInitializer``1(System.Action{``0})">
            <summary>
            注册类型 <typeparamref name="TService"/> 的初始化器。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <param name="instanceInitializer">初始化器的构造方法。</param>
            <returns>当前的 IOC 容器。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.GetInitializer``1">
            <summary>
            获取类型 <typeparamref name="TService"/> 的初始化器。
            </summary>
            <typeparam name="TService">服务类型。</typeparam>
            <returns>一个初始化器（如果注册过），否则为 null。</returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Config(System.String,System.String)">
            <summary>
            通过 XML 配置文件进行注册。
            </summary>
            <param name="path">文件路径。</param>
            <param name="pattern">文件通配符。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.Config(System.String)">
            <summary>
            通过配置文件进行注册。
            </summary>
            <param name="configFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Ioc.Container.IsEnumerableResolve(System.Type)">
            <summary>
            判断是否需要反转为 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 类型的对象。
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Ioc.ContainerUnity">
            <summary>
            IOC 容器的管理单元。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Ioc.ContainerUnity.GetContainer(System.String)">
            <summary>
            获取指定名称的 IOC 容器，如果该容器不存在，则创建新的容器。<paramref name="name"/> 为 null 时返回 <see cref="!:Container.Instance"/> 实例。
            该方法将使用 <paramref name="name"/> 在 <see cref="T:Fireasy.Common.Ioc.Configuration.ContainerConfigurationSection"/> 中检索被映射的反转定义，将服务类型登记到容器中。
            </summary>
            <param name="name">用于标记容器的名称。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Ioc.IgnoreInjectPropertyAttribute">
            <summary>
            表示在解析实例时，该属性将被忽略，容器不会解析此属性类型的对象来设置属性值。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Ioc.IgnoreRegisterAttribute">
            <summary>
            表示忽略该接口类型被发现并注册到容器中。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Ioc.InstanceInitializer">
            <summary>
            实例初始化器。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.InstanceInitializer.ServiceType">
            <summary>
            获取或设置服务类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.InstanceInitializer.Action">
            <summary>
            获取或设置该服务类型的实例。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Ioc.IRegistration">
            <summary>
            提供对服务类的登记以及解析。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.IRegistration.ServiceType">
            <summary>
            获取登记的服务类型，一般为一个接口或抽象类。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Ioc.IRegistration.ImplementationType">
            <summary>
            获取实现的类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Ioc.IRegistration.Resolve">
            <summary>
            从容器里解析出实现类的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Ioc.Lifetime">
            <summary>
            实例的生命周期。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Ioc.Lifetime.Transient">
            <summary>
            瞬时。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Ioc.Lifetime.Singleton">
            <summary>
            单例。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Ioc.Lifetime.Scoped">
            <summary>
            线程范围。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Linq.Expressions.ExpressionVisitor">
            <summary>
            提供对 <see cref="T:System.Linq.Expressions.Expression"/> 对象中各节点的访问方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.LambdaExpression"/>。
            </summary>
            <param name="lambdaExp">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MemberBinding"/>。
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionVisitor.VisitMemberAndExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},System.Collections.ObjectModel.ReadOnlyCollection{System.Reflection.MemberInfo})">
            <summary>
            访问表达式列表。
            </summary>
            <param name="original"></param>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            访问成员绑定集合。
            </summary>
            <param name="original">成员绑定集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ElementInit"/>。
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            访问元素初始值集合。
            </summary>
            <param name="original">元素初始值集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionVisitor.VisitUnknown(System.Linq.Expressions.Expression)">
            <summary>
            访问未知类型的表达式。
            </summary>
            <param name="expression">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Linq.Expressions.ExpressionWriter">
            <summary>
            用于将表达式树使用字符串表示。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.#ctor(System.IO.TextWriter)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Linq.Expressions.ExpressionWriter"/> 类的新实例。
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.Write(System.IO.TextWriter,System.Linq.Expressions.Expression)">
            <summary>
            将表达式树写入到指定的 <see cref="T:System.IO.TextWriter"/> 对象中。
            </summary>
            <param name="writer"></param>
            <param name="expression"></param>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.WriteToString(System.Linq.Expressions.Expression)">
            <summary>
            将表达式树转换为字符串表示。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Linq.Expressions.ExpressionWriter.Indentation">
            <summary>
            语法的缩进方式。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Linq.Expressions.ExpressionWriter.Indentation.Same">
            <summary>
            以前一个缩进保持一致。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Linq.Expressions.ExpressionWriter.Indentation.Inner">
            <summary>
            内缩进。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Linq.Expressions.ExpressionWriter.Indentation.Outer">
            <summary>
            外缩进。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Linq.Expressions.ExpressionWriter.IndentationWidth">
            <summary>
            获取或设置缩进的字符宽度。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.WriteLine(Fireasy.Common.Linq.Expressions.ExpressionWriter.Indentation)">
            <summary>
            向编码器中写入一个空行。
            </summary>
            <param name="style">缩进方式。</param>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.Write(System.String)">
            <summary>
            向编码器中写入一个字符串。
            </summary>
            <param name="text">字符串。</param>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.Indent(Fireasy.Common.Linq.Expressions.ExpressionWriter.Indentation)">
            <summary>
            控制编码器缩进。
            </summary>
            <param name="style">缩进方式。</param>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            获取指定运算的操作符。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.BinaryExpression"/> 表达式。
            </summary>
            <param name="b"><see cref="T:System.Linq.Expressions.BinaryExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.UnaryExpression"/> 表达式。
            </summary>
            <param name="u"><see cref="T:System.Linq.Expressions.UnaryExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.GetTypeName(System.Type)">
            <summary>
            获取表示泛型类型或匿名类型的名称的字符串。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ConditionalExpression"/> 表达式。
            </summary>
            <param name="c"><see cref="T:System.Linq.Expressions.ConditionalExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            访问成员绑定集合。
            </summary>
            <param name="original">成员绑定集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ConstantExpression"/> 表达式。
            </summary>
            <param name="c"><see cref="T:System.Linq.Expressions.ConstantExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ElementInit"/>。
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            访问元素初始值集合。
            </summary>
            <param name="original">元素初始值集合。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitMemberAndExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},System.Collections.ObjectModel.ReadOnlyCollection{System.Reflection.MemberInfo})">
            <summary>
            访问表达式列表。
            </summary>
            <param name="original"></param>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.InvocationExpression"/>。
            </summary>
            <param name="iv">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.LambdaExpression"/>。
            </summary>
            <param name="lambda">要访问的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ListInitExpression"/> 表达式。
            </summary>
            <param name="init"><see cref="T:System.Linq.Expressions.ListInitExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MemberExpression"/> 表达式。
            </summary>
            <param name="m"><see cref="T:System.Linq.Expressions.MemberExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MemberAssignment"/> 表达式。。
            </summary>
            <param name="assignment"><see cref="T:System.Linq.Expressions.MemberAssignment"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MemberInitExpression"/> 表达式。
            </summary>
            <param name="init"><see cref="T:System.Linq.Expressions.MemberInitExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MemberListBinding"/> 表达式。
            </summary>
            <param name="binding"><see cref="T:System.Linq.Expressions.MemberListBinding"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MemberMemberBinding"/> 表达式。
            </summary>
            <param name="binding"><see cref="T:System.Linq.Expressions.MemberMemberBinding"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.MethodCallExpression"/> 表达式。
            </summary>
            <param name="m"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.NewExpression"/> 表达式。
            </summary>
            <param name="nex"><see cref="T:System.Linq.Expressions.NewExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.NewArrayExpression"/> 表达式。
            </summary>
            <param name="na"><see cref="T:System.Linq.Expressions.NewArrayExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ParameterExpression"/> 表达式。
            </summary>
            <param name="p"><see cref="T:System.Linq.Expressions.ParameterExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.ExpressionWriter.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> 表达式。
            </summary>
            <param name="b"><see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Linq.Expressions.PartialEvaluator">
            <summary>
            用于计算表达式中的常量表达式。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.PartialEvaluator.Eval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            计算表达式中的常量表达式。
            </summary>
            <param name="expression">要计算的表达式。</param>
            <param name="canBeEvaluatedLocally">一个函数，指示哪些表达式可以被计算。</param>
            <returns></returns>
            <remarks>
            <para>如有以下的表达式：</para>
            <para>var v = new { People = new { Age = 34 } };</para>
            <para>var exp = s =&gt; s.Age == v.People.Age || s.Age == new { Age = 56 }.Age;</para>
            <para>使用该方法计算 exp 后为：</para>
            <para>s =&gt; s.Age == 34 || s.Age == 56;</para>
            </remarks>
        </member>
        <member name="M:Fireasy.Common.Linq.Expressions.PartialEvaluator.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            判断表达式中的常量是否可以被计算。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Localization.ResCategoryAttribute">
            <summary>
            基于内嵌字符串资源的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Localization.ResCategoryAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:System.ComponentModel.CategoryAttribute"/> 类的新实例。
            </summary>
            <param name="name">资源名称。</param>
        </member>
        <member name="M:Fireasy.Common.Localization.ResCategoryAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:System.ComponentModel.CategoryAttribute"/> 类的新实例。
            </summary>
            <param name="resourceName">内嵌资源的名称。</param>
            <param name="name">资源名称。</param>
        </member>
        <member name="M:Fireasy.Common.Localization.ResCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            获取指定类别的本地化名称。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Localization.ResDescriptionAttribute">
            <summary>
            基于内嵌字符串资源的 <see cref="T:System.ComponentModel.DescriptionAttribute"/>。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Localization.ResDescriptionAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Localization.ResDescriptionAttribute"/> 类的新实例。
            </summary>
            <param name="name">资源名称。</param>
        </member>
        <member name="M:Fireasy.Common.Localization.ResDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Localization.ResDescriptionAttribute"/> 类的新实例。
            </summary>
            <param name="resourceName">内嵌资源的名称。</param>
            <param name="name">资源名称。</param>
        </member>
        <member name="P:Fireasy.Common.Localization.ResDescriptionAttribute.Description">
            <summary>
            获取存储在此特性中的说明。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Localization.ResDisplayNameAttribute">
            <summary>
            基于内嵌字符串资源的 <see cref="T:System.ComponentModel.DisplayNameAttribute"/>。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Localization.ResDisplayNameAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Localization.ResDisplayNameAttribute"/> 类的新实例。
            </summary>
            <param name="name">资源名称。</param>
        </member>
        <member name="M:Fireasy.Common.Localization.ResDisplayNameAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Localization.ResDisplayNameAttribute"/> 类的新实例。
            </summary>
            <param name="resourceName">内嵌资源的名称。</param>
            <param name="name">资源名称。</param>
        </member>
        <member name="P:Fireasy.Common.Localization.ResDisplayNameAttribute.DisplayName">
            <summary>
            获取属性、事件或不采用此特性中存储的任何参数的公共 void 方法的显示名称。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Localization.StringResource">
            <summary>
            用于访问对内嵌字符串资源中的字符串。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Localization.StringResource.GetString(System.String,System.Object[])">
            <summary>
            从资源中获取指定名称的字符串资源。
            </summary>
            <param name="name">资源的名称。</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Localization.StringResource.Create(System.String,System.Reflection.Assembly,System.Globalization.CultureInfo)">
            <summary>
            创建一个 <see cref="T:Fireasy.Common.Localization.StringResource"/> 实例。
            </summary>
            <param name="resourceName">资源的名称。该名称不包含程序集名称前缀。</param>
            <param name="assembly">资源文件所属的程序集。</param>
            <param name="cultureInfo">指定区域信息。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Logging.Configuration.LoggingConfigurationSection">
            <summary>
            表示日志的配置节。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Logging.Configuration.LoggingConfigurationSection.Initialize(System.Xml.XmlNode)">
            <summary>
            使用配置节点对当前配置进行初始化。
            </summary>
            <param name="section">对应的配置节点。</param>
        </member>
        <member name="P:Fireasy.Common.Logging.Configuration.LoggingConfigurationSection.Level">
            <summary>
            获取或设置日志级别。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Logging.Configuration.LoggingConfigurationSetting">
            <summary>
            日志配置类。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Logging.Configuration.LoggingConfigurationSetting.Name">
            <summary>
            获取或设置配置名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Logging.Configuration.LoggingConfigurationSetting.LogType">
            <summary>
            获取或设置 <see cref="T:Fireasy.Common.Logging.ILogger"/> 的实例类型。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Logging.DefaultLogger">
            <summary>
            默认的日志管理器，将日志记录到文本文件中。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Logging.DefaultLogger.Instance">
            <summary>
            获取 <see cref="T:Fireasy.Common.Logging.DefaultLogger"/> 的静态实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Logging.DefaultLogger.#cctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Logging.DefaultLogger"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Logging.DefaultLogger.Error(System.Object,System.Exception)">
            <summary>
            记录错误信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.DefaultLogger.Info(System.Object,System.Exception)">
            <summary>
            记录一般的信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.DefaultLogger.Warn(System.Object,System.Exception)">
            <summary>
            记录警告信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.DefaultLogger.Debug(System.Object,System.Exception)">
            <summary>
            记录调试信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.DefaultLogger.Fatal(System.Object,System.Exception)">
            <summary>
            记录致命信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.DefaultLogger.Write(System.String,System.Object,System.Exception)">
            <summary>
            将抛出的异常写入到日志记录器。
            </summary>
            <param name="logType">信息类别。</param>
            <param name="message">异常的说明信息。</param>
            <param name="exception">应用程序异常。</param>
        </member>
        <member name="T:Fireasy.Common.Logging.ILogger">
            <summary>
            提供日志记录的方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Logging.ILogger.Error(System.Object,System.Exception)">
            <summary>
            记录错误信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.ILogger.Info(System.Object,System.Exception)">
            <summary>
            记录一般的信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.ILogger.Warn(System.Object,System.Exception)">
            <summary>
            记录警告信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            记录调试信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="M:Fireasy.Common.Logging.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            记录致命信息到日志。
            </summary>
            <param name="message">要记录的信息。</param>
            <param name="exception">异常对象。</param>
        </member>
        <member name="T:Fireasy.Common.Logging.LoggerFactory">
            <summary>
            日志管理器工厂。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Logging.LoggerFactory.CreateLogger(System.String)">
            <summary>
            根据应用程序配置，创建日志管理器。
            </summary>
            <param name="configName">应用程序配置项的名称。</param>
            <returns><paramref name="configName"/>缺省时，如果应用程序未配置，则为 <see cref="T:Fireasy.Common.Logging.DefaultLogger"/>，否则为配置项对应的 <see cref="T:Fireasy.Common.Logging.ILogger"/> 实例。</returns>
        </member>
        <member name="T:Fireasy.Common.Logging.LogLevel">
            <summary>
            日志级别。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Mapper.ConvertMapper">
            <summary>
            源与目标类型的转换器
            </summary>
        </member>
        <member name="P:Fireasy.Common.Mapper.ConvertMapper.SourceType">
            <summary>
            获取或设置来源类型。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Mapper.ConvertMapper.TargetType">
            <summary>
            获取或设置目标类型。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Mapper.ConvertMapper.GetMapExpression(System.Reflection.MemberInfo)">
            <summary>
            获取成员 <paramref name="member"/> 的映射表达式。
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Mapper.ConvertMapper.Map(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <summary>
            添加映射。
            </summary>
            <param name="member"></param>
            <param name="expression"></param>
        </member>
        <member name="T:Fireasy.Common.Mapper.ConvertMapper`2">
            <summary>
            源与目标类型的转换器
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Mapper.ConvertMapper`2.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Mapper.ConvertMapper"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Mapper.ConvertMapper`2.Map``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            添加转换映射。
            </summary>
            <typeparam name="TMember"></typeparam>
            <param name="target">目标表达式，为 <see cref="T:System.Linq.Expressions.MemberExpression"/>。</param>
            <param name="source">来源表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.IObjectReader">
            <summary>
            定义对象读取器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.IObjectReader.GetCanReadProperties">
            <summary>
            获取可以读取值的属性名称序列。
            </summary>
            <returns>所有可以读取值的属性名称序列。</returns>
        </member>
        <member name="M:Fireasy.Common.IObjectReader.ReadValue(System.Object,System.String)">
            <summary>
            获取指定属性的值。
            </summary>
            <param name="instance">要读取的实例。</param>
            <param name="propertyName">要读取的属性的名称。</param>
            <returns>指定属性的值。</returns>
        </member>
        <member name="T:Fireasy.Common.IObjectDescriptorReader">
            <summary>
            表示使用 <see cref="T:System.ComponentModel.TypeDescriptor"/> 来读取属性列表。
            </summary>
        </member>
        <member name="M:Fireasy.Common.IObjectDescriptorReader.GetCanReadProperties(System.Object)">
            <summary>
            获取可以读取值的属性名称序列。
            </summary>
            <param name="instance">实例对象。</param>
            <returns>所有可以读取值的属性名称序列。</returns>
        </member>
        <member name="T:Fireasy.Common.ObjectReader`1">
            <summary>
            提供对指定类型的实例进行值读取的方法。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Common.ObjectReader`1.ReadValues(`0)">
            <summary>
            读取实例的所有值。
            </summary>
            <param name="instance">要读取的实例。</param>
            <returns>所有属性的值。</returns>
        </member>
        <member name="M:Fireasy.Common.ObjectReader`1.ReadValue(`0,System.String)">
            <summary>
            获取指定属性的值。
            </summary>
            <param name="instance">要读取的实例。</param>
            <param name="propertyName">要读取的属性的名称。</param>
            <returns>指定属性的值。</returns>
        </member>
        <member name="M:Fireasy.Common.ObjectReader`1.GetCanReadProperties">
            <summary>
            获取可以读取值的属性名称序列。
            </summary>
            <returns>所有可以读取值的属性名称序列。</returns>
        </member>
        <member name="T:Fireasy.Common.ObjectDescriptorReader">
            <summary>
            使用 <see cref="T:System.ComponentModel.TypeDescriptor"/> 来进行对象的读取。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ObjectDescriptorReader.ReadValues(System.Object)">
            <summary>
            读取实例的所有值。
            </summary>
            <param name="instance">要读取的实例。</param>
            <returns>所有属性的值。</returns>
        </member>
        <member name="M:Fireasy.Common.ObjectDescriptorReader.ReadValue(System.Object,System.String)">
            <summary>
            获取指定属性的值。
            </summary>
            <param name="instance">要读取的实例。</param>
            <param name="propertyName">要读取的属性的名称。</param>
            <returns>指定属性的值。</returns>
        </member>
        <member name="M:Fireasy.Common.ObjectDescriptorReader.GetCanReadProperties(System.Object)">
            <summary>
            获取可以读取值的属性名称序列。
            </summary>
            <returns>所有可以读取值的属性名称序列。</returns>
        </member>
        <member name="M:Fireasy.Common.ObjectDescriptorReader.GetCanReadProperties">
            <summary>
            该方法不受支持。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.ReadWriteLocker">
            <summary>
            提供在多线程环境中进行数据读取和写入的锁。无法继承此类。
            </summary>
        </member>
        <member name="F:Fireasy.Common.ReadWriteLocker.Instance">
            <summary>
            静态实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.ReadWriteLocker.LockRead(System.Action)">
            <summary>
            使用指定的方法进行读操作。
            </summary>
            <param name="method">一个方法，在此方法执行期间将被读锁定。</param>
        </member>
        <member name="M:Fireasy.Common.ReadWriteLocker.LockRead``1(System.Func{``0})">
            <summary>
            使用指定的方法进行读操作。
            </summary>
            <param name="method">一个方法，在此方法执行期间将被读锁定。</param>
            <returns>方法 <paramref name="method"/> 返回的数据。</returns>
        </member>
        <member name="M:Fireasy.Common.ReadWriteLocker.LockWrite(System.Action)">
            <summary>
            使用指定的方法进行写操作。
            </summary>
            <param name="method">一个方法，在此方法执行期间将被写锁定。</param>
        </member>
        <member name="M:Fireasy.Common.ReadWriteLocker.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Fireasy.Common.ReadWriteLocker.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Reflection.ConstructorInvoker">
            <summary>
            包装 <see cref="P:Fireasy.Common.Reflection.ConstructorInvoker.ConstructorInfo"/> 对象，创建一个委托来提升构造函数的执行。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Reflection.ConstructorInvoker.ConstructorInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fireasy.Common.Reflection.ConstructorInvoker.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Reflection.ConstructorInvoker"/> 类的新实例。
            </summary>
            <param name="constructorInfo">要包装的 <see cref="P:Fireasy.Common.Reflection.ConstructorInvoker.ConstructorInfo"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Common.Reflection.ConstructorInvoker.Invoke(System.Object[])">
            <summary>
            使用指定的参数执行构造函数。
            </summary>
            <param name="parameters">构造函数的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Reflection.FieldAccessor">
            <summary>
            包装 <see cref="P:Fireasy.Common.Reflection.FieldAccessor.FieldInfo"/> 对象，创建一个委托来提升字段的读写。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Reflection.FieldAccessor.FieldInfo">
            <summary>
            获取要包装的 <see cref="P:Fireasy.Common.Reflection.FieldAccessor.FieldInfo"/> 对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Reflection.FieldAccessor.#ctor(System.Reflection.FieldInfo)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Reflection.FieldAccessor"/> 类的新实例。
            </summary>
            <param name="fieldInfo">要包装的 <see cref="P:Fireasy.Common.Reflection.FieldAccessor.FieldInfo"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Common.Reflection.FieldAccessor.GetValue(System.Object)">
            <summary>
            获取给定对象的字段的值。
            </summary>
            <param name="instance">实例对象。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Reflection.InvokerBuilder">
            <summary>
            执行器的构造器。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Reflection.MethodInvoker">
            <summary>
            包装 <see cref="P:Fireasy.Common.Reflection.MethodInvoker.MethodInfo"/> 对象，创建一个委托来提升方法的执行。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Reflection.MethodInvoker.MethodInfo">
            <summary>
            获取要包装的 <see cref="P:Fireasy.Common.Reflection.MethodInvoker.MethodInfo"/> 对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Reflection.MethodInvoker.#ctor(System.Reflection.MethodInfo)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Reflection.MethodInvoker"/> 类的新实例。
            </summary>
            <param name="methodInfo">要包装的 <see cref="P:Fireasy.Common.Reflection.MethodInvoker.MethodInfo"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Common.Reflection.MethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            使用指定的参数调用当前实例的方法。
            </summary>
            <param name="instance">实例对象。</param>
            <param name="parameters">方法的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Reflection.PropertyAccessor">
            <summary>
            包装 <see cref="P:Fireasy.Common.Reflection.PropertyAccessor.PropertyInfo"/> 对象，创建一个委托来提升属性的读写。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Reflection.PropertyAccessor.PropertyInfo">
            <summary>
            获取要包装的 <see cref="P:Fireasy.Common.Reflection.PropertyAccessor.PropertyInfo"/> 对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Reflection.PropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Reflection.PropertyAccessor"/> 类的新实例。
            </summary>
            <param name="propertyInfo">要包装的 <see cref="P:Fireasy.Common.Reflection.PropertyAccessor.PropertyInfo"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Common.Reflection.PropertyAccessor.GetValue(System.Object)">
            <summary>
            获取给定对象的属性的值。
            </summary>
            <param name="instance">实例对象。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Reflection.PropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            设置给定对象的属性的值
            </summary>
            <param name="instance">实例对象。</param>
            <param name="value">属性的值。</param>
        </member>
        <member name="T:Fireasy.Common.Reflection.ReflectionCache">
            <summary>
            反射的缓存管理器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Reflection.ReflectionCache.GetAccessor(System.Reflection.FieldInfo)">
            <summary>
            获取字段的访问器。
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Reflection.ReflectionCache.GetAccessor(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的访问器。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Reflection.ReflectionCache.GetInvoker(System.Reflection.MethodInfo)">
            <summary>
            获取方法的执行器。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Reflection.ReflectionCache.GetInvoker(System.Reflection.ConstructorInfo)">
            <summary>
            获取构造函数的执行器。
            </summary>
            <param name="constructor"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Scope`1">
            <summary>
            一个抽象类，在当前线程内标识一组用户定义的数据，这些数据在此线程块内唯一共享。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fireasy.Common.Scope`1.Current">
            <summary>
            获取当前线程范围内的当前实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Scope`1.#ctor(System.Boolean)">
            <summary>
            初始化类的新实例。
            </summary>
            <param name="singleton">是否为单例模式。</param>
        </member>
        <member name="M:Fireasy.Common.Scope`1.SetData``1(System.String,``0)">
            <summary>
            在当前范围内添加一个数据。
            </summary>
            <typeparam name="TData">附加数据的类型。</typeparam>
            <param name="key">键名。</param>
            <param name="data">数据值。</param>
        </member>
        <member name="M:Fireasy.Common.Scope`1.GetData``1(System.String)">
            <summary>
            获取当前范围内指定键名的数据。
            </summary>
            <typeparam name="TData">附加数据的类型。</typeparam>
            <param name="key">键名。</param>
            <returns>返回附加的数据（如果存在）。</returns>
        </member>
        <member name="M:Fireasy.Common.Scope`1.ClearData">
            <summary>
            清除当前范围内的所有数据。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Scope`1.RemoveData(System.String[])">
            <summary>
            清除当前范围内指定键名的数据。
            </summary>
            <param name="keys">一组表示键名的字符串。</param>
        </member>
        <member name="M:Fireasy.Common.Scope`1.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Fireasy.Common.Scope`1.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Security.AsymmetricCrypto">
            <summary>
            提供非对称加密和解密的方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Security.SymmetricCrypto"/> 类的新实例。
            </summary>
            <param name="algorithmName">算法名称。</param>
        </member>
        <member name="P:Fireasy.Common.Security.AsymmetricCrypto.PublicKey">
            <summary>
            设置或获取公钥。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Security.AsymmetricCrypto.PrivateKey">
            <summary>
            获取或设置密钥。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.GeneratePublicKey">
            <summary>
            生成公钥。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.GeneratePrivateKey">
            <summary>
            生成私钥。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行加密。
            </summary>
            <param name="sourceStream">要加密的源流对象。</param>
            <param name="destStream">加密后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.Encrypt(System.Byte[])">
            <summary>
            对字节数组进行加密。
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            对文本进行加密。
            </summary>
            <param name="source">要加密的文本。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行解密。
            </summary>
            <param name="sourceStream">要解密的源流对象。</param>
            <param name="destStream">加解后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.Decrypt(System.Byte[])">
            <summary>
            对字节数组进行解密。
            </summary>
            <param name="cipherData"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.Decrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            将字节数组进行解密为文本。
            </summary>
            <param name="cipherData">密文字节数组。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.CreateSignature(System.Byte[])">
            <summary>
            对数组进行签名。
            </summary>
            <param name="source">要签名的数据。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.AsymmetricCrypto.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            验证签名。
            </summary>
            <param name="source">要签名的数据。</param>
            <param name="signature"><paramref name="source"/> 的签名数据。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Security.CryptoAlgorithm">
            <summary>
            支持的加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.DES">
            <summary>
            DES 对称加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.AES">
            <summary>
            AES 对称加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.MD5">
            <summary>
            MD5 哈希加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.RC2">
            <summary>
            RC2 对称加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.RC4">
            <summary>
            RC4 对称加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.Rijndael">
            <summary>
            Rijndael 对称加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.SHA1">
            <summary>
            SHA1 哈希加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.SHA256">
            <summary>
            SHA256 哈希加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.SHA384">
            <summary>
            SHA384 哈希加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.SHA512">
            <summary>
            SHA512 哈希加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.RSA">
            <summary>
            RSA 非对称加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.DSA">
            <summary>
            DSA 非对称加密算法。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Security.CryptoAlgorithm.TripleDES">
            <summary>
            三重数据 DES 对称加密算法。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Security.CryptographyFactory">
            <summary>
            密码算法工厂。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Security.CryptographyFactory.Create(System.String)">
            <summary>
            根据密码算法创建一个 <see cref="T:Fireasy.Common.Security.ICryptoProvider"/> 实例。
            </summary>
            <param name="algorithmName">密码算法的简称。</param>
            <returns>一个 <see cref="T:Fireasy.Common.Security.ICryptoProvider"/> 对象。</returns>
            <exception cref="T:System.NotSupportedException">指定的 <paramref name="algorithmName"/> 不支持。</exception>
        </member>
        <member name="M:Fireasy.Common.Security.CryptographyFactory.Create(Fireasy.Common.Security.CryptoAlgorithm)">
            <summary>
            根据密码算法创建一个 <see cref="T:Fireasy.Common.Security.ICryptoProvider"/> 实例。
            </summary>
            <param name="algorithm">密码算法的类型。</param>
            <returns>一个 <see cref="T:Fireasy.Common.Security.ICryptoProvider"/> 对象。</returns>
            <exception cref="T:System.NotSupportedException">指定的 <paramref name="algorithm"/> 不支持。</exception>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.GeneratePublicKey">
            <summary>
            生成公钥。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.GeneratePrivateKey">
            <summary>
            生成私钥。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行加密。
            </summary>
            <param name="sourceStream">要加密的源流对象。</param>
            <param name="destStream">加密后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.Encrypt(System.Byte[])">
            <summary>
            对字节数组进行加密。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            对文本进行加密。
            </summary>
            <param name="source">要加密的文本。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行解密。
            </summary>
            <param name="sourceStream">要解密的源流对象。</param>
            <param name="destStream">加解后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.Decrypt(System.Byte[])">
            <summary>
            对字节数组进行解密。
            </summary>
            <param name="cipherData"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.Decrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            将字节数组进行解密为文本。
            </summary>
            <param name="cipherData">密文字节数组。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.CreateSignature(System.Byte[])">
            <summary>
            对数组进行签名。
            </summary>
            <param name="source">要签名的数据。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.DSACrypto.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            验证签名。
            </summary>
            <param name="source">要签名的数据。</param>
            <param name="signature"><paramref name="source"/> 的签名数据。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Security.HashCrypto">
            <summary>
            提供基于散列的加密方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Security.HashCrypto.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Security.SymmetricCrypto"/> 类的新实例。
            </summary>
            <param name="algorithmName">算法名称。</param>
        </member>
        <member name="M:Fireasy.Common.Security.HashCrypto.Encrypt(System.Byte[])">
            <summary>
            对字节数组进行加密。
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.HashCrypto.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行解密。
            </summary>
            <param name="sourceStream">要解密的源流对象。</param>
            <param name="destStream">加解后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.HashCrypto.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            对文本进行加密。
            </summary>
            <param name="source">要加密的文本。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.HashCrypto.Decrypt(System.Byte[])">
            <summary>
            对字节数组进行解密。
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.HashCrypto.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行解密。
            </summary>
            <param name="sourceStream">要解密的源流对象。</param>
            <param name="destStream">加解后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.HashCrypto.Decrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            将字节数组进行解密为文本。
            </summary>
            <param name="array">密文字节数组。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.HashCrypto.ComputeHash(System.Byte[])">
            <summary>
            计算 Hash 值。
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Security.ICryptoProvider">
            <summary>
            提供对数据加密及解密的一组方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Security.ICryptoProvider.Encrypt(System.Byte[])">
            <summary>
            对字节数组进行加密。
            </summary>
            <param name="array">要加密的字节数组。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.ICryptoProvider.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            对文本进行加密。
            </summary>
            <param name="source">要加密的文本。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.ICryptoProvider.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行加密。
            </summary>
            <param name="sourceStream">要加密的源流对象。</param>
            <param name="destStream">加密后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.ICryptoProvider.Decrypt(System.Byte[])">
            <summary>
            对字节数组进行解密。
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.ICryptoProvider.Decrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            将字节数组进行解密为文本。
            </summary>
            <param name="array">密文字节数组。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.ICryptoProvider.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行解密。
            </summary>
            <param name="sourceStream">要解密的源流对象。</param>
            <param name="destStream">加解后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.GeneratePublicKey">
            <summary>
            生成公钥。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.GeneratePrivateKey">
            <summary>
            生成私钥。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行加密。
            </summary>
            <param name="sourceStream">要加密的源流对象。</param>
            <param name="destStream">加密后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.Encrypt(System.Byte[])">
            <summary>
            对字节数组进行加密。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            对文本进行加密。
            </summary>
            <param name="source">要加密的文本。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行解密。
            </summary>
            <param name="sourceStream">要解密的源流对象。</param>
            <param name="destStream">加解后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.Decrypt(System.Byte[])">
            <summary>
            对字节数组进行解密。
            </summary>
            <param name="cipherData"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.Decrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            将字节数组进行解密为文本。
            </summary>
            <param name="cipherData">密文字节数组。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.CreateSignature(System.Byte[])">
            <summary>
            对数组进行签名。
            </summary>
            <param name="source">要签名的数据。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.RSACrypto.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            验证签名。
            </summary>
            <param name="source">要签名的数据。</param>
            <param name="signature"><paramref name="source"/> 的签名数据。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Security.SymmetricCrypto">
            <summary>
            提供对称加密和解密的方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Security.SymmetricCrypto"/> 类的新实例。
            </summary>
            <param name="algorithmName">算法名称。</param>
        </member>
        <member name="P:Fireasy.Common.Security.SymmetricCrypto.CryptKey">
            <summary>
            获取或设置密钥。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Security.SymmetricCrypto.CryptIV">
            <summary>
            获取或设置初始化向量。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.SetKey(System.String)">
            <summary>
            设置加解密的密钥。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.SetDefaultKeyIV">
            <summary>
            设置默认的Key和IV。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.CreateEncryptor(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            创建加密的转换器。
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.CreateDecryptor(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            创建解密的转换器。
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行加密。
            </summary>
            <param name="sourceStream">要加密的源流对象。</param>
            <param name="destStream">加密后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.Encrypt(System.Byte[])">
            <summary>
            对字节数组进行加密。
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            对文本进行加密。
            </summary>
            <param name="source">要加密的文本。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            对流内的数据进行解密。
            </summary>
            <param name="sourceStream">要解密的源流对象。</param>
            <param name="destStream">加解后的目标流对象。</param>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.Decrypt(System.Byte[])">
            <summary>
            对字节数组进行解密。
            </summary>
            <param name="cipherData"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Security.SymmetricCrypto.Decrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            将字节数组进行解密为文本。
            </summary>
            <param name="cipherData">密文字节数组。</param>
            <param name="encoding">采用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.BinaryCompressSerializer">
            <summary>
            基于二进制的压缩序列化方法，对象序列化后进行压缩处理。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinaryCompressSerializer.Serialize``1(``0)">
            <summary>
            将一个对象序列化为字节数组。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的字节数组。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinaryCompressSerializer.Deserialize``1(System.Byte[])">
            <summary>
            从一个字节数组反序列化对象。
            </summary>
            <param name="bytes">字节数组。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.BinaryCryptoSerializer">
            <summary>
            基于二进制的加密序列化方法，对象序列化后进行加密处理，以确定数据的安全性。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinaryCryptoSerializer.#ctor(Fireasy.Common.Security.ICryptoProvider)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.BinaryCryptoSerializer"/> 类的新实例。
            </summary>
            <param name="cryptoProvider">数据加密算法提供者。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinaryCryptoSerializer.Serialize``1(``0)">
            <summary>
            将一个对象序列化为字节数组。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的字节数组。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinaryCryptoSerializer.Deserialize``1(System.Byte[])">
            <summary>
            从一个字节数组中反序列化对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes">字节数组。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.BinarySerializer">
            <summary>
            一个抽象类，将对象序列化为二进制数据，也用于将二进制数据反序列化为对象。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.BinarySerializer.Token">
            <summary>
            获取或设置序列化令牌。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinarySerializer.Serialize``1(``0)">
            <summary>
            将一个对象序列化为字节数组。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的字节数组。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinarySerializer.Serialize``1(``0,System.String)">
            <summary>
            将一个对象序列化后输出到磁盘文件。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <param name="filePath">保存的文件路径。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            从一个字节数组中反序列化对象。
            </summary>
            <param name="bytes">字节数组。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.BinarySerializer.Deserialize``1(System.String)">
            <summary>
            从一个磁盘文件反序列化对象。
            </summary>
            <param name="filePath">要读取的文件路径。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.CompositeJsonConverter`1">
            <summary>
            组合的 Json 转换器。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fireasy.Common.Serialization.CompositeJsonConverter`1.CanRead">
            <summary>
            不支持反序列化。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.CompositeJsonConverter`1.AddConverter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Fireasy.Common.Serialization.ITextConverter)">
            <summary>
            为匹配的成员表达式添加转换器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.CompositeJsonConverter`1.WriteJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonWriter,System.Object)">
            <summary>
            将一个对象转换为 Json 文本。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="writer"><see cref="T:Fireasy.Common.Serialization.JsonWriter"/>对象。</param>
            <param name="obj">要序列化对象。</param>
        </member>
        <member name="T:Fireasy.Common.Serialization.Configuration.SerializerConfigurationSection">
            <summary>
            提供对文本序列化器的配置管理。对应的配置节为 fireasy/serialzers。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.Configuration.SerializerConfigurationSection.Initialize(System.Xml.XmlNode)">
            <summary>
            使用配置节点对当前配置进行初始化。
            </summary>
            <param name="section">对应的配置节点。</param>
        </member>
        <member name="T:Fireasy.Common.Serialization.Configuration.SerializerConfigurationSectionHandler">
            <summary>
            提供对文本序列化器配置节的处理。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.Configuration.SerializerConfigurationSetting">
            <summary>
            文本序列化器配置信息。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.Configuration.SerializerConfigurationSetting.Name">
            <summary>
            获取或设置配置的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.Configuration.SerializerConfigurationSetting.SerializerType">
            <summary>
            获取或设置文本序列化器的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.ContainerJsonConverter">
            <summary>
            从 <see cref="T:Fireasy.Common.Ioc.Container"/> 里反转出注册的类型进行 Json 反序列化。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ContainerJsonConverter.#ctor(Fireasy.Common.Ioc.Container)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.ContainerJsonConverter"/> 类的新实例。
            </summary>
            <param name="container"></param>
        </member>
        <member name="P:Fireasy.Common.Serialization.ContainerJsonConverter.CanWrite">
            <summary>
            不支持序列化。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ContainerJsonConverter.CanConvert(System.Type)">
            <summary>
            从 <see cref="T:Fireasy.Common.Ioc.Container"/> 里判断是否注册指定的类型。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ContainerJsonConverter.ReadJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonReader,System.Type)">
            <summary>
            从 Json 中读取一个可由 <see cref="T:Fireasy.Common.Ioc.Container"/> 反转的对象。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="reader"><see cref="T:Fireasy.Common.Serialization.JsonReader"/> 对象。</param>
            <param name="dataType">要读取的对象的类型。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ConverterList">
            <summary>
            <see cref="T:Fireasy.Common.Serialization.ITextConverter"/> 的集合。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ConverterList.GetConverter(System.Type)">
            <summary>
            获取指定类型的序列化转换器。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>一个 <see cref="T:Fireasy.Common.Serialization.ITextConverter"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ConverterList.GetWritableConverter(System.Type,System.Type[])">
            <summary>
            获取指定类型的可写的序列化转换器。
            </summary>
            <param name="type">要判断的类型。</param>
            <param name="convertTypes">转换器的类型。</param>
            <returns>一个 <see cref="T:Fireasy.Common.Serialization.ITextConverter"/> 对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ConverterList.GetReadableConverter(System.Type,System.Type[])">
            <summary>
            获取指定类型的可读的序列化转换器。
            </summary>
            <param name="type">要判断的类型。</param>
            <param name="convertTypes">转换器的类型。</param>
            <returns>一个 <see cref="T:Fireasy.Common.Serialization.ITextConverter"/> 对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.DateTimeJsonConverter">
            <summary>
            <see cref="T:System.DateTime"/> 及可空类型的转换器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.DateTimeJsonConverter.#ctor(System.String)">
            <summary>
            使用日期输出格式串初始化 <see cref="T:Fireasy.Common.Serialization.DateTimeJsonConverter"/> 类的新实例。
            </summary>
            <param name="formatter">表示日期文本的格式，默认为 yyyy-MM-dd。</param>
        </member>
        <member name="P:Fireasy.Common.Serialization.DateTimeJsonConverter.Formatter">
            <summary>
            获取或设置表示日期文本的格式，默认为 yyyy-MM-dd。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.DateTimeJsonConverter.CanConvert(System.Type)">
            <summary>
            判断指定的类型是否允许转换。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.DateTimeJsonConverter.WriteJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonWriter,System.Object)">
            <summary>
            将 <see cref="T:System.DateTime"/> 值写为 Json 文本。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="writer"><see cref="T:Fireasy.Common.Serialization.JsonWriter"/>对象。</param>
            <param name="obj">要序列化的 <see cref="T:System.DateTime"/> 值。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.DateTimeJsonConverter.ReadJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonReader,System.Type)">
            <summary>
            从 Json 中读取 <see cref="T:System.DateTime"/> 对象。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="reader"><see cref="T:Fireasy.Common.Serialization.JsonReader"/>对象。</param>
            <param name="dataType">将要读取的类型。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.DateTimeXmlConverter">
            <summary>
            <see cref="T:System.DateTime"/> 及可空类型的转换器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.DateTimeXmlConverter.#ctor(System.String)">
            <summary>
            使用日期输出格式串初始化 <see cref="T:Fireasy.Common.Serialization.DateTimeXmlConverter"/> 类的新实例。
            </summary>
            <param name="formatter">表示日期文本的格式，默认为 yyyy-MM-dd。</param>
        </member>
        <member name="P:Fireasy.Common.Serialization.DateTimeXmlConverter.Formatter">
            <summary>
            获取或设置表示日期文本的格式，默认为 yyyy-MM-dd。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.DateTimeXmlConverter.CanConvert(System.Type)">
            <summary>
            判断指定的类型是否允许转换。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.DateTimeXmlConverter.WriteXml(Fireasy.Common.Serialization.XmlSerializer,System.Xml.XmlWriter,System.Object)">
            <summary>
            将 <see cref="T:System.DateTime"/> 值写为 Xml 文本。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.XmlSerializer"/> 对象。</param>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>对象。</param>
            <param name="obj">要序列化的 <see cref="T:System.DateTime"/> 值。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.DateTimeXmlConverter.ReadXml(Fireasy.Common.Serialization.XmlSerializer,System.Xml.XmlReader,System.Type)">
            <summary>
            从 Xml 中读取 <see cref="T:System.DateTime"/> 对象。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.XmlSerializer"/> 对象。</param>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/>对象。</param>
            <param name="dataType">将要读取的类型。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.DeserializeBase.GetAccessorCache(System.Type)">
            <summary>
            获取指定类型的属性访问缓存。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ExpressionJsonConverter">
            <summary>
            Lambda 表达式树的转换器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonConverter.WriteJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonWriter,System.Object)">
            <summary>
            将 <see cref="T:System.Linq.Expressions.LambdaExpression"/> 值写为 Json 文本。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="writer"><see cref="T:Fireasy.Common.Serialization.JsonWriter"/>对象。</param>
            <param name="obj">要序列化的 <see cref="T:System.Linq.Expressions.LambdaExpression"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonConverter.ReadJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonReader,System.Type)">
            <summary>
            将 Json 转换为 <see cref="T:System.Linq.Expressions.LambdaExpression"/> 的代理对象。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="reader"><see cref="T:Fireasy.Common.Serialization.JsonReader"/> 对象。</param>
            <param name="dataType">要反序列化的对象类型。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ExpressionJsonReader">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> 的 json 读取器。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.ExpressionJsonReader.TypeDictionary">
            <summary>
            获取参数名称与类型的字典。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.ExpressionJsonReader.ParameterDictionary">
            <summary>
            获取参数类型与表达式的字典。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.#ctor(Fireasy.Common.Serialization.JsonSerializer,System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.ExpressionJsonReader"/> 类的新实例。
            </summary>
            <param name="serializer"></param>
            <param name="json"></param>
        </member>
        <member name="P:Fireasy.Common.Serialization.ExpressionJsonReader.JsonReader">
            <summary>
            获取 <see cref="P:Fireasy.Common.Serialization.ExpressionJsonReader.JsonReader"/> 对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.GetExpression">
            <summary>
            通过对 json 文件的解析，获取 <see cref="T:System.Linq.Expressions.Expression"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadSegment">
            <summary>
            分段读取块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadExpression(System.Linq.Expressions.ExpressionType)">
            <summary>
            根据 <paramref name="nodeType"/> 分段读取对应的 <see cref="T:System.Linq.Expressions.Expression"/>。
            </summary>
            <param name="nodeType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadLambdaExpression">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.LambdaExpression"/> 块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeLambdaExpression(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Linq.Expressions.ParameterExpression})">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.LambdaExpression"/> 对象。
            </summary>
            <param name="body">表达式的声明部份。</param>
            <param name="parameters">参数表达式列表。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadParameterExpression">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.ParameterExpression"/> 块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeParameterExpression(System.Type,System.String)">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.ParameterExpression"/> 对象。
            </summary>
            <param name="type">参数的类型。</param>
            <param name="name">参数的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadConstantExpression">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.ConstantExpression"/> 块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeConstantExpression(System.Type,System.Object)">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.ConstantExpression"/> 对象。
            </summary>
            <param name="type">变量的类型。</param>
            <param name="value">变量的值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadMethodCallExpression">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.MethodCallExpression"/> 块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeMethodCallExpression(System.Type,System.String,System.Collections.Generic.List{System.Type},System.Collections.Generic.List{System.Type},System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.MethodCallExpression"/> 对象。
            </summary>
            <param name="declaringType">方法的声明类型。</param>
            <param name="name">方法的名称。</param>
            <param name="parameterTypes">方法的参数类型列表。</param>
            <param name="genericArgTypes">方法的泛型参数类型列表。</param>
            <param name="instance">方法所属对象的表达式。</param>
            <param name="arguments">方法的调用参数列表。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadMemberExpression">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.MemberExpression"/> 块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeMemberExpression(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.MemberExpression"/> 对象。
            </summary>
            <param name="declaringType">成员的声明类型。</param>
            <param name="name">成员的名称。</param>
            <param name="expression">成员所属对象的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadBinaryExpression(System.Linq.Expressions.ExpressionType)">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.BinaryExpression"/> 块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeBinaryExpression(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.BinaryExpression"/> 对象。
            </summary>
            <param name="nodeType">节点类别。</param>
            <param name="left">左操作表达式。</param>
            <param name="right">右操作表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadUnaryExpression(System.Linq.Expressions.ExpressionType)">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.UnaryExpression"/> 块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeUnaryExpression(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.UnaryExpression"/> 对象。
            </summary>
            <param name="nodeType">节点类别。</param>
            <param name="operand">操作数表达式。</param>
            <param name="type">目标类型。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadConditionalExpression">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.ConditionalExpression"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeConditionalExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.ConditionalExpression"/> 对象。
            </summary>
            <param name="test">测试表达式。</param>
            <param name="ifTrue">为真的表达式。</param>
            <param name="ifFalse">为假的表达式。</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadListInitExpression">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.ListInitExpression"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadTypeBinaryExpression(System.Linq.Expressions.ExpressionType)">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> 对象。
            </summary>
            <param name="nodeType"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeTypeBinaryExpression(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> 对象。
            </summary>
            <param name="nodeType"></param>
            <param name="expression"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ReadInvocationExpression">
            <summary>
            读取 <see cref="T:System.Linq.Expressions.InvocationExpression"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.MakeInvocationExpression(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            构造 <see cref="T:System.Linq.Expressions.InvocationExpression"/> 对象。
            </summary>
            <param name="expression">调用的表达式。</param>
            <param name="arguments">调用的参数列表。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ResolveType(System.String)">
            <summary>
            根据字符串解析出类型。
            </summary>
            <param name="typeName">表示类型的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.CheckKey(System.String,System.String)">
            <summary>
            检查值是否为所期望的值。
            </summary>
            <param name="expected">期望的值。</param>
            <param name="actual">实际的值。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonReader.ResolveMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            解析方法。
            </summary>
            <param name="declaringType">方法的声明类型。</param>
            <param name="name">方法的名称。</param>
            <param name="parameterTypes">方法的参数类型列表。</param>
            <param name="genArgTypes">方法的泛型参数类型列表。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ExpressionJsonWriter">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> 的写入器。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.ExpressionJsonWriter.TypeDictionary">
            <summary>
            获取类型与参数名称的字典。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.#ctor(Fireasy.Common.Serialization.JsonSerializer,System.Linq.Expressions.Expression)">
            <summary>
            初始化 <ExpressionJsonWriter>类的新实例。</ExpressionJsonWriter>
            </summary>
            <param name="serializer"></param>
            <param name="expression"></param>
        </member>
        <member name="P:Fireasy.Common.Serialization.ExpressionJsonWriter.JsonWriter">
            <summary>
            获取 <see cref="P:Fireasy.Common.Serialization.ExpressionJsonWriter.JsonWriter"/> 对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteSegment(System.Linq.Expressions.Expression)">
            <summary>
            分段写表达式块。
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteExpression(System.Linq.Expressions.Expression)">
            <summary>
            将 <paramref name="expression"/> 写成字符串。
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.ParameterExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.LambdaExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.BinaryExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.MemberExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.MethodCallExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.UnaryExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.ConstantExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.NewExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.NewArrayExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.MemberInitExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.MemberBinding"/> 对象。
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.MemberMemberBinding"/> 对象。
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.MemberAssignment"/> 对象。
            </summary>
            <param name="assign"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.MemberListBinding"/> 对象。
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.ElementInit"/> 对象。
            </summary>
            <param name="initializer"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.ConditionalExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.ListInitExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            写 <see cref="T:System.Linq.Expressions.InvocationExpression"/> 对象。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.ExpressionJsonWriter.WriteTypeName(System.Type)">
            <summary>
            将类型转换为字符串。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.FullDateTimeJsonConverter">
            <summary>
            完整的日期时间格式转换器。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.FullDateTimeXmlConverter">
            <summary>
            完整的日期时间格式转换器。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.IBinarySerializer">
            <summary>
            提供对象的二进制序列化与反序列化方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.IBinarySerializer.Serialize``1(``0)">
            <summary>
            将对象序列化为字节数组表示。
            </summary>
            <typeparam name="T">对象的类型。</typeparam>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的字节数组。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.IBinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            从一个字节数组中反序列化对象。
            </summary>
            <typeparam name="T">能够反序列化的对象类型。 </typeparam>
            <param name="data">字节数组。</param>
            <returns>类型为 <typeparamref name="T"/> 的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.IgnoreSerializationBinder">
            <summary>
            一个序列化控制类，用于忽略二进制反序列化过程中对类型的转换。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.IgnoreSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            根据提供的程序集和类名称，转换目标类型。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="typeName">类的名称。</param>
            <returns>绑定的类型。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ITextConverter">
            <summary>
            提供对象和文本的转换，以实现自定义序列化和反序列化过程。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextConverter.CanConvert(System.Type)">
            <summary>
            判断指定的类型是否允许转换。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="P:Fireasy.Common.Serialization.ITextConverter.CanRead">
            <summary>
            获取是否可以使用 ReadObject 方法。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.ITextConverter.CanWrite">
            <summary>
            获取是否可使用 WriteObject 方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextConverter.WriteObject(Fireasy.Common.Serialization.ITextSerializer,System.Object)">
            <summary>
            将对象写为文本。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.ITextSerializer"/> 对象。</param>
            <param name="obj">要序列化的对象。</param>
            <returns>表示对象的文本。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextConverter.ReadObject(Fireasy.Common.Serialization.ITextSerializer,System.Type,System.String)">
            <summary>
            从文本中读取对象。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.ITextSerializer"/> 对象。</param>
            <param name="dataType">将要读取的类型。</param>
            <param name="text">表示对象的文本。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ITextSerializable">
            <summary>
            提供对象文本格式化的序列化和反序列化方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextSerializable.Serialize(Fireasy.Common.Serialization.ITextSerializer)">
            <summary>
            将对象序列为文本表示。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.ITextSerializer"/> 对象。</param>
            <returns>表示对象的文本。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextSerializable.Deserialize(Fireasy.Common.Serialization.ITextSerializer,System.String)">
            <summary>
            将文本反序列化为对象。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.ITextSerializer"/> 对象。</param>
            <param name="text">表示对象的文本。</param>
        </member>
        <member name="T:Fireasy.Common.Serialization.ITextSerializer">
            <summary>
            提供对象的文本序列化与反序列化方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextSerializer.Serialize``1(``0)">
            <summary>
            将对象转换为使用文本表示。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">要序列化的对象。</param>
            <returns>表示对象的文本。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextSerializer.Deserialize``1(System.String)">
            <summary>
            从文本中解析出类型 <typeparamref name="T"/> 的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content">表示对象的文本。</param>
            <returns>解析后的对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextSerializer.Deserialize``1(System.String,``0)">
            <summary>
            从文本中解析出类型 <typeparamref name="T"/> 的对象，<typeparamref name="T"/> 可以是匿名类型。
            </summary>
            <typeparam name="T">自定义匿名类型。</typeparam>
            <param name="content">表示对象的文本</param>
            <param name="anyObj">为构造 <typeparamref name="T"/> 类型而初始化的对象。</param>
            <returns>解析后的对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ITextSerializer.Deserialize(System.String,System.Type)">
            <summary>
            从文本中解析出类型 <paramref name="type"/> 的对象。
            </summary>
            <param name="content">表示对象的文本。</param>
            <param name="type">可序列化的对象类型。</param>
            <returns>对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ITextSerializer`1">
            <summary>
            表示限定 <typeparamref name="TOption"/> 的文本序列化与反序列化方法。
            </summary>
            <typeparam name="TOption"></typeparam>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonConverter">
            <summary>
            Json 转换器的抽象类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonConverter.CanConvert(System.Type)">
            <summary>
            判断指定的类型是否允许转换。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="P:Fireasy.Common.Serialization.JsonConverter.CanRead">
            <summary>
            获取是否可以使用 ReadJson 方法。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.JsonConverter.CanWrite">
            <summary>
            获取是否可使用 WriteJson 方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonConverter.WriteJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonWriter,System.Object)">
            <summary>
            将对象写为 Json 文本。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="writer"><see cref="T:Fireasy.Common.Serialization.JsonWriter"/>对象。</param>
            <param name="obj"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonConverter.ReadJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonReader,System.Type)">
            <summary>
            从 Json 中读取对象。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="reader"><see cref="T:Fireasy.Common.Serialization.JsonReader"/>对象。</param>
            <param name="dataType">将要读取的类型。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonConverter`1">
            <summary>
            基于 <typeparamref name="T"/> 类型提供的 Json 转换器。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            判断指定的类型是否允许转换。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonDeserialize.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonDeserialize.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonFilterConverter`1">
            <summary>
            指定需要排除的类属性，序列化时将不输出这些属性。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonFilterConverter`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            初始化 <see cref="!:JsonFilterConverter"/> 类的新实例。
            </summary>
            <param name="filterExps"></param>
        </member>
        <member name="P:Fireasy.Common.Serialization.JsonFilterConverter`1.CanRead">
            <summary>
            不支持支序列化。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonFilterConverter`1.WriteJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonWriter,System.Object)">
            <summary>
            将对象写为 Json 文本。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="writer"><see cref="T:Fireasy.Common.Serialization.JsonWriter"/>对象。</param>
            <param name="obj">要序列化的 <see cref="T:System.DateTime"/> 值。</param>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonFormat">
            <summary>
            Json序列化的格式。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonFormat.Object">
            <summary>
            对象的格式。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonFormat.String">
            <summary>
            Javascript可识别的字符串。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonReader">
            <summary>
            表示可连续读取json文本的读取器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.JsonReader"/> 类的新实例。
            </summary>
            <param name="reader">一个 <see cref="T:System.IO.TextReader"/> 对象。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.ReadRaw">
            <summary>
            读取一段完整的Json文本。
            </summary>
            <returns>表示Json的文本。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.SkipWhiteSpaces">
            <summary>
            连续跳过空白字符。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.ReadValue">
            <summary>
            读取除字符串外的一个值，比如布尔和数值型。
            </summary>
            <returns>字符串、布尔值等。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.ReadAsBoolean">
            <summary>
            读取一个布尔值。
            </summary>
            <returns>布尔值。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.ReadKey">
            <summary>
            表示读出属性名。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.ReadAsString">
            <summary>
            读取一个字符串。
            </summary>
            <returns>字符串。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.IsDelimiter(System.Char)">
            <summary>
            判断指定的字符是否是分隔符。
            </summary>
            <param name="c">要判断的字符。</param>
            <returns>如果字符是分隔符，则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.IsNextCharacter(System.Char)">
            <summary>
            判断下一个字符是否与给定的字符相符。
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.IsWhiteSpace(System.Char)">
            <summary>
            判断指定的字符是否是空白字符。
            </summary>
            <param name="c">要判断的字符。</param>
            <returns>如果字符是空白字符则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.IsNull">
            <summary>
            判断是否为 null。
            </summary>
            <returns>如果为 null 则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.Peek">
            <summary>
            读取一个字符，但是指针不会后移。
            </summary>
            <returns>读取的字符。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.Read">
            <summary>
            读取一个字符。
            </summary>
            <returns>读取的字符。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.AssertAndConsume(System.Char)">
            <summary>
            判断下一个字符是否是指定的字符。
            </summary>
            <param name="character">要判断的字符。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.AssertNextIsDelimiterOrSeparator(System.Char)">
            <summary>
            判断下一个字符是否是指定结束的字符。
            </summary>
            <param name="endDelimiter">预期结束的字符。</param>
            <returns>如果是结束符号，则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.LoopReadArray(System.Action{Fireasy.Common.Serialization.JsonReader})">
            <summary>
            循环读取一个数组块。该块以符号 [ 开始，以符号 ] 结束。
            </summary>
            <param name="loop">应用数组单位的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonReader.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerialize.Serialize(System.Object,System.Type,System.String)">
            <summary>
            将对象序列化为文本。
            </summary>
            <param name="value">要序列化的值。</param>
            <param name="type"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerialize.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerialize.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonSerializeOption">
            <summary>
            Json 序列化的控制选项。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerializeOption.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.JsonSerializeOption"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.JsonSerializeOption.Format">
            <summary>
            获取或设置Json序列化的格式。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.JsonSerializeOption.IgnoreNull">
            <summary>
            获取或设置是否忽略为 null 的值。默认为 true。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonSerializer">
            <summary>
            Json 文本序列化器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerializer.#ctor(Fireasy.Common.Serialization.JsonSerializeOption)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 类的新实例。
            </summary>
            <param name="option">序列化选项。</param>
        </member>
        <member name="P:Fireasy.Common.Serialization.JsonSerializer.Option">
            <summary>
            获取序列化选项。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerializer.Serialize``1(``0)">
            <summary>
            将对象转换为使用文本表示。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">要序列化的对象。</param>
            <returns>表示对象的 Json 文本。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerializer.Serialize``1(``0,Fireasy.Common.Serialization.JsonWriter)">
            <summary>
            将对象转换为使用文本并写入到流中。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            从 Json 文本中解析出类型 <typeparamref name="T"/> 的对象。
            </summary>
            <typeparam name="T">可序列化的对象类型。</typeparam>
            <param name="json">表示对象的 Json 文本。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerializer.Deserialize``1(Fireasy.Common.Serialization.JsonReader)">
            <summary>
            从流中读取文本，解析出类型 <paramref name="type"/> 的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            从 Json 文本中解析出类型 <paramref name="type"/> 的对象。
            </summary>
            <param name="json">表示对象的 Json 文本。</param>
            <param name="type">可序列化的对象类型。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonSerializer.Deserialize``1(System.String,``0)">
            <summary>
            从 Json 文本中解析出类型 <typeparamref name="T"/> 的对象，<typeparamref name="T"/> 可以是匿名类型。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">表示对象的 Json 文本</param>
            <param name="anyObj">可序列化的匿名类型。</param>
            <returns>对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonTokens">
            <summary>
            Json 令牌类型。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonTokens.StartObjectLiteralCharacter">
            <summary>
            表示对象开始的字符。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonTokens.EndObjectLiteralCharacter">
            <summary>
            表示对象结束的字符。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonTokens.StartArrayCharacter">
            <summary>
            表示数组开始的字符。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonTokens.EndArrayCharacter">
            <summary>
            表示数组结束的字符。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonTokens.StringDelimiter">
            <summary>
            表示字符串的引用符。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonTokens.ElementSeparator">
            <summary>
            表示元素的分隔符。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.JsonTokens.PairSeparator">
            <summary>
            表示属性的命名符。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.JsonWriter">
            <summary>
            表示将对象使用json表示的编写器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.JsonWriter"/> 类的新实例。
            </summary>
            <param name="writer">一个 <see cref="T:System.IO.TextWriter"/> 对象。</param>
        </member>
        <member name="P:Fireasy.Common.Serialization.JsonWriter.Indent">
            <summary>
            获取或设置缩进的宽度。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteNull">
            <summary>
            写入一个 null 值。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteValue(System.Object)">
            <summary>
            写入一个值。
            </summary>
            <param name="value">要写入的值。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteRaw(System.String)">
            <summary>
            写入一段 Json。
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteKey(System.String)">
            <summary>
            写入一个键。
            </summary>
            <param name="key">要写入的键值。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteString(System.String)">
            <summary>
            写入一个文本值。
            </summary>
            <param name="value">要写入的值。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteComma">
            <summary>
            写入一个逗号。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteStartArray">
            <summary>
            写入一个数组开始符。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteEndArray">
            <summary>
            写入一个数组结束符。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteStartObject">
            <summary>
            写入一个对象开始符。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteEndObject">
            <summary>
            写入一个对象结束符。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.Flush">
            <summary>
            清理当前缓冲区，确认文本写入。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteIndent">
            <summary>
            写入缩进空格。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.WriteLine">
            <summary>
            写入换行符。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.JsonWriter.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="T:Fireasy.Common.Serialization.NoTextSerializableAttribute">
            <summary>
            表示此属性不被序列化。此类无法继承。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.SerializeContext">
            <summary>
            序列化上下文对象。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializeContext.#ctor">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.SerializeContext"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeContext.GetAccessors">
            <summary>
            获取或设置读取的类属性缓存。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeContext.SetAccessors">
            <summary>
            获取或设置写入的类属性缓存。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeContext.Option">
            <summary>
            获取或设置 <see cref="T:Fireasy.Common.Serialization.SerializeOption"/>。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializeContext.GetAccessorCache(System.Type)">
            <summary>
            获取指定类型的属性访问缓存。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializeContext.TrySerialize(System.Object,System.Action)">
            <summary>
            尝试使用方法序列化对象。
            </summary>
            <param name="obj">要锁定的对象。</param>
            <param name="serializeMethod">被锁定的方法。</param>
            <exception cref="T:Fireasy.Common.Serialization.SerializationException">该对象被循环引用，即嵌套引用。</exception>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializeContext.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.PropertyGetAccessorCache">
            <summary>
            属性读取器的缓存。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.PropertyGetAccessorCache.Accessor">
            <summary>
            获取属性对应的访问器。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.PropertyGetAccessorCache.Filter">
            <summary>
            获取属性过滤的一个方法。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.PropertyGetAccessorCache.PropertyInfo">
            <summary>
            获取被缓存的 <see cref="P:Fireasy.Common.Serialization.PropertyGetAccessorCache.PropertyInfo"/> 对象。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.PropertyGetAccessorCache.PropertyName">
            <summary>
            获取被缓存的属性名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.PropertyGetAccessorCache.Formatter">
            <summary>
            获取格式化文本的格式。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.PropertyGetAccessorCache.Converter">
            <summary>
            获取属性上的转换器。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.SerializeOption">
            <summary>
            序列化选项。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.CamelNaming">
            <summary>
            获取或设置是否对属性名使用 Camel 语法命名规则。默认为 false。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.InclusiveNames">
            <summary>
            获取或设置可包含的属性名数组。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.ExclusiveNames">
            <summary>
            获取或设置要排除的属性名数组。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.InclusiveMembers">
            <summary>
            获取或设置可包含的属性名数组。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.ExclusiveMembers">
            <summary>
            获取或设置要排除的属性名数组。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.Converters">
            <summary>
            获取或设置序列化的转换器。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.IgnoreType">
            <summary>
            获取或设置是否忽略 <see cref="T:System.Type"/> 类型的属性。默认为 true。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.Indent">
            <summary>
            获取或设置是否缩进。默认为 true。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.ReferenceLoopHandling">
            <summary>
            获取或设置循环引用时如何处理。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeOption.DateFormatHandling">
            <summary>
            获取或设置日期如何序列化。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializeOption.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            使用表达式指定在序列化 <typeparamref name="T"/> 时仅被序列化的成员列表。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expressions">一组 <see cref="T:System.Linq.Expressions.MemberExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializeOption.Exclude``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            使用表达式指定在序列化 <typeparamref name="T"/> 时要排除序列化的成员列表。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expressions">一组 <see cref="T:System.Linq.Expressions.MemberExpression"/> 表达式。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ReferenceLoopHandling">
            <summary>
            循环引用时的处理策略。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.ReferenceLoopHandling.Error">
            <summary>
            抛出异常。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.ReferenceLoopHandling.Ignore">
            <summary>
            忽略，不再序列化。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.ReferenceLoopHandling.Serialize">
            <summary>
            继续序列化。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.DateFormatHandling">
            <summary>
            日期格式的序列化策略。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.DateFormatHandling.Default">
            <summary>
            缺省格式，如 "2010-12-01"。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.DateFormatHandling.IsoDateFormat">
            <summary>
            ISO 格式，如 "2012-03-21T05:40Z"。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Serialization.DateFormatHandling.JsonDateFormat">
            <summary>
            Json 格式，如 "\/Date(1198908717056)\/"。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.SerializationException">
            <summary>
            序列化或反序列化时抛出的异常。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializationException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.SerializationException"/> 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
            <param name="innerExp">内部异常信息。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializerFactory.CreateSerializer(System.String)">
            <summary>
            根据应用程序配置，创建文本序列化器。
            </summary>
            <param name="configName">应用程序配置项的名称。</param>
            <returns><paramref name="configName"/>缺省时，如果应用程序未配置，则为 <see cref="!:MemoryCacheManager"/>，否则为配置项对应的 <see cref="!:ICacheManager"/> 实例。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.SerializerUtil.CheckLazyValueCreate(Fireasy.Common.ComponentModel.ILazyManager,System.String)">
            <summary>
            检查延迟加载
            </summary>
            <param name="lazyMgr"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.SerializeToken">
            <summary>
            序列化令牌，用于在序列化和反序列化过程中验证二进制数据。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.SerializeToken.Data">
            <summary>
            获取或设置序列令牌的数据。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.TextFormatterAttribute">
            <summary>
            为 DateTime、Decimal 等类型指定文本格式化的格式。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.TextFormatterAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.TextFormatterAttribute"/> 类的新实例。
            </summary>
            <param name="formatter">格式。</param>
        </member>
        <member name="P:Fireasy.Common.Serialization.TextFormatterAttribute.Formatter">
            <summary>
            获取或设置格式。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.TextSerializeElementAttribute">
            <summary>
            表示此属性序列化后的元素名称。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.TextSerializeElementAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.TextSerializeElementAttribute"/> 类的新实例。
            </summary>
            <param name="name">用于标识元素的名称。</param>
        </member>
        <member name="P:Fireasy.Common.Serialization.TextSerializeElementAttribute.Name">
            <summary>
            获取或设置元素名称。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.TextSerializeElementPropertyHelper">
            <summary>
            提供序列化时访问类型内部元素的一组方法。无法继承此类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.TextSerializeElementPropertyHelper.#ctor(System.Type,System.Boolean)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.TextSerializeElementPropertyHelper"/> 类的新实例。
            </summary>
            <param name="type">被序列化的对象的类型。</param>
            <param name="camel">元素名称是否使用 Camel 命名规则。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.TextSerializeElementPropertyHelper.GetProperty(System.String)">
            <summary>
            获取指定名称的属性。
            </summary>
            <param name="name">用于标识属性名称的文本。</param>
            <returns>与名称对应的属性。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.TimeSpanConverter">
            <summary>
            <see cref="T:System.TimeSpan"/> 的转换器。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Serialization.UnicodeStringJsonConverter">
            <summary>
            字符串 Unicode 编码的转换器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.UnicodeStringJsonConverter.CanConvert(System.Type)">
            <summary>
            判断指定的类型是否允许转换。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.UnicodeStringJsonConverter.WriteJson(Fireasy.Common.Serialization.JsonSerializer,Fireasy.Common.Serialization.JsonWriter,System.Object)">
            <summary>
            将字符串写为 Json 文本。
            </summary>
            <param name="serializer">当前的 <see cref="T:Fireasy.Common.Serialization.JsonSerializer"/> 对象。</param>
            <param name="writer"><see cref="T:Fireasy.Common.Serialization.JsonWriter"/>对象。</param>
            <param name="obj">要序列化的字符串。</param>
        </member>
        <member name="T:Fireasy.Common.Serialization.ValueConverter">
            <summary>
            提供一个适用于 Json 和 Xml 序列化的值类型转换器。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ValueConverter.CanConvert(System.Type)">
            <summary>
            判断类型是否可转换。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Fireasy.Common.Serialization.ValueConverter.CanRead">
            <summary>
            获取是否可以使用 ReadObject 方法。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.ValueConverter.CanWrite">
            <summary>
            获取是否可以使用 WriteObject 方法。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.ValueConverter.WriteObject(Fireasy.Common.Serialization.ITextSerializer,System.Object)">
            <summary>
            将对象写为文本。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.ITextSerializer"/> 对象。</param>
            <param name="obj">要序列化的对象。</param>
            <returns>表示对象的文本。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.ValueConverter.ReadObject(Fireasy.Common.Serialization.ITextSerializer,System.Type,System.String)">
            <summary>
            从文本中读取对象。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.ITextSerializer"/> 对象。</param>
            <param name="dataType">将要读取的类型。</param>
            <param name="text">表示对象的文本。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.ValueConverter`1">
            <summary>
            为 <typeparamref name="T"/> 提供一个适用于 Json 和 Xml 序列化的值类型转换器。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Serialization.ValueConverter`1.CanConvert(System.Type)">
            <summary>
            判断类型是否可转换。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.XmlConverter">
            <summary>
            Xml 转换器的抽象类。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlConverter.CanConvert(System.Type)">
            <summary>
            判断指定的类型是否允许转换。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlConverter.CanRead">
            <summary>
            获取是否可以使用 ReadXml 方法。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlConverter.CanWrite">
            <summary>
            获取是否可使用 WriteXml 方法。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlConverter.Streaming">
            <summary>
            获取是否使用流对象方式，即使用 <see cref="T:System.Xml.XmlReader"/> 和 <see cref="T:System.Xml.XmlWriter"/> 对象，默认为 false。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlConverter.WriteXml(Fireasy.Common.Serialization.XmlSerializer,System.Xml.XmlWriter,System.Object)">
            <summary>
            将对象写为 Xml 文本。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.XmlSerializer"/> 对象。</param>
            <param name="writer"></param>
            <param name="obj">要序列化的对象。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlConverter.ReadXml(Fireasy.Common.Serialization.XmlSerializer,System.Xml.XmlReader,System.Type)">
            <summary>
            从 Xml 中读取对象。
            </summary>
            <param name="serializer">一个 <see cref="T:Fireasy.Common.Serialization.XmlSerializer"/> 对象。</param>
            <param name="reader"></param>
            <param name="dataType">将要读取的类型。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Serialization.XmlConverter`1">
            <summary>
            基于 <typeparamref name="T"/> 类型提供的 Xml 转换器。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlConverter`1.CanConvert(System.Type)">
            <summary>
            判断指定的类型是否允许转换。
            </summary>
            <param name="type">要判断的类型。</param>
            <returns>可以转换则为 true。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlDeserialize.XmlReaderHelper.ReadCurrentNodeValue(System.Xml.XmlReader)">
            <summary>
            Reads the current node in the reader's value.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerialize.Serialize(System.Object,System.Boolean,System.Type,System.String)">
            <summary>
            将对象序列化为文本。
            </summary>
            <param name="value">要序列化的值。</param>
            <param name="startEle"></param>
            <param name="type"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerialize.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的非托管和托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerialize.Dispose">
            <summary>
            释放对象所占用的所有资源。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlSerializeOption.CData">
            <summary>
            获取或设置是否使用 CData 输出。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlSerializeOption.Declaration">
            <summary>
            获取或设置是否输入 Xml 声明。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlSerializeOption.StartElement">
            <summary>
            获取或设置是否输出元素起始，默认为 true。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlSerializeOption.IgnoreNull">
            <summary>
            获取或设置是否忽略为 null 的值。默认为 true。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlSerializeOption.OutputStyle">
            <summary>
            获取或设置输出的风格。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerializer.#ctor(Fireasy.Common.Serialization.XmlSerializeOption)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Serialization.XmlSerializer"/> 类的新实例。
            </summary>
            <param name="option">序列化选项。</param>
        </member>
        <member name="P:Fireasy.Common.Serialization.XmlSerializer.Option">
            <summary>
            获取序列化选项。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerializer.Serialize``1(``0)">
            <summary>
            将对象转换为使用文本表示。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">要序列化的对象。</param>
            <returns>表示对象的 Json 文本。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerializer.Serialize``1(``0,System.Xml.XmlTextWriter)">
            <summary>
            将对象转换为使用文本并写入到流中。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerializer.Deserialize``1(System.String)">
            <summary>
            从 Xml 文本中解析出类型 <typeparamref name="T"/> 的对象。
            </summary>
            <typeparam name="T">可序列化的对象类型。</typeparam>
            <param name="xml">表示对象的 Xml 文本。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerializer.Deserialize``1(System.Xml.XmlReader)">
            <summary>
            从流中读取文本，解析出类型 <paramref name="type"/> 的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerializer.Deserialize(System.String,System.Type)">
            <summary>
            从 Xml 文本中解析出类型 <paramref name="type"/> 的对象。
            </summary>
            <param name="xml">表示对象的 Xml 文本。</param>
            <param name="type">可序列化的对象类型。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Fireasy.Common.Serialization.XmlSerializer.Deserialize``1(System.String,``0)">
            <summary>
            从 Xml 文本中解析出类型 <typeparamref name="T"/> 的对象，<typeparamref name="T"/> 可以是匿名类型。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">表示对象的 Xml 文本</param>
            <param name="anyObj">可序列化的匿名类型。</param>
            <returns>对象。</returns>
        </member>
        <member name="T:Fireasy.Common.Subscribes.ChannelAttribute">
            <summary>
            用于标识主题类型的通道名称。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ChannelAttribute.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Fireasy.Common.Subscribes.ChannelAttribute"/> 类的新实例。
            </summary>
            <param name="name">通道名称。</param>
        </member>
        <member name="P:Fireasy.Common.Subscribes.ChannelAttribute.Name">
            <summary>
            获取或设置通道名称。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ChannelHelper.GetChannelName(System.Type)">
            <summary>
            获取主题类型的通道名称。
            </summary>
            <param name="subjectType">主题类型。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Subscribes.Configuration.SubscribeConfigurationSection">
            <summary>
            提供对订阅管理器的配置管理。对应的配置节为 fireasy/subscribers。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Subscribes.Configuration.SubscribeConfigurationSection.Initialize(System.Xml.XmlNode)">
            <summary>
            使用配置节点对当前配置进行初始化。
            </summary>
            <param name="section">对应的配置节点。</param>
        </member>
        <member name="T:Fireasy.Common.Subscribes.Configuration.SubscribeConfigurationSectionHandler">
            <summary>
            提供对缓存管理配置节的处理。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Subscribes.Configuration.SubscribeConfigurationSetting">
            <summary>
            缓存管理配置信息。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Subscribes.Configuration.SubscribeConfigurationSetting.Name">
            <summary>
            获取或设置配置的名称。
            </summary>
        </member>
        <member name="P:Fireasy.Common.Subscribes.Configuration.SubscribeConfigurationSetting.SubscriberType">
            <summary>
            获取或设置缓存管理器的类型。
            </summary>
        </member>
        <member name="T:Fireasy.Common.Subscribes.DefaultSubscribeManager">
            <summary>
            默认的订阅管理器。
            </summary>
        </member>
        <member name="F:Fireasy.Common.Subscribes.DefaultSubscribeManager.Instance">
            <summary>
            缺省实例。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Subscribes.DefaultSubscribeManager.Publish``1(``0)">
            <summary>
            向管理器发送主题。
            </summary>
            <typeparam name="TSubject"></typeparam>
            <param name="subject">主题内容。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.DefaultSubscribeManager.AddSubscriber``1(System.Action{``0})">
            <summary>
            添加一个订阅方法。
            </summary>
            <typeparam name="TSubject"></typeparam>
            <param name="subscriber">读取主题的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.DefaultSubscribeManager.AddSubscriber(System.Type,System.Delegate)">
            <summary>
            添加一个订阅方法。
            </summary>
            <param name="subjectType">主题的类型。</param>
            <param name="subscriber">读取主题的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.DefaultSubscribeManager.RemoveSubscriber``1">
            <summary>
            移除相关的订阅方法。
            </summary>
            <typeparam name="TSubject"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Subscribes.DefaultSubscribeManager.RemoveSubscriber(System.Type)">
            <summary>
            移除相关的订阅方法。
            </summary>
            <param name="subjectType">主题的类型。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.Extensions.Discovery``1(Fireasy.Common.Subscribes.ISubscribeManager,System.Reflection.Assembly)">
            <summary>
            在指定的程序集中发现 <see cref="T:Fireasy.Common.Subscribes.ISubscriber`1"/> 的实现。
            </summary>
            <typeparam name="TSubject"></typeparam>
            <param name="subscribeMgr"><see cref="T:Fireasy.Common.Subscribes.ISubscribeManager"/> 实例。</param>
            <param name="assembly">指定的程序集。</param>
            <returns></returns>
        </member>
        <member name="M:Fireasy.Common.Subscribes.Extensions.AddSubscriber``1(Fireasy.Common.Subscribes.ISubscribeManager,Fireasy.Common.Subscribes.ISubscriber{``0})">
            <summary>
            添加一个订阅者实例。
            </summary>
            <typeparam name="TSubject"></typeparam>
            <param name="subscribeMgr"><see cref="T:Fireasy.Common.Subscribes.ISubscribeManager"/> 实例。</param>
            <param name="subscriber">主题订阅者。</param>
            <returns></returns>
        </member>
        <member name="T:Fireasy.Common.Subscribes.ISubscribeManager">
            <summary>
            订阅管理器接口。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscribeManager.Publish``1(``0)">
            <summary>
            向管理器发送主题。
            </summary>
            <typeparam name="TSubject"></typeparam>
            <param name="subject">主题内容。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscribeManager.Publish(System.String,System.Byte[])">
            <summary>
            向指定的通道发送数据。
            </summary>
            <param name="channel">通道名称。</param>
            <param name="data">发送的数据。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscribeManager.AddSubscriber``1(System.Action{``0})">
            <summary>
            添加一个订阅方法。
            </summary>
            <typeparam name="TSubject"></typeparam>
            <param name="subscriber">读取主题的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscribeManager.AddSubscriber(System.Type,System.Delegate)">
            <summary>
            添加一个订阅方法。
            </summary>
            <param name="subjectType">主题的类型。</param>
            <param name="subscriber">读取主题的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscribeManager.AddSubscriber(System.String,System.Action{System.Byte[]})">
            <summary>
            添加一个订阅方法。
            </summary>
            <param name="channel">通道名称。</param>
            <param name="subscriber">读取数据的方法。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscribeManager.RemoveSubscriber``1">
            <summary>
            移除相关的订阅方法。
            </summary>
            <typeparam name="TSubject"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscribeManager.RemoveSubscriber(System.Type)">
            <summary>
            移除相关的订阅方法。
            </summary>
            <param name="subjectType">主题的类型。</param>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscribeManager.RemoveSubscriber(System.String)">
            <summary>
            移除指定通道的订阅方法。
            </summary>
            <param name="channel">通道名称。</param>
        </member>
        <member name="T:Fireasy.Common.Subscribes.ISubscriber`1">
            <summary>
            <typeparamref name="TSubject"/> 的订阅者。
            </summary>
            <typeparam name="TSubject"></typeparam>
        </member>
        <member name="M:Fireasy.Common.Subscribes.ISubscriber`1.Accept(`0)">
            <summary>
            接收 <typeparamref name="TSubject"/> 实例。
            </summary>
            <param name="subject"></param>
        </member>
        <member name="T:Fireasy.Common.Subscribes.SubscribeManagerFactory">
            <summary>
            订阅管理器的工厂。
            </summary>
        </member>
        <member name="M:Fireasy.Common.Subscribes.SubscribeManagerFactory.CreateManager(System.String)">
            <summary>
            根据应用程序配置，创建订阅管理器。
            </summary>
            <param name="configName">应用程序配置项的名称。</param>
            <returns><paramref name="configName"/>缺省时，如果应用程序未配置，则为 <see cref="T:Fireasy.Common.Subscribes.DefaultSubscribeManager"/>，否则为配置项对应的 <see cref="T:Fireasy.Common.Subscribes.ISubscribeManager"/> 实例。</returns>
        </member>
        <member name="T:Fireasy.Common.TimeWatcher">
            <summary>
            对方法执行的时间监视。
            </summary>
        </member>
        <member name="M:Fireasy.Common.TimeWatcher.Watch(System.Action)">
            <summary>
            监视方法执行所耗用的时间。
            </summary>
            <param name="method">要执行的方法。</param>
            <returns>所耗用的时间。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Common.TimeWatcher.WatchApart(System.Action[])">
            <summary>
            监视一组方法分别执行所耗用的时间。
            </summary>
            <param name="methods">要执行的一组方法。</param>
            <returns>每一个方法执行所耗用的时间。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methods"/> 参数为 null。</exception>
        </member>
        <member name="M:Fireasy.Common.TimeWatcher.WatchAround(System.Action[])">
            <summary>
            监视一组方法执行的时刻。
            </summary>
            <param name="methods">要执行的方法。</param>
            <returns>每一个方法执行的时刻。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methods"/> 参数为 null。</exception>
        </member>
    </members>
</doc>

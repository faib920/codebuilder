<#+
//判断是否为逻辑删除标记
public static bool CheckDelFlag(Column column)
{
    switch (column.Name.ToLower())
    {
        case "del_flag":
        case "delflag":
        case "isdelete":
            return true;
    }
    
    return false;
}

//获取主键名称
public static string GetPrimaryKey(Table table)
{
    if (table.PrimaryKeys.Count == 0)
    {
        return string.Empty;
    }
    
    return table.PrimaryKeys[0].PropertyName;
}

//获取主键类型
public static string GetPrimaryKeyPType(Table table)
{
    if (table.PrimaryKeys.Count == 0)
    {
        return "string";
    }
    
    var type = table.PrimaryKeys[0].PropertyType;
    if (type != "string")
    {
        type += "?";
    }
    
    return type;
}

//获取主键类型
public static string GetPrimaryKeyPTypeNonNullable(Table table)
{
    if (table.PrimaryKeys.Count == 0)
    {
        return "string";
    }
    
    var type = table.PrimaryKeys[0].PropertyType;
    return type;
}

//获取可空类型
public static string GetNullableType(string type)
{
    if (type == "string" || type.EndsWith("?"))
    {
        return type;
    }
    
    return type + "?";
}

//转为驼峰命名
public static string ToCamel(string name)
{
    if (name.Length <= 1)
    {
        return name;
    }

    return name[0].ToString().ToLower() + name.Substring(1);
}

//转为复数
public static string ToPlural(string word)
{
    if (IsSample(word))
    {
        return word;
    }

    var plural1 = new Regex("(?<keep>[^aeiou])y$");
    var plural2 = new Regex("(?<keep>[aeiou]y)$");
    var plural3 = new Regex("(?<keep>[sxzh])$");
    var plural4 = new Regex("(?<keep>[^sxzhy])$");

    if (plural1.IsMatch(word))
    {
        return plural1.Replace(word, "${keep}ies");
    }
    else if (plural2.IsMatch(word))
    {
        return plural2.Replace(word, "${keep}s");
    }
    else if (plural3.IsMatch(word))
    {
        return plural3.Replace(word, "${keep}es");
    }
    else if (plural4.IsMatch(word))
    {
        return plural4.Replace(word, "${keep}s");
    }

    return word;
}

//是否是需要排除的属性
public static bool IsExcludeProperty(Column column, string properties)
{
    foreach (var p in properties.Split('|'))
    {
        if (p == column.Name)
        {
            return true;
        }
    }

    return false;
}

//获取点的最后一部分
public static string GetLastPart(string path)
{
    var array = path.Split('.');
    return array.Length > 0 ? array[array.Length - 1] : path;
}

//新的guid
public static string NewGuid()
{
    return Guid.NewGuid().ToString().ToUpper();
}

//导入命名空间
public static string Imports(string names)
{
    if (names == null)
    {
        return string.Empty;
    }
    var str = string.Empty;
    var array = names.Split('|');
    for (var i = 0; i < array.Length; i++)
    {
        if (!string.IsNullOrEmpty(array[i]))
        {
            str += "using " + array[i] + ";";
            if (i != array.Length - 1) str += "\r\n";
        }
    }
    return str;
}

//判断字符串str是否为空，如果为空则输出空字符串，否则输出str
public static string CheckNull(string str)
{
    if (string.IsNullOrEmpty(str))
    {
        return string.Empty;
    }

    return str;
}

//判断字符串str是否为空，如果为空则输出str1，否则输出str
public static string CheckNull(string str, string str1)
{
    if (string.IsNullOrEmpty(str))
    {
        return str1 ?? string.Empty;
    }

    return str;
}

//判断字符串str是否为空，如果为空则输出空字符串，否则输出str且以点开头
public static string CheckDot(string str)
{
    if (string.IsNullOrEmpty(str))
    {
        return string.Empty;
    }

    return "." + str;
}

//判断字符串str是否为空，如果为空则输出空字符串，否则输出str且以start开头
public static string CheckStart(string str, string start)
{
    if (string.IsNullOrEmpty(str))
    {
        return string.Empty;
    }

    return start + str;
}

//判断字符串str是否为空，如果为空则输出空字符串，否则输出str且以end结尾
public static string CheckEnd(string str, string end)
{
    if (string.IsNullOrEmpty(str))
    {
        return string.Empty;
    }

    return str + end;
}

private static bool IsSample(string word)
{
    var words = new[] { "people", "deer", "sheep" };
    return words.Contains(word.ToLower());
}
#>
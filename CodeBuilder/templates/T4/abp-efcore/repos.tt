<#@ template hostSpecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ include file="public\base.tt" #>
<# 
    TemplateHost host = (TemplateHost)Host;
    var table = host.Current;
    var ptype = GetPrimaryKeyPTypeNonNullable(table);
    var pk = GetPrimaryKey(table);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
using <#= host.Profile.ProjectName #>.<#= host.Profile.Module #>.Domain.<#= host.Profile.SubNameSpace #>.Entities;
using <#= host.Profile.ProjectName #>.<#= host.Profile.Module #>.Shared.QueryDtos.<#= host.Profile.SubNameSpace #>;
using <#= host.Profile.ProjectName #>.<#= host.Profile.Module #>.Domain.EfCore;

namespace <#= host.Profile.ProjectName #>.<#= host.Profile.Module #>.Domain.<#= host.Profile.SubNameSpace #>.Repositories
{
    /// <summary>
    /// <#= table.Description #>仓储类
    /// </summary>
    public class <#= table.ClassName #>Repository : EfCoreRepository<<#= host.Profile.Module #>DbContext, <#= table.ClassName #>, <#= ptype #>>
    {
        public <#= table.ClassName #>Repository(IReadWriteDbContextProvider<<#= host.Profile.Module #>DbContext> dbContextProvider) 
            : base(dbContextProvider)
        {
        }

        /// <summary>
        /// 获取<#= table.Description #>列表（分页）
        /// </summary>
        /// <param name="queryDto"></param>
        /// <returns></returns>
        public async Task<List<<#= table.ClassName #>>> GetPagedListAsync(<#= table.ClassName #>QueryDto queryDto)
        {
            return await GetListQueryable(queryDto)
               //.PageBy(queryDto)
               //.OrderBy(queryDto)
               .ToListAsync();
        }

        /// <summary>
        /// 获取<#= table.Description #>数据条数
        /// </summary>
        /// <param name="queryDto"></param>
        /// <returns></returns>
        public async Task<int> QueryCountAsync(<#= table.ClassName #>QueryDto queryDto)
        {
            return await GetListQueryable(queryDto).CountAsync();
        }

        /// <summary>
        /// 获取<#= table.Description #>列表
        /// </summary>
        /// <param name="queryDto"></param>
        /// <returns></returns>
        public async Task<List<<#= table.ClassName #>>> GetListAsync(<#= table.ClassName #>QueryDto queryDto)
        {
            return await GetListQueryable(queryDto)
               .ToListAsync();
        }

        /// <summary>
        /// 根据一组ID获取<#= table.Description #>列表
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public async Task<List<<#= table.ClassName #>>> GetListByIdsAsync(List<<#= ptype #>> ids)
        {
            return await ReadOnlyDbSet.AsQueryable().AsNoTracking()
               .Where(c => ids.Contains(c.<#= GetPrimaryKey(table) #>))
               .ToListAsync();
        }

        /// <summary>
        /// 根据ID查询
        /// </summary>
        /// <param name="id"></param>
        /// <param name="isAsTracking">是否跟踪</param>
        /// <returns></returns>
        public async Task<<#= table.ClassName #>> GetByIdAsync(<#= ptype #> id, bool isAsTracking = false)
        {
            var query = isAsTracking ? DbSet.AsQueryable().AsTracking() : ReadOnlyDbSet.AsQueryable().AsNoTracking();
            return await query.FirstOrDefaultAsync(c => c.<#= GetPrimaryKey(table) #> == id);
        }

        #region 内部方法
        private IQueryable<<#= table.ClassName #>> GetListQueryable(<#= table.ClassName #>QueryDto queryDto)
        {
            var query = ReadOnlyDbSet.AsQueryable().AsNoTracking();
            //TODO:Someone 处理过滤条件
            return query;
        }
        #endregion
    }
}
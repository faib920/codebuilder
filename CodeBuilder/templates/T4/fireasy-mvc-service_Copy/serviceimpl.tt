<#@ template hostSpecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ include file="public\base.tt" #>
<# 
    TemplateHost host = (TemplateHost)Host;
    var table = host.Current;
    var ptype = GetPrimaryKeyPTypeNonNullable(table);
    var pk = GetPrimaryKey(table);
#>
// **************************************
// 生成：CodeBuilder (http://www.fireasy.cn/codebuilder)
// 项目：<#= host.Profile.ProjectName #>
// 版权：Copyright <#= host.Profile.CompanyName #>
// 作者：<#= host.Profile.Author #>
// 时间：<#= DateTime.Now #>
// **************************************
using Fireasy.Common.Extensions;
using Fireasy.Common.Ioc;
using Fireasy.Data;
using Fireasy.Data.Entity;
using Fireasy.Data.Entity.Linq;
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Linq.Expressions;
using Lord.Skiad.Common;
using <#= host.Profile.Namespace #>.Data;
using <#= host.Profile.Namespace #>.Models;

namespace <#= host.Profile.Namespace #>.Services.Impls
{
    /// <summary>
    /// <#= table.Description #> 服务类。
    /// </summary>
    public partial class <#= table.ClassName #>Service : BaseService, I<#= table.ClassName #>Service, ITransientService
    {
        private readonly DbContext _dbContext;

        public <#= table.ClassName #>Service(DbContext dbContext)
        {
            _dbContext = dbContext;
        }

        /// <summary>
        /// 根据ID获取 <see cref="<#= table.ClassName #>" />。
        /// </summary>
        /// <param name="id">信息ID。</param>
        /// <returns></returns>
        public async Task<<#= table.ClassName #>> GetAsync(<#= ptype #> id)
        {
            var entity = await _dbContext.<#= StringExtension.ToPlural(table.ClassName) #>.GetAsync(id);
            return entity;
        }

        /// <summary>
        /// 保存 <see cref="<#= table.ClassName #>" />。
        /// </summary>
           /// <param name="info">要保存的数据。</param>
        /// <returns>id</returns>
        public async Task<int> SaveAsync(<#= table.ClassName #> info)
        {
            if (info.<#= pk #> == 0)
            {
                await _dbContext.AddCreateLogAsync(info, async () => await _dbContext.<#= StringExtension.ToPlural(table.ClassName) #>.InsertAsync(info) > 0, s => GetOperateLog(s));
            }
            else
            {
                Expression<Func<<#= table.ClassName #>>> p = () => new <#= table.ClassName #>()
                {
                    //todo 
                };
                await _dbContext.AddUpdateLogAsync(info.<#= pk #>, p, async t => await _dbContext.<#= StringExtension.ToPlural(table.ClassName) #>.UpdateAsync(t, s => s.<#= pk #> == info.<#= pk #>));
            }
            
            return info.<#= pk #>;
        }

        /// <summary>
        /// 保存 <see cref="<#= table.ClassName #>" />。
        /// </summary>
        /// <param name="entities">要保存的数据。</param>
        /// <returns>id</returns>
        public async Task<bool> SaveAsync(List<<#= table.ClassName #>> entities)
        {
            // todo 
            await _dbContext.AddCreateLogsAsync(entities, async () => await _dbContext.<#= StringExtension.ToPlural(table.ClassName) #>.BatchAsync(entities, (u, s) => u.Insert(s)) > 0, s => GetOperateLog(s));
            return true;
        }
        
        /// <summary>
        /// 根据查询条件获取 <see cref="<#= table.ClassName #>" />。
        /// </summary>
        /// <param name="keyword">关键字</param>
        /// <param name="pager">分页参数</param>
        /// <param name="sorting">排序定义</param>
        /// <returns></returns>
        public async Task<List<<#= table.ClassName #>>> QueryAsync(string keyword, DataPager pager, SortDefinition sorting)
        {
            var entities = await _dbContext.<#= StringExtension.ToPlural(table.ClassName) #>
                .Segment(pager)
                .OrderBy(sorting)
                //.AssertWhere(!string.IsNullOrEmpty(keyword), s => s.Name.Contains(keyword))
                .ToListAsync();
            return entities;
        }

        /// <summary>
        /// 删除 <see cref="<#= table.ClassName #>" />。
        /// </summary>
        /// <param name="id">id</param>
        /// <returns></returns>
        public async Task<bool> DeleteAsync(<#= ptype #> id)
        {
            await _dbContext.<#= StringExtension.ToPlural(table.ClassName) #>.DeleteAsync(new PropertyValue[] { id });
            return true;
        }
        
        private string GetOperateLog(<#= table.ClassName #> s)
        {
            var sb = new StringBuilder();
            //todo
            return sb.ToString();
        }
    }
}